# tezpur-mvapich2

# Whenever this version string changes, the application is configured
# and rebuilt from scratch
VERSION = 2010-09-18

CPP = cpp
FPP = cpp
CC  = /usr/local/compilers/Intel/intel_cc_11.1/bin/intel64/icc
CXX = /usr/local/compilers/Intel/intel_cc_11.1/bin/intel64/icpc
F77 = /usr/local/compilers/Intel/intel_fc_11.1/bin/intel64/ifort
F90 = /usr/local/compilers/Intel/intel_fc_11.1/bin/intel64/ifort

CPPFLAGS = -DCCTK_DISABLE_OMP_COLLAPSE -DMPICH_IGNORE_CXX_SEEK -DCARPET_OPTIMISE -DNDEBUG
FPPFLAGS = -DCCTK_DISABLE_OMP_COLLAPSE -traditional -DCARPET_OPTIMISE -DNDEBUG
# no -msse3
CFLAGS   = -align -std=c99 -U__STRICT_ANSI__ -g
CXXFLAGS = -align -std=c99 -U__STRICT_ANSI__ -g 
F77FLAGS = -g -align -pad -w95 -cm
F90FLAGS = -g -align -pad -w95 -cm

LDFLAGS  = -Wl,-rpath,/usr/local/packages/fftw/3.2/intel-11.1-mvapich2-1.4/lib -Wl,-rpath,/usr/local/packages/gsl/1.9/intel-11.1-mvapich2-1.4/lib -Wl,-rpath,/usr/local/packages/papi-3.5.0/lib64 -Wl,-rpath,/usr/local/compilers/Intel/intel_cc_11.1/lib/intel64 -Wl,-rpath,/usr/local/compilers/Intel/intel_fc_11.1/lib/intel64
LIBDIRS = /usr/X11R6/lib64 /usr/local/ofed/lib64 /usr/local/compilers/Intel/intel_fc_11.1/lib/intel64

C_LINE_DIRECTIVES = yes
F_LINE_DIRECTIVES = yes

VECTORISE                = yes
VECTORISE_ALIGNED_ARRAYS = no
VECTORISE_INLINE         = no

# -check-uninit fails for asm output operands
DEBUG           = no
CPP_DEBUG_FLAGS = -DCARPET_DEBUG
FPP_DEBUG_FLAGS = -DCARPET_DEBUG
C_DEBUG_FLAGS   = -O0 # -check-uninit
CXX_DEBUG_FLAGS = -O0 # -check-uninit
F77_DEBUG_FLAGS = -O0 -check bounds -check format # -check all
F90_DEBUG_FLAGS = -O0 -check bounds -check format # -check all

# On Abe, the options -O3, -xT, and -ip lead to segmentation faults
# near MPI calls
# With Intel 9, using -ip prevents debug information for local variables
# With Intel 9, using -O3 leads to very long compile times (> 45 minutes)
OPTIMISE           = yes
CPP_OPTIMISE_FLAGS = # -DCARPET_OPTIMISE -DNDEBUG
FPP_OPTIMISE_FLAGS = # -DCARPET_OPTIMISE -DNDEBUG
C_OPTIMISE_FLAGS   = -O2 -override-limits
CXX_OPTIMISE_FLAGS = -O2 -override-limits
F77_OPTIMISE_FLAGS = -O2 -override-limits
F90_OPTIMISE_FLAGS = -O2 -override-limits

PROFILE           = no
CPP_PROFILE_FLAGS =
FPP_PROFILE_FLAGS =
C_PROFILE_FLAGS   = -pg
CXX_PROFILE_FLAGS = -pg
F77_PROFILE_FLAGS = -pg
F90_PROFILE_FLAGS = -pg

OPENMP           = yes
CPP_OPENMP_FLAGS = -openmp
FPP_OPENMP_FLAGS = -D_OPENMP
C_OPENMP_FLAGS   = -openmp
CXX_OPENMP_FLAGS = -openmp
F77_OPENMP_FLAGS = -openmp
F90_OPENMP_FLAGS = -openmp

WARN           = yes
CPP_WARN_FLAGS = 
FPP_WARN_FLAGS = 
C_WARN_FLAGS   = 
CXX_WARN_FLAGS = 
F77_WARN_FLAGS = 
F90_WARN_FLAGS = 



# With OpenMP, certain Intel libraries need to be linked statically.
# This prevents the error
# "cannot allocate memory for thread-local data: ABORT".
# However, the MPI libraries must be linked dynamically.

BLAS_DIR  = /usr/local/compilers/Intel/mkl-10.2/lib/em64t
BLAS_LIBS = -Bstatic mkl_intel_lp64 mkl_core mkl_intel_thread -Bdynamic

FFTW3_DIR = /usr/local/packages/fftw/3.2/intel-11.1-mvapich2-1.4

GSL_DIR = /usr/local/packages/gsl/1.9/intel-11.1-mvapich2-1.4

LIBXML2_DIR = /home/knarf/utils

LAPACK_DIR  = /usr/local/compilers/Intel/mkl-10.2/lib/em64t
LAPACK_LIBS = -Bstatic mkl_intel_lp64 mkl_core mkl_intel_thread -Bdynamic

# LONI support suggests to use /usr/local/packages/mvapich2-1.2p1-intel-10.1
# - maybe this would work also for Queen Bee
# - mvapich2 should be more scalable than mvapich
MPI_DIR      = NO_BUILD
MPI_INC_DIRS = /usr/local/packages/mvapich2/1.6rc1/intel-11.1/include
MPI_LIB_DIRS = /usr/local/packages/mvapich2/1.6rc1/intel-11.1/lib /usr/local/ofed/lib64
MPI_LIBS     = mpich ibverbs ibumad rdmacm   bfd iberty rt

#PAPI_DIR = /usr/local/packages/papi-3.0.8.1

PETSC_DIR       = /usr/local/packages/petsc-2.3.3-intel9.1-mvapich2
PETSC_ARCH      = linux-64
PETSC_ARCH_LIBS = X11

PTHREADS_DIR = NO_BUILD

TAU_MAKEFILE = /usr/local/packages/tau-2.17.1/x86_64/lib/Makefile.tau-intel10.1_mvapich2_1.2rc1-icpc-mpi-pdt
