RedHat v <9 or other Linux present, starting standard mode...
    |\^/|     Maple 7 (IBM INTEL LINUX)
._|\|   |/|_. Copyright (c) 2001 by Waterloo Maple Inc.
 \  MAPLE  /  All rights reserved. Maple is a registered trademark of
 <____ ____>  Waterloo Maple Inc.
      |       Type ? for help.
# util.maple -- misc utility routines
# $Header$
> 
#
# fix_rationals - convert numbers to RATIONAL() calls
# nonmatching_names - find names in a list which *don't* have a specified prefix
# sprint_numeric_list - convert a numeric list to a valid C identifier suffix
# print_name_list_dcl - print C declarations for a list of names
#
# hypercube_points - compute all (integer) points in an N-dimensional hypercube
#
# ftruncate - truncate a file to zero length
#
> 
################################################################################
################################################################################
################################################################################
> 
#
# This function converts all {integer, rational} subexpressions of its
# input except integer exponents and -1 factors in products, into function
# calls
#	RATIONAL(num,den)
# This is useful in conjunction with the  C() library function, since
#
#	C( (1/3) * foo * bar )
#		t0 = foo*bar/3;
#
# generates a (slow) division (and runs the risk of mixed-mode-arithmetic
# problems), while
#
#	C((1.0/3.0) * foo * bar);
#	     t0 = 0.3333333333*foo*bar;
#
# suffers from roundoff error.  With this function,
#
#	fix_rationals((1/3) * foo * bar);
#	     RATIONAL(1,3) foo bar
#	C(%);
#	     t0 = RATIONAL(1.0,3.0)*foo*bar;
#
# which a C preprocessor macro can easily convert to the desired
#
#	     t0 = (1.0/3.0)*foo*bar;
#
# Additionally, this function can be told to leave certain types of
# subexpressions unconverged.  For example,
#	fix_rationals(expr, type, specfunc(integer, DATA));
# will leave all subexpressions of the form  DATA(integer arguments)
# unconverted.
#
# Arguments:
# expr = (in) The expression to be converted.
# inert_fn = (optional in)
#	     If specified, this argument should be a Boolean procedure
#	     or the name of a Boolean procedure.  This procedure should
#	     take one or more argument, and return true if and only if
#	     the first argument should *not* be converted, i.e. if we
#	     should leave this expression unchanged.  See the last
#	     example above.
# ... = (optional in)
#	Any further arguments are passed as additional arguments to
#	the inert_fn procedure.
#
> fix_rationals :=
> proc(
>     expr::{
> 	        algebraic, name = algebraic,
> 	  list({algebraic, name = algebraic}),
> 	  set ({algebraic, name = algebraic})
> 	  },
>     inert_fn::{name, procedure}
>     )
> local nn, k,
>       base, power, fbase, fpower,
>       fn, fn_args_list,
>       num, den, mult;
> 
# do we want to convert this expression?
> if ((nargs >= 2) and inert_fn(expr, args[3..nargs]))
>    then return expr;
> end if;
> 
# recurse over lists and sets
> if (type(expr, {list,set}))
>    then return map(fix_rationals, expr, args[2..nargs]);
> end if;
> 
# recurse over equation right hand sides
> if (type(expr, name = algebraic))
>    then return ( lhs(expr) = fix_rationals(rhs(expr), args[2..nargs]) );
> end if;
> 
# recurse over functions other than  RATIONAL()
> if (type(expr, function))
>    then
> 	fn := op(0, expr);
> 	if (fn <> 'RATIONAL')
> 	   then
> 		fn_args_list := [op(expr)];
> 		fn_args_list := map(fix_rationals, fn_args_list, args[2..nargs]);
> 		fn; return '%'( op(fn_args_list) );
> 	end if;
> end if;
> 
> nn := nops(expr);
> 
# recurse over sums
> if (type(expr, `+`))
>    then return sum('fix_rationals(op(k,expr), args[2..nargs])', 'k'=1..nn);
> end if;
> 
# recurse over products
# ... leaving leading -1 factors intact, i.e. not converted to RATIONAL(-1,1)
> if (type(expr, `*`))
>    then
> 	if (op(1, expr) = -1)
> 	   then return -1*fix_rationals(remove(type, expr, 'identical(-1)'),
> 				        args[2..nargs]);
> 	   else return product('fix_rationals(op(k,expr), args[2..nargs])',
> 			       'k'=1..nn);
> 	end if;
> end if;
> 
# recurse over powers
# ... leaving integer exponents intact
> if (type(expr, `^`))
>    then
> 	base := op(1, expr);
> 	power := op(2, expr);
> 
> 	fbase := fix_rationals(base, args[2..nargs]);
> 	if (type(power, integer))
> 	   then fpower := power;
> 	   else fpower := fix_rationals(power, args[2..nargs]);
> 	end if;
> 	return fbase ^ fpower;
> end if;
> 
# fix integers and fractions
> if (type(expr, integer))
>    then return 'RATIONAL'(expr, 1);
> end if;
> if (type(expr, fraction))
>    then
> 	num := op(1, expr);
> 	den := op(2, expr);
> 
> 	return 'RATIONAL'(num, den);
> end if;
> 
# turn Maple floating-point into integer fraction, then recursively fix that
> if (type(expr, float))
>    then
> 	mult := op(1, expr);
> 	power := op(2, expr);
> 	return fix_rationals(mult * 10^power, args[2..nargs]);
> end if;
> 
# identity op on names
> if (type(expr, name))
>    then return expr;
> end if;
> 
# unknown type
> error "%0",
>       "unknown type for expr!",
>       "   whattype(expr) = ", whattype(expr),
>       "   expr = ", expr;
> end proc;
fix_rationals := proc(expr::{algebraic, name = algebraic,
list({algebraic, name = algebraic}), set({algebraic, name = algebraic})},
inert_fn::{procedure, name})
local nn, k, base, power, fbase, fpower, fn, fn_args_list, num, den, mult;
    if 2 <= nargs and inert_fn(expr, args[3 .. nargs]) then return expr
    end if;
    if type(expr, {set, list}) then
        return map(fix_rationals, expr, args[2 .. nargs])
    end if;
    if type(expr, name = algebraic) then
        return lhs(expr) = fix_rationals(rhs(expr), args[2 .. nargs])
    end if;
    if type(expr, function) then
        fn := op(0, expr);
        if fn <> 'RATIONAL' then
            fn_args_list := [op(expr)];
            fn_args_list :=
                map(fix_rationals, fn_args_list, args[2 .. nargs]);
            fn;
            return '%'(op(fn_args_list))
        end if
    end if;
    nn := nops(expr);
    if type(expr, `+`) then return
        sum('fix_rationals(op(k, expr), args[2 .. nargs])', 'k' = 1 .. nn)
    end if;
    if type(expr, `*`) then
        if op(1, expr) = -1 then return -fix_rationals(
            remove(type, expr, 'identical(-1)'), args[2 .. nargs])
        else return product('fix_rationals(op(k, expr), args[2 .. nargs])',
            'k' = 1 .. nn)
        end if
    end if;
    if type(expr, `^`) then
        base := op(1, expr);
        power := op(2, expr);
        fbase := fix_rationals(base, args[2 .. nargs]);
        if type(power, integer) then fpower := power
        else fpower := fix_rationals(power, args[2 .. nargs])
        end if;
        return fbase^fpower
    end if;
    if type(expr, integer) then return 'RATIONAL'(expr, 1) end if;
    if type(expr, fraction) then
        num := op(1, expr); den := op(2, expr); return 'RATIONAL'(num, den)
    end if;
    if type(expr, float) then
        mult := op(1, expr);
        power := op(2, expr);
        return fix_rationals(mult*10^power, args[2 .. nargs])
    end if;
    if type(expr, name) then return expr end if;
    error "%0", "unknown type for expr!", "   whattype(expr) = ",
        whattype(expr), "   expr = ", expr
end proc

> 
################################################################################
> 
#
# This function finds names in a list which *don't* have a specified prefix.
#
# Arguments:
# name_list = A list of the names.
# prefix = The prefix we want to filter out.
#
# Results:
# This function returns the subset list of names which don't have the
# specified prefix.
# 
> nonmatching_names :=
> proc( name_list::list({name,string}), prefix::{name,string} )
> 
> select(   proc(n)
> 	  evalb(not StringTools[IsPrefix](prefix,n));
> 	  end proc
> 	,
> 	  name_list
>       );
> end proc;
nonmatching_names := proc(
name_list::list({name, string}), prefix::{name, string})
    select(proc(n) evalb(not StringTools[IsPrefix](prefix, n)) end proc,
    name_list)
end proc

> 
################################################################################
> 
#
# This function converts a numeric list to a string which is a valid
# C identifier suffix: elements are separated by "_", decimal points are
# replaced by "x", and all nonzero values have explicit +/- signs, which
# are replaced by "p"/"m".
#
# For example, [0,-3.5,+4] --> "0_m3x5_p4".
#
> sprint_numeric_list :=
> proc(nlist::list(numeric))
> 
# generate preliminary string, eg "+0_-3.5_+4"
> map2(sprintf, "%+a", nlist);
> ListTools[Join](%, "_");
> cat(op(%));
> 
# fixup bad characters
> StringTools[SubstituteAll](%, "+0", "0");
> StringTools[CharacterMap](".+-", "xpm", %);
> 
> return %;
> end proc;
sprint_numeric_list := proc(nlist::list(numeric))
    map2(sprintf, "%+a", nlist);
    ListTools[Join](%, "_");
    cat(op(%));
    StringTools[SubstituteAll](%, "+0", "0");
    StringTools[CharacterMap](".+-", "xpm", %);
    return %
end proc

> 
################################################################################
> 
#
# This function prints a sequence of C declarations for a list of names.
#
# Argument:
# name_list = A list of the names.
# type_name = The C type of the names, eg. "double".
# file_name = The file name to write the declaration to.  This is
#	      truncated before writing.
#
> print_name_list_dcl :=
> proc( name_list::list({name,string}),
>       type_name::string,
>       file_name::string )
> local blanks, separator_string;
> 
> ftruncate(file_name);
> 
> map(
>        proc(var::{name,string})
>        fprintf(file_name,
> 	       "%s %s;\n", 
> 	       type_name, var);
>        end proc
>      ,
>        name_list
>    );
> 
> fclose(file_name);
> NULL;
> end proc;
print_name_list_dcl := proc(
name_list::list({name, string}), type_name::string, file_name::string)
local blanks, separator_string;
    ftruncate(file_name);
    map(proc(var::{name, string})
            fprintf(file_name, "%s %s;\n", type_name, var)
        end proc, name_list);
    fclose(file_name);
    NULL
end proc

> 
################################################################################
################################################################################
################################################################################
> 
#
# This function computes a list of all the (integer) points in an
# N-dimensional hypercube, in lexicographic order.  The present
# implementation requires N <= 4.
#
# Arguments:
# cmin,cmax = N-element lists of cube minimum/maximum coordinates.
#
# Results:
# The function returns a set of d-element lists giving the coordinates.
# For example,
#	hypercube([0,0], [2,1]
# returns
#	{ [0,0], [0,1], [1,0], [1,1], [2,0], [2,1] }
> hypercube_points :=
> proc(cmin::list(integer), cmax::list(integer))
> local N, i,j,k,l;
> 
> N := nops(cmin);
> if (nops(cmax) <> N)
>    then error 
> 	"must have same number of dimensions for min and max coordinates!";
> fi;
> 
> if   (N = 1)
>    then return [seq([i], i=cmin[1]..cmax[1])];
> elif (N = 2)
>    then return [
> 		 seq(
> 		   seq([i,j], j=cmin[2]..cmax[2]),
> 		   i=cmin[1]..cmax[1])
> 	       ];
> elif (N = 3)
>    then return [
> 		 seq(
> 		   seq(
> 		     seq([i,j,k], k=cmin[3]..cmax[3]),
> 		     j=cmin[2]..cmax[2] ),
> 		   i=cmin[1]..cmax[1])
> 	       ];
> elif (N = 4)
>    then return [
> 		 seq(
> 		   seq(
> 		     seq(
> 		       seq([i,j,k,l], l=cmin[4]..cmax[4]),
> 		       k=cmin[3]..cmax[3] ),
> 		     j=cmin[2]..cmax[2]),
> 		   i=cmin[1]..cmax[1])
> 	       ];
> else
> 	error "implementation restriction: must have N <= 4, got %1!", N;
> fi;
> end proc;
hypercube_points := proc(cmin::list(integer), cmax::list(integer))
local N, i, j, k, l;
    N := nops(cmin);
    if nops(cmax) <> N then error
        "must have same number of dimensions for min and max coordinates!"
    end if;
    if N = 1 then return [seq([i], i = cmin[1] .. cmax[1])]
    elif N = 2 then return
        [seq(seq([i, j], j = cmin[2] .. cmax[2]), i = cmin[1] .. cmax[1])]
    elif N = 3 then return [seq(
        seq(seq([i, j, k], k = cmin[3] .. cmax[3]), j = cmin[2] .. cmax[2])
        , i = cmin[1] .. cmax[1])]
    elif N = 4 then return [seq(seq(seq(
        seq([i, j, k, l], l = cmin[4] .. cmax[4]), k = cmin[3] .. cmax[3]),
        j = cmin[2] .. cmax[2]), i = cmin[1] .. cmax[1])]
    else error "implementation restriction: must have N <= 4, got %1!", N
    end if
end proc

> 
################################################################################
################################################################################
################################################################################
> 
#
# This function truncates a file to 0 length if it exists, or creates
# it at that length if it doesn't exist.
#
# Arguments:
# file_name = (in) The name of the file.
#
> ftruncate :=
> proc(file_name::string)
> fopen(file_name, 'WRITE');
> fclose(%);
> NULL;
> end proc;
ftruncate :=

    proc(file_name::string) fopen(file_name, 'WRITE'); fclose(%); NULL end proc

# interpolate.maple -- compute interpolation formulas/coefficients
# $Header$
> 
#
# <<<representation of numbers, data values, etc>>>
# Lagrange_polynomial_interpolant - compute Lagrange polynomial interpolant
# Hermite_polynomial_interpolant - compute Hermite polynomial interpolant
# coeffs_as_lc_of_data - coefficients of ... (linear combination of data)
#
# print_coeffs__lc_of_data - print C code to compute coefficients
# print_load_data - print C code to load input array chunk into struct data
# print_store_coeffs - print C code to store struct coeffs "somewhere"
# print_interp_cmpt__lc_of_data - print C code for computation of interpolant
#
# coeff_name - name of coefficient of data at a given [m] coordinate
# data_var_name - name of variable storing data value at a given [m] coordinate
#
> 
################################################################################
> 
#
# ***** representation of numbers, data values, etc *****
#
# We use RATIONAL(p.0,q.0) to denote the rational number p/q.
#
# We use DATA(...) to represent the data values being interpolated at a
# specified [m] coordinate, where the arguments are the [m] coordinates.
#
# We use COEFF(...) to represent the molecule coefficient at a specified
# [m] coordinate, where the arguments are the [m] coordinates.
#
# For example, the usual 1-D centered 2nd order 1st derivative molecule
# would be written
#	RATIONAL(-1.0,2.0)*DATA(-1) + RATIONA(1.0,2.0)*DATA(1)
# and its coefficients as
#	COEFF(-1) = RATIONAL(-1.0,2.0)
#	COEFF(1) = RATIONAL(1.0,2.0)
#
> 
################################################################################
################################################################################
################################################################################
> 
#
# This function computes a Lagrange polynomial interpolant in any
# number of dimensions.
#
# Arguments:
# fn = The interpolation function.  This should be a procedure in the
#      coordinates, having the coefficients as global variables.  For
#      example,
#	  proc(x,y) c00 + c10*x + c01*y end proc
# coeff_list = A set of the interpolation coefficients (coefficients in
#	       the interpolation function), for example [c00, c10, c01].
# coord_list = A list of the coordinates (independent variables in the
#	       interpolation function), for example [x,y].
# posn_list = A list of positions (each a list of numeric values) where the
#	      interpolant is to use data, for example  hypercube([0,0], [1,1]).
#	      Any positions may be used; if they're redundant (as in the
#	      example) the least-squares interpolant is computed.
#
# Results:
# This function returns the interpolating polynomial, in the form of
# an algebraic expression in the coordinates and the data values.
#
> Lagrange_polynomial_interpolant :=
> proc(
>       fn::procedure, coeff_list::list(name),
>       coord_list::list(name), posn_list::list(list(numeric))
>     )
> local posn, data_eqns, coeff_eqns;
> 
# coefficients of interpolating polynomial
> data_eqns := {  seq( fn(op(posn))='DATA'(op(posn)) , posn=posn_list )  };
> coeff_eqns := linalg[leastsqrs](data_eqns, {op(coeff_list)});
> if (has(coeff_eqns, '_t'))
>    then error "interpolation coefficients aren't uniquely determined!";
> end if;
> 
# interpolant as a polynomial in the coordinates
> return subs(coeff_eqns, eval(fn))(op(coord_list));
> end proc;
Lagrange_polynomial_interpolant := proc(fn::procedure, coeff_list::list(name),
coord_list::list(name), posn_list::list(list(numeric)))
local posn, data_eqns, coeff_eqns;
    data_eqns := {seq(fn(op(posn)) = 'DATA'(op(posn)), posn = posn_list)};
    coeff_eqns := linalg[leastsqrs](data_eqns, {op(coeff_list)});
    if has(coeff_eqns, '_t') then
        error "interpolation coefficients aren't uniquely determined!"
    end if;
    return subs(coeff_eqns, eval(fn))(op(coord_list))
end proc

> 
################################################################################
> 
#
# This function computes a Hermite polynomial interpolant in any
# number of dimensions.  This is a polynomial which
# * has values which match the given data DATA() at a specified set of
#   points, and
# * has derivatives which match the specified finite-difference derivatives
#   of the given data DATA() at a specified set of points
#
# For the derivative matching, we actually match all possible products
# of 1st derivatives, i.e. in 2-D we match dx, dy, and dxy, in 3-D we
# match dx, dy, dz, dxy, dxz, dyz, and dxyz, etc etc.
#
# Arguments:
# fn = The interpolation function.  This should be a procedure in the
#      coordinates, having the coefficients as global variables.  For
#      example,
#		proc(x,y)
#		+ c03*y^3 + c13*x*y^3 + c23*x^2*y^3 + c33*x^3*y^3
#		+ c02*y^2 + c12*x*y^2 + c22*x^2*y^2 + c32*x^3*y^2
#		+ c01*y   + c11*x*y   + c21*x^2*y   + c31*x^3*y
#		+ c00     + c10*x     + c20*x^2     + c30*x^3
#		end proc;
# coeff_set = A set of the interpolation coefficients (coefficients in
#	       the interpolation function), for example
#			{
#			c03, c13, c23, c33,
#			c02, c12, c22, c32,
#			c01, c11, c21, c31,
#			c00, c10, c20, c30
#			}
# coord_list = A list of the coordinates (independent variables in the
#	       interpolation function), for example [x,y].
# deriv_set = A set of equations of the form
#		{coords} = proc
#	      giving the derivatives which are to be matched, and the
#	      procedures to compute their finite-difference approximations.
#	      Each procedure should take N_dims integer arguments specifying
#	      an evaluation point, and return a suitable linear combination
#	      of the DATA() for the derivative at that point.  For example
#			{
#			  {x}   = proc(i::integer, j::integer)
#				  - 1/2*DATA(i-1,j) + 1/2*DATA(i+1,j)
#				  end proc
#			,
#			  {y}   = proc(i::integer, j::integer)
#				  - 1/2*DATA(i,j-1) + 1/2*DATA(i,j+1)
#				  end proc
#			,
#			  {x,y} = proc(i::integer, j::integer)
#				  - 1/4*DATA(i-1,j+1) + 1/4*DATA(i+1,j+1)
#				  + 1/4*DATA(i-1,j-1) - 1/4*DATA(i+1,j-1)
#				  end proc
#			}
# fn_posn_set = A set of positions (each a list of numeric values)
#		where the interpolant is to match the given data DATA(),
#		for example
#			{[0,0], [0,1], [1,0], [1,1]}
# deriv_posn_set = A list of positions (each a list of numeric values)
#		   where the interpolant is to match the derivatives
#		   specified by  deriv_set , for example
#			{[0,0], [0,1], [1,0], [1,1]}
#
# Results:
# This function returns the interpolating polynomial, in the form of
# an algebraic expression in the coordinates and the data values.
#
> Hermite_polynomial_interpolant :=
> proc(
>       fn::procedure,
>       coeff_set::set(name),
>       coord_list::list(name),
>       deriv_set::set(set(name) = procedure),
>       fn_posn_set::set(list(numeric)),
>       deriv_posn_set::set(list(numeric))
>     )
> local fn_eqnset, deriv_eqnset, coeff_eqns, subs_eqnset;
> 
> 
#
# compute a set of equations
#	{fn(posn) = DATA(posn)}
# giving the function values to be matched
#
> fn_eqnset := map(
> 		    # return equation that fn(posn) = DATA(posn)
> 		    proc(posn::list(integer))
> 		    fn(op(posn)) = 'DATA'(op(posn));
> 		    end proc
> 		  ,
> 		    fn_posn_set
> 		);
> 
> 
#
# compute a set of equations
#	{ diff(fn,coords)(posn) = DERIV(coords)(posn) }
# giving the derivative values to be matched, where DERIV(coords)
# is a placeholder for the appropriate derivative
#
> map(
>        # return set of equations for this particular derivative
>        proc(deriv_coords::set(name))
>        local deriv_fn;
>        fn(op(coord_list));
>        diff(%, op(deriv_coords));
>        deriv_fn := unapply(%, op(coord_list));
>        map(
> 	      proc(posn::list(integer))
> 	      deriv_fn(op(posn)) = 'DERIV'(op(deriv_coords))(op(posn));
> 	      end proc
> 	    ,
> 	      deriv_posn_set
> 	  );
>        end proc
>      ,
>        map(lhs, deriv_set)
>    );
> deriv_eqnset := `union`(op(%));
> 
> 
#
# solve overall set of equations for coefficients
# in terms of DATA() and DERIV() values
#
> coeff_eqns := solve[linear](fn_eqnset union deriv_eqnset, coeff_set);
> if (indets(map(rhs,%)) <> {})
>    then error "no unique solution for coefficients -- %1 eqns for %2 coeffs",
> 	      nops(fn_eqnset union deriv_eqnset),
> 	      nops(coeff_set);
> fi;
> 
> 
#
# compute a set of substitution equations
#	{'DERIV'(coords) = procedure}
#
> subs_eqnset := map(
> 		      proc(eqn::set(name) = procedure)
> 		      'DERIV'(op(lhs(eqn))) = rhs(eqn);
> 		      end proc
> 		    ,
> 		      deriv_set
> 		  );
> 
> 
#
# compute the coefficients in terms of the DATA() values
#
> subs(subs_eqnset, coeff_eqns);
> eval(%);
> 
#
# compute the interpolant as a polynomial in the coordinates
#
> subs(%, fn(op(coord_list)));
> end proc;
Hermite_polynomial_interpolant := proc(fn::procedure, coeff_set::set(name),
coord_list::list(name), deriv_set::set(set(name) = procedure),
fn_posn_set::set(list(numeric)), deriv_posn_set::set(list(numeric)))
local fn_eqnset, deriv_eqnset, coeff_eqns, subs_eqnset;
    fn_eqnset := map(
        proc(posn::list(integer)) fn(op(posn)) = 'DATA'(op(posn)) end proc,
        fn_posn_set);
    map(proc(deriv_coords::set(name))
        local deriv_fn;
            fn(op(coord_list));
            diff(%, op(deriv_coords));
            deriv_fn := unapply(%, op(coord_list));
            map(proc(posn::list(integer))
                    deriv_fn(op(posn)) =
                    'DERIV'(op(deriv_coords))(op(posn))
                end proc, deriv_posn_set)
        end proc, map(lhs, deriv_set));
    deriv_eqnset := `union`(op(%));
    coeff_eqns := solve[linear](fn_eqnset union deriv_eqnset, coeff_set);
    if indets(map(rhs, %)) <> {} then error
        "no unique solution for coefficients -- %1 eqns for %2 coeffs",
        nops(fn_eqnset union deriv_eqnset), nops(coeff_set)
    end if;
    subs_eqnset := map(proc(eqn::(set(name) = procedure))
            'DERIV'(op(lhs(eqn))) = rhs(eqn)
        end proc, deriv_set);
    subs(subs_eqnset, coeff_eqns);
    eval(%);
    subs(%, fn(op(coord_list)))
end proc

> 
################################################################################
> 
#
# This function takes as input an interpolating polynomial, expresses
# it as a linear combination of the data values, and returns the coefficeints
# of that form.
# 
# Arguments:
# interpolant = The interpolating polynomial (an algebraic expression
#		in the coordinates and the data values).
# posn_list = The same list of data positions used in the interpolant.
#
# Results:
# This function returns the coefficients, as a list of equations of the
# form   COEFF(...) = value , where each  value  is a polynomial in the
# coordinates.  The order of the list matches that of  posn_list.
#
> coeffs_as_lc_of_data :=
> proc(
>       interpolant::algebraic,
>       posn_list::list(list(numeric))
>     )
> local data_list, interpolant_as_lc_of_data;
> 
# interpolant as a linear combination of the data values
> data_list := [ seq( 'DATA'(op(posn)) , posn=posn_list ) ];
> interpolant_as_lc_of_data := collect(interpolant, data_list);
> 
# coefficients of the data values in the linear combination
> return map(
> 	      proc(posn::list(numeric))
> 	      coeff(interpolant_as_lc_of_data, DATA(op(posn)));
> 	      'COEFF'(op(posn)) = %;
> 	      end proc
> 	    ,
> 	      posn_list
> 	  );
> end proc;
coeffs_as_lc_of_data := proc(
interpolant::algebraic, posn_list::list(list(numeric)))
local data_list, interpolant_as_lc_of_data;
    data_list := [seq('DATA'(op(posn)), posn = posn_list)];
    interpolant_as_lc_of_data := collect(interpolant, data_list);
    return map(proc(posn::list(numeric))
            coeff(interpolant_as_lc_of_data, DATA(op(posn)));
            'COEFF'(op(posn)) = %
        end proc, posn_list)
end proc

> 
################################################################################
################################################################################
################################################################################
> 
#
# This function prints C expressions for the coefficients of an
# interpolating polynomial.  (The polynomial is expressed as linear
# combinations of the data values with coefficients which are
# RATIONAL(p,q) calls.)
#
# Arguments:
# coeff_list = A list of the coefficients, as returned from
#	       coeffs_as_lc_of_data() .
# coeff_name_prefix = A prefix string for the coefficient names.
# temp_name_type = The C type to be used for Maple-introduced temporary
#		   names, eg. "double".
# file_name = The file name to write the coefficients to.  This is
#	      truncated before writing.
#
> print_coeffs__lc_of_data :=
> proc( coeff_list::list(specfunc(numeric,COEFF) = algebraic),
>       coeff_name_prefix::string,
>       temp_name_type::string,
>       file_name::string )
> global `codegen/C/function/informed`;
> local coeff_list2, cmpt_list, temp_name_list;
> 
# convert LHS of each equation from a COEFF() call (eg COEFF(-1,+1))
# to a Maple/C variable name (eg coeff_I_m1_p1)
> coeff_list2 := map(
> 		      proc(coeff_eqn::specfunc(numeric,COEFF) = algebraic)
> 		      local posn;
> 		      posn := [op(lhs(coeff_eqn))];
> 		      coeff_name(posn,coeff_name_prefix);
> 		      convert(%, name);	# codegen[C] wants LHS
> 					# to be an actual Maple *name*
> 		      % = fix_rationals(rhs(coeff_eqn));
> 		      end proc
> 		    ,
> 		      coeff_list
> 		  );
> 
#
# generate the C code
#
> 
# tell codegen[C] not to warn about unknown RATIONAL() and DATA() "fn calls"
# via undocumented :( global table
> `codegen/C/function/informed`['RATIONAL'] := true;
> `codegen/C/function/informed`['DATA'] := true;
> 
> ftruncate(file_name);
> 
# optimized computation sequence for all the coefficients
# (may use local variables t0,t1,t2,...)
> cmpt_list := [codegen[optimize](coeff_list2, tryhard)];
> 
# list of the t0,t1,t2,... local variables
> temp_name_list := nonmatching_names(map(lhs,cmpt_list), coeff_name_prefix);
> 
# declare the t0,t1,t2,... local variables (if there are any)
> if (nops(temp_name_list) > 0)
>    then print_name_list_dcl(%, temp_name_type, file_name);
> fi;
> 
# now print the optimized computation sequence
> codegen[C](cmpt_list, filename=file_name);
> 
> fclose(file_name);
> 
> NULL;
> end proc;
print_coeffs__lc_of_data := proc(
coeff_list::list(specfunc(numeric, COEFF) = algebraic),
coeff_name_prefix::string, temp_name_type::string, file_name::string)
local coeff_list2, cmpt_list, temp_name_list;
global `codegen/C/function/informed`;
    coeff_list2 := map(proc(
        coeff_eqn::(specfunc(numeric, COEFF) = algebraic))
        local posn;
            posn := [op(lhs(coeff_eqn))];
            coeff_name(posn, coeff_name_prefix);
            convert(%, name);
            % = fix_rationals(rhs(coeff_eqn))
        end proc, coeff_list);
    `codegen/C/function/informed`['RATIONAL'] := true;
    `codegen/C/function/informed`['DATA'] := true;
    ftruncate(file_name);
    cmpt_list := [codegen[optimize](coeff_list2, tryhard)];
    temp_name_list :=
        nonmatching_names(map(lhs, cmpt_list), coeff_name_prefix);
    if 0 < nops(temp_name_list) then
        print_name_list_dcl(%, temp_name_type, file_name)
    end if;
    codegen[C](cmpt_list, filename = file_name);
    fclose(file_name);
    NULL
end proc

> 
################################################################################
> 
#
# This function prints a sequence of C expression to assign the data-value
# variables, eg
#	data->data_m1_p1 = DATA(-1,1);
#
# Arguments:
# posn_list = The same list of positions as was used to compute the
#	      interpolating polynomial.
# data_var_name_prefix = A prefix string for the data variable names.
# file_name = The file name to write the coefficients to.  This is
#	      truncated before writing.
#
> print_load_data :=
> proc(
>       posn_list::list(list(numeric)),
>       data_var_name_prefix::string,
>       file_name::string
>     )
> 
> ftruncate(file_name);
> map(
>        proc(posn::list(numeric))
>        fprintf(file_name,
> 	       "%s = %a;\n",
> 	       data_var_name(posn,data_var_name_prefix),
> 	       DATA(op(posn)));
>        end proc
>      ,
>        posn_list
>    );
> fclose(file_name);
> 
> NULL;
> end proc;
print_load_data := proc(posn_list::list(list(numeric)),
data_var_name_prefix::string, file_name::string)
    ftruncate(file_name);
    map(proc(posn::list(numeric))
            fprintf(file_name, "%s = %a;\n",
            data_var_name(posn, data_var_name_prefix), DATA(op(posn)))
        end proc, posn_list);
    fclose(file_name);
    NULL
end proc

> 
################################################################################
> 
#
# This function prints a sequence of C expression to store the interpolation
# coefficients in  COEFF(...)  expressions, eg
#	COEFF(1,-1) = factor * coeffs->coeff_p1_m1;
#
# Arguments:
# posn_list = The list of positions in the molecule.
# coeff_name_prefix = A prefix string for the coefficient names,
#		      eg "factor * coeffs->coeff_"
# file_name = The file name to write the coefficients to.  This is
#	      truncated before writing.
#
> print_store_coeffs :=
> proc(
>       posn_list::list(list(numeric)),
>       coeff_name_prefix::string,
>       file_name::string
>     )
> 
> ftruncate(file_name);
> map(
>        proc(posn::list(numeric))
>        fprintf(file_name,
> 	       "%a = %s;\n",
> 	       'COEFF'(op(posn)),
> 	       coeff_name(posn,coeff_name_prefix));
>        end proc
>      ,
>        posn_list
>    );
> fclose(file_name);
> 
> NULL;
> end proc;
print_store_coeffs := proc(posn_list::list(list(numeric)),
coeff_name_prefix::string, file_name::string)
    ftruncate(file_name);
    map(proc(posn::list(numeric))
            fprintf(file_name, "%a = %s;\n", 'COEFF'(op(posn)),
            coeff_name(posn, coeff_name_prefix))
        end proc, posn_list);
    fclose(file_name);
    NULL
end proc

> 
################################################################################
> 
#
# This function prints a C expression to evaluate a molecule, i.e.
# to compute the molecule as a linear combination of the data values.
#
# Arguments:
# posn_list = The list of positions in the molecule.
# coeff_name_prefix = A prefix string for the coefficient names.
# data_var_name_prefix = A prefix string for the data variable names.
# file_name = The file name to write the coefficients to.  This is
#	      truncated before writing.
#
> print_evaluate_molecule :=
> proc(
>       posn_list::list(list(numeric)),
>       coeff_name_prefix::string,
>       data_var_name_prefix::string,
>       file_name::string
>     )
> 
> ftruncate(file_name);
> 
# list of "coeff*data_var" terms
> map(
>        proc(posn::list(numeric))
>        sprintf("%s*%s",
> 	       coeff_name(posn,coeff_name_prefix),
> 	       data_var_name(posn,data_var_name_prefix));
>        end proc
>      ,
>        posn_list
>    );
> 
> ListTools[Join](%, "\n  + ");
> cat(op(%));
> fprintf(file_name, "    %s;\n", %);
> 
> fclose(file_name);
> 
> NULL;
> end proc;
print_evaluate_molecule := proc(posn_list::list(list(numeric)),
coeff_name_prefix::string, data_var_name_prefix::string, file_name::string)
    ftruncate(file_name);
    map(proc(posn::list(numeric))
            sprintf("%s*%s", coeff_name(posn, coeff_name_prefix),
            data_var_name(posn, data_var_name_prefix))
        end proc, posn_list);
    ListTools[Join](%, "\n  + ");
    cat(op(%));
    fprintf(file_name, "    %s;\n", %);
    fclose(file_name);
    NULL
end proc

> 
################################################################################
################################################################################
################################################################################
> 
#
# This function computes the name of the coefficient of the data at a
# given [m] position, i.e. it encapsulates our naming convention for this.
#
# Arguments:
# posn = (in) The [m] coordinates.
# name_prefix = A prefix string for the coefficient name.
#
# Results:
# The function returns the coefficient, as a Maple string.
#
> coeff_name :=
> proc(posn::list(numeric), name_prefix::string)
> cat(name_prefix, sprint_numeric_list(posn));
> end proc;
coeff_name := proc(posn::list(numeric), name_prefix::string)
    cat(name_prefix, sprint_numeric_list(posn))
end proc

> 
################################################################################
> 
#
# This function computes the name of the variable in which the C code
# will store the input data at a given [m] position, i.e. it encapsulates
# our naming convention for this.
#
# Arguments:
# posn = (in) The [m] coordinates.
# name_prefix = A prefix string for the variable name.
#
# Results:
# The function returns the variable name, as a Maple string.
#
> data_var_name :=
> proc(posn::list(numeric), name_prefix::string)
> cat(name_prefix, sprint_numeric_list(posn));
> end proc;
data_var_name := proc(posn::list(numeric), name_prefix::string)
    cat(name_prefix, sprint_numeric_list(posn))
end proc

# Maple code to compute lists of point positions in hypercube-shaped molecules
# $Header$
> 
################################################################################
> 
#
# 1D interpolation points
#
> posn_list_1d_size2 := hypercube_points([ 0], [+1]);
                        posn_list_1d_size2 := [[0], [1]]

> posn_list_1d_size3 := hypercube_points([-1], [+1]);
                     posn_list_1d_size3 := [[-1], [0], [1]]

> posn_list_1d_size4 := hypercube_points([-1], [+2]);
                  posn_list_1d_size4 := [[-1], [0], [1], [2]]

> posn_list_1d_size5 := hypercube_points([-2], [+2]);
               posn_list_1d_size5 := [[-2], [-1], [0], [1], [2]]

> posn_list_1d_size6 := hypercube_points([-2], [+3]);
             posn_list_1d_size6 := [[-2], [-1], [0], [1], [2], [3]]

> posn_list_1d_size7 := hypercube_points([-3], [+3]);
          posn_list_1d_size7 := [[-3], [-2], [-1], [0], [1], [2], [3]]

> 
################################################################################
> 
#
# 2D interpolation points (Fortran ordering)
#
> posn_list_2d_size2 := map(ListTools[Reverse],
> 			  hypercube_points([ 0, 0], [+1,+1]));
             posn_list_2d_size2 := [[0, 0], [1, 0], [0, 1], [1, 1]]

> posn_list_2d_size3 := map(ListTools[Reverse],
> 			  hypercube_points([-1,-1], [+1,+1]));
posn_list_2d_size3 := [[-1, -1], [0, -1], [1, -1], [-1, 0], [0, 0], [1, 0],

    [-1, 1], [0, 1], [1, 1]]

> posn_list_2d_size4 := map(ListTools[Reverse],
> 			  hypercube_points([-1,-1], [+2,+2]));
posn_list_2d_size4 := [[-1, -1], [0, -1], [1, -1], [2, -1], [-1, 0], [0, 0],

    [1, 0], [2, 0], [-1, 1], [0, 1], [1, 1], [2, 1], [-1, 2], [0, 2], [1, 2],

    [2, 2]]

> posn_list_2d_size5 := map(ListTools[Reverse],
> 			  hypercube_points([-2,-2], [+2,+2]));
posn_list_2d_size5 := [[-2, -2], [-1, -2], [0, -2], [1, -2], [2, -2], [-2, -1],

    [-1, -1], [0, -1], [1, -1], [2, -1], [-2, 0], [-1, 0], [0, 0], [1, 0],

    [2, 0], [-2, 1], [-1, 1], [0, 1], [1, 1], [2, 1], [-2, 2], [-1, 2], [0, 2],

    [1, 2], [2, 2]]

> posn_list_2d_size6 := map(ListTools[Reverse],
> 			  hypercube_points([-2,-2], [+3,+3]));
posn_list_2d_size6 := [[-2, -2], [-1, -2], [0, -2], [1, -2], [2, -2], [3, -2],

    [-2, -1], [-1, -1], [0, -1], [1, -1], [2, -1], [3, -1], [-2, 0], [-1, 0],

    [0, 0], [1, 0], [2, 0], [3, 0], [-2, 1], [-1, 1], [0, 1], [1, 1], [2, 1],

    [3, 1], [-2, 2], [-1, 2], [0, 2], [1, 2], [2, 2], [3, 2], [-2, 3], [-1, 3],

    [0, 3], [1, 3], [2, 3], [3, 3]]

> 
################################################################################
> 
#
# 3D interpolation points (Fortran ordering)
#
> posn_list_3d_size2 := map(ListTools[Reverse],
> 			  hypercube_points([ 0, 0, 0], [+1,+1,+1]));
posn_list_3d_size2 := [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0], [0, 0, 1],

    [1, 0, 1], [0, 1, 1], [1, 1, 1]]

> posn_list_3d_size3 := map(ListTools[Reverse],
> 			  hypercube_points([-1,-1,-1], [+1,+1,+1]));
posn_list_3d_size3 := [[-1, -1, -1], [0, -1, -1], [1, -1, -1], [-1, 0, -1],

    [0, 0, -1], [1, 0, -1], [-1, 1, -1], [0, 1, -1], [1, 1, -1], [-1, -1, 0],

    [0, -1, 0], [1, -1, 0], [-1, 0, 0], [0, 0, 0], [1, 0, 0], [-1, 1, 0],

    [0, 1, 0], [1, 1, 0], [-1, -1, 1], [0, -1, 1], [1, -1, 1], [-1, 0, 1],

    [0, 0, 1], [1, 0, 1], [-1, 1, 1], [0, 1, 1], [1, 1, 1]]

> posn_list_3d_size4 := map(ListTools[Reverse],
> 			  hypercube_points([-1,-1,-1], [+2,+2,+2]));
posn_list_3d_size4 := [[-1, -1, -1], [0, -1, -1], [1, -1, -1], [2, -1, -1],

    [-1, 0, -1], [0, 0, -1], [1, 0, -1], [2, 0, -1], [-1, 1, -1], [0, 1, -1],

    [1, 1, -1], [2, 1, -1], [-1, 2, -1], [0, 2, -1], [1, 2, -1], [2, 2, -1],

    [-1, -1, 0], [0, -1, 0], [1, -1, 0], [2, -1, 0], [-1, 0, 0], [0, 0, 0],

    [1, 0, 0], [2, 0, 0], [-1, 1, 0], [0, 1, 0], [1, 1, 0], [2, 1, 0],

    [-1, 2, 0], [0, 2, 0], [1, 2, 0], [2, 2, 0], [-1, -1, 1], [0, -1, 1],

    [1, -1, 1], [2, -1, 1], [-1, 0, 1], [0, 0, 1], [1, 0, 1], [2, 0, 1],

    [-1, 1, 1], [0, 1, 1], [1, 1, 1], [2, 1, 1], [-1, 2, 1], [0, 2, 1],

    [1, 2, 1], [2, 2, 1], [-1, -1, 2], [0, -1, 2], [1, -1, 2], [2, -1, 2],

    [-1, 0, 2], [0, 0, 2], [1, 0, 2], [2, 0, 2], [-1, 1, 2], [0, 1, 2],

    [1, 1, 2], [2, 1, 2], [-1, 2, 2], [0, 2, 2], [1, 2, 2], [2, 2, 2]]

> posn_list_3d_size5 := map(ListTools[Reverse],
> 			  hypercube_points([-2,-2,-2], [+2,+2,+2]));
posn_list_3d_size5 := [[-2, -2, -2], [-1, -2, -2], [0, -2, -2], [1, -2, -2],

    [2, -2, -2], [-2, -1, -2], [-1, -1, -2], [0, -1, -2], [1, -1, -2],

    [2, -1, -2], [-2, 0, -2], [-1, 0, -2], [0, 0, -2], [1, 0, -2], [2, 0, -2],

    [-2, 1, -2], [-1, 1, -2], [0, 1, -2], [1, 1, -2], [2, 1, -2], [-2, 2, -2],

    [-1, 2, -2], [0, 2, -2], [1, 2, -2], [2, 2, -2], [-2, -2, -1], [-1, -2, -1],

    [0, -2, -1], [1, -2, -1], [2, -2, -1], [-2, -1, -1], [-1, -1, -1],

    [0, -1, -1], [1, -1, -1], [2, -1, -1], [-2, 0, -1], [-1, 0, -1], [0, 0, -1],

    [1, 0, -1], [2, 0, -1], [-2, 1, -1], [-1, 1, -1], [0, 1, -1], [1, 1, -1],

    [2, 1, -1], [-2, 2, -1], [-1, 2, -1], [0, 2, -1], [1, 2, -1], [2, 2, -1],

    [-2, -2, 0], [-1, -2, 0], [0, -2, 0], [1, -2, 0], [2, -2, 0], [-2, -1, 0],

    [-1, -1, 0], [0, -1, 0], [1, -1, 0], [2, -1, 0], [-2, 0, 0], [-1, 0, 0],

    [0, 0, 0], [1, 0, 0], [2, 0, 0], [-2, 1, 0], [-1, 1, 0], [0, 1, 0],

    [1, 1, 0], [2, 1, 0], [-2, 2, 0], [-1, 2, 0], [0, 2, 0], [1, 2, 0],

    [2, 2, 0], [-2, -2, 1], [-1, -2, 1], [0, -2, 1], [1, -2, 1], [2, -2, 1],

    [-2, -1, 1], [-1, -1, 1], [0, -1, 1], [1, -1, 1], [2, -1, 1], [-2, 0, 1],

    [-1, 0, 1], [0, 0, 1], [1, 0, 1], [2, 0, 1], [-2, 1, 1], [-1, 1, 1],

    [0, 1, 1], [1, 1, 1], [2, 1, 1], [-2, 2, 1], [-1, 2, 1], [0, 2, 1],

    [1, 2, 1], [2, 2, 1], [-2, -2, 2], [-1, -2, 2], [0, -2, 2], [1, -2, 2],

    [2, -2, 2], [-2, -1, 2], [-1, -1, 2], [0, -1, 2], [1, -1, 2], [2, -1, 2],

    [-2, 0, 2], [-1, 0, 2], [0, 0, 2], [1, 0, 2], [2, 0, 2], [-2, 1, 2],

    [-1, 1, 2], [0, 1, 2], [1, 1, 2], [2, 1, 2], [-2, 2, 2], [-1, 2, 2],

    [0, 2, 2], [1, 2, 2], [2, 2, 2]]

> posn_list_3d_size6 := map(ListTools[Reverse],
> 			  hypercube_points([-2,-2,-2], [+3,+3,+3]));
posn_list_3d_size6 := [[-2, -2, -2], [-1, -2, -2], [0, -2, -2], [1, -2, -2],

    [2, -2, -2], [3, -2, -2], [-2, -1, -2], [-1, -1, -2], [0, -1, -2],

    [1, -1, -2], [2, -1, -2], [3, -1, -2], [-2, 0, -2], [-1, 0, -2], [0, 0, -2],

    [1, 0, -2], [2, 0, -2], [3, 0, -2], [-2, 1, -2], [-1, 1, -2], [0, 1, -2],

    [1, 1, -2], [2, 1, -2], [3, 1, -2], [-2, 2, -2], [-1, 2, -2], [0, 2, -2],

    [1, 2, -2], [2, 2, -2], [3, 2, -2], [-2, 3, -2], [-1, 3, -2], [0, 3, -2],

    [1, 3, -2], [2, 3, -2], [3, 3, -2], [-2, -2, -1], [-1, -2, -1], [0, -2, -1],

    [1, -2, -1], [2, -2, -1], [3, -2, -1], [-2, -1, -1], [-1, -1, -1],

    [0, -1, -1], [1, -1, -1], [2, -1, -1], [3, -1, -1], [-2, 0, -1],

    [-1, 0, -1], [0, 0, -1], [1, 0, -1], [2, 0, -1], [3, 0, -1], [-2, 1, -1],

    [-1, 1, -1], [0, 1, -1], [1, 1, -1], [2, 1, -1], [3, 1, -1], [-2, 2, -1],

    [-1, 2, -1], [0, 2, -1], [1, 2, -1], [2, 2, -1], [3, 2, -1], [-2, 3, -1],

    [-1, 3, -1], [0, 3, -1], [1, 3, -1], [2, 3, -1], [3, 3, -1], [-2, -2, 0],

    [-1, -2, 0], [0, -2, 0], [1, -2, 0], [2, -2, 0], [3, -2, 0], [-2, -1, 0],

    [-1, -1, 0], [0, -1, 0], [1, -1, 0], [2, -1, 0], [3, -1, 0], [-2, 0, 0],

    [-1, 0, 0], [0, 0, 0], [1, 0, 0], [2, 0, 0], [3, 0, 0], [-2, 1, 0],

    [-1, 1, 0], [0, 1, 0], [1, 1, 0], [2, 1, 0], [3, 1, 0], [-2, 2, 0],

    [-1, 2, 0], [0, 2, 0], [1, 2, 0], [2, 2, 0], [3, 2, 0], [-2, 3, 0],

    [-1, 3, 0], [0, 3, 0], [1, 3, 0], [2, 3, 0], [3, 3, 0], [-2, -2, 1],

    [-1, -2, 1], [0, -2, 1], [1, -2, 1], [2, -2, 1], [3, -2, 1], [-2, -1, 1],

    [-1, -1, 1], [0, -1, 1], [1, -1, 1], [2, -1, 1], [3, -1, 1], [-2, 0, 1],

    [-1, 0, 1], [0, 0, 1], [1, 0, 1], [2, 0, 1], [3, 0, 1], [-2, 1, 1],

    [-1, 1, 1], [0, 1, 1], [1, 1, 1], [2, 1, 1], [3, 1, 1], [-2, 2, 1],

    [-1, 2, 1], [0, 2, 1], [1, 2, 1], [2, 2, 1], [3, 2, 1], [-2, 3, 1],

    [-1, 3, 1], [0, 3, 1], [1, 3, 1], [2, 3, 1], [3, 3, 1], [-2, -2, 2],

    [-1, -2, 2], [0, -2, 2], [1, -2, 2], [2, -2, 2], [3, -2, 2], [-2, -1, 2],

    [-1, -1, 2], [0, -1, 2], [1, -1, 2], [2, -1, 2], [3, -1, 2], [-2, 0, 2],

    [-1, 0, 2], [0, 0, 2], [1, 0, 2], [2, 0, 2], [3, 0, 2], [-2, 1, 2],

    [-1, 1, 2], [0, 1, 2], [1, 1, 2], [2, 1, 2], [3, 1, 2], [-2, 2, 2],

    [-1, 2, 2], [0, 2, 2], [1, 2, 2], [2, 2, 2], [3, 2, 2], [-2, 3, 2],

    [-1, 3, 2], [0, 3, 2], [1, 3, 2], [2, 3, 2], [3, 3, 2], [-2, -2, 3],

    [-1, -2, 3], [0, -2, 3], [1, -2, 3], [2, -2, 3], [3, -2, 3], [-2, -1, 3],

    [-1, -1, 3], [0, -1, 3], [1, -1, 3], [2, -1, 3], [3, -1, 3], [-2, 0, 3],

    [-1, 0, 3], [0, 0, 3], [1, 0, 3], [2, 0, 3], [3, 0, 3], [-2, 1, 3],

    [-1, 1, 3], [0, 1, 3], [1, 1, 3], [2, 1, 3], [3, 1, 3], [-2, 2, 3],

    [-1, 2, 3], [0, 2, 3], [1, 2, 3], [2, 2, 3], [3, 2, 3], [-2, 3, 3],

    [-1, 3, 3], [0, 3, 3], [1, 3, 3], [2, 3, 3], [3, 3, 3]]

# Maple code to define Lagrange interpolating functions/coords/coeffs
# $Header$
> 
################################################################################
> 
#
# 1-D interpolating functions
#
> 
> fn_1d_order1 :=
> proc(x)
> + c0 + c1*x
> end proc;
                   fn_1d_order1 := proc(x) c0 + c1*x end proc

> 
> fn_1d_order2 :=
> proc(x)
> + c0 + c1*x + c2*x^2
> end proc;
              fn_1d_order2 := proc(x) c0 + c1*x + c2*x^2 end proc

> 
> fn_1d_order3 :=
> proc(x)
> + c0 + c1*x + c2*x^2 + c3*x^3
> end proc;
          fn_1d_order3 := proc(x) c0 + c1*x + c2*x^2 + c3*x^3 end proc

> 
> fn_1d_order4 :=
> proc(x)
> + c0 + c1*x + c2*x^2 + c3*x^3 + c4*x^4
> end;
     fn_1d_order4 := proc(x) c0 + c1*x + c2*x^2 + c3*x^3 + c4*x^4 end proc

> 
> fn_1d_order5 :=
> proc(x)
> + c0 + c1*x + c2*x^2 + c3*x^3 + c4*x^4 + c5*x^5
> end;
 fn_1d_order5 := proc(x) c0 + c1*x + c2*x^2 + c3*x^3 + c4*x^4 + c5*x^5 end proc

> 
> fn_1d_order6 :=
> proc(x)
> + c0 + c1*x + c2*x^2 + c3*x^3 + c4*x^4 + c5*x^5 + c6*x^6
> end;
fn_1d_order6 :=

    proc(x) c0 + c1*x + c2*x^2 + c3*x^3 + c4*x^4 + c5*x^5 + c6*x^6 end proc

> 
########################################
> 
# coordinates for 1-D interpolating functions
> coords_list_1d := [x];
                             coords_list_1d := [x]

> 
########################################
> 
#
# coefficients in 1-D interpolating functions
#
> 
> coeffs_list_1d_order1 := [c0, c1];
                       coeffs_list_1d_order1 := [c0, c1]

> coeffs_list_1d_order2 := [c0, c1, c2];
                     coeffs_list_1d_order2 := [c0, c1, c2]

> coeffs_list_1d_order3 := [c0, c1, c2, c3];
                   coeffs_list_1d_order3 := [c0, c1, c2, c3]

> coeffs_list_1d_order4 := [c0, c1, c2, c3, c4];
                 coeffs_list_1d_order4 := [c0, c1, c2, c3, c4]

> coeffs_list_1d_order5 := [c0, c1, c2, c3, c4, c5];
               coeffs_list_1d_order5 := [c0, c1, c2, c3, c4, c5]

> coeffs_list_1d_order6 := [c0, c1, c2, c3, c4, c5, c6];
             coeffs_list_1d_order6 := [c0, c1, c2, c3, c4, c5, c6]

> 
################################################################################
> 
#
# 2-D interpolating functions (tensor-product)
#
> 
> fn_2d_order1 :=
> proc(x,y)
> + c01*y + c11*x*y
> + c00   + c10*x
> end proc;
       fn_2d_order1 := proc(x, y) c01*y + c11*x*y + c00 + c10*x end proc

> 
> fn_2d_order2 :=
> proc(x,y)
> + c02*y^2 + c12*x*y^2 + c22*x^2*y^2
> + c01*y   + c11*x*y   + c21*x^2*y
> + c00     + c10*x     + c20*x^2
> end proc;
fn_2d_order2 := proc(x, y)
    c02*y^2 + c12*x*y^2 + c22*x^2*y^2 + c01*y + c11*x*y + c21*x^2*y + c00
     + c10*x + c20*x^2
end proc

> 
> fn_2d_order3 :=
> proc(x,y)
> + c03*y^3 + c13*x*y^3 + c23*x^2*y^3 + c33*x^3*y^3
> + c02*y^2 + c12*x*y^2 + c22*x^2*y^2 + c32*x^3*y^2
> + c01*y   + c11*x*y   + c21*x^2*y   + c31*x^3*y
> + c00     + c10*x     + c20*x^2     + c30*x^3
> end proc;
fn_2d_order3 := proc(x, y)
    c03*y^3 + c13*x*y^3 + c23*x^2*y^3 + c33*x^3*y^3 + c02*y^2 + c12*x*y^2
     + c22*x^2*y^2 + c32*x^3*y^2 + c01*y + c11*x*y + c21*x^2*y + c31*x^3*y
     + c00 + c10*x + c20*x^2 + c30*x^3
end proc

> 
> fn_2d_order4 :=
> proc(x,y)
> + c04*y^4 + c14*x*y^4 + c24*x^2*y^4 + c34*x^3*y^4 + c44*x^4*y^4
> + c03*y^3 + c13*x*y^3 + c23*x^2*y^3 + c33*x^3*y^3 + c43*x^4*y^3
> + c02*y^2 + c12*x*y^2 + c22*x^2*y^2 + c32*x^3*y^2 + c42*x^4*y^2
> + c01*y   + c11*x*y   + c21*x^2*y   + c31*x^3*y   + c41*x^4*y
> + c00     + c10*x     + c20*x^2     + c30*x^3     + c40*x^4
> end;
fn_2d_order4 := proc(x, y)
    c34*x^3*y^4 + c01*y + c10*x + c02*y^2 + c20*x^2 + c03*y^3 + c30*x^3
     + c04*y^4 + c40*x^4 + c11*x*y + c12*x*y^2 + c22*x^2*y^2 + c21*x^2*y
     + c13*x*y^3 + c23*x^2*y^3 + c33*x^3*y^3 + c32*x^3*y^2 + c31*x^3*y
     + c14*x*y^4 + c24*x^2*y^4 + c44*x^4*y^4 + c00 + c43*x^4*y^3
     + c42*x^4*y^2 + c41*x^4*y
end proc

> 
########################################
> 
# coordinates for 2-D interpolating functions
> coords_list_2d := [x,y];
                            coords_list_2d := [x, y]

> 
########################################
> 
#
# coefficients in 2-D interpolating functions (tensor-product)
#
> 
> coeffs_list_2d_order1 := [
> 			 c01, c11,
> 			 c00, c10
> 			 ];
                 coeffs_list_2d_order1 := [c01, c11, c00, c10]

> coeffs_list_2d_order2 := [
> 			 c02, c12, c22,
> 			 c01, c11, c21,
> 			 c00, c10, c20
> 			 ];
     coeffs_list_2d_order2 := [c02, c12, c22, c01, c11, c21, c00, c10, c20]

> coeffs_list_2d_order3 := [
> 			 c03, c13, c23, c33,
> 			 c02, c12, c22, c32,
> 			 c01, c11, c21, c31,
> 			 c00, c10, c20, c30
> 			 ];
coeffs_list_2d_order3 := [c03, c13, c23, c33, c02, c12, c22, c32, c01, c11, c21,

    c31, c00, c10, c20, c30]

> coeffs_list_2d_order4 := [
> 			 c04, c14, c24, c34, c44,
> 			 c03, c13, c23, c33, c43,
> 			 c02, c12, c22, c32, c42,
> 			 c01, c11, c21, c31, c41,
> 			 c00, c10, c20, c30, c40
> 			 ];
coeffs_list_2d_order4 := [c04, c14, c24, c34, c44, c03, c13, c23, c33, c43, c02,

    c12, c22, c32, c42, c01, c11, c21, c31, c41, c00, c10, c20, c30, c40]

> 
################################################################################
> 
#
# 3-D interpolating functions (tensor-product)
#
> 
> fn_3d_order1 :=
> proc(x,y,z)
# z^1 -------------------
> + c011  *y*z + c111*x*y*z
> + c001    *z + c101*x  *z
# z^0 -------------------
> + c010  *y   + c110*x*y
> + c000       + c100*x
> end proc;
fn_3d_order1 := proc(x, y, z)
    c011*y*z + c111*x*y*z + c001*z + c101*x*z + c010*y + c110*x*y + c000
     + c100*x
end proc

> 
> fn_3d_order2 :=
> proc(x,y,z)
# z^2 --------------------------------------------------
> + c022    *y^2*z^2 + c122*x  *y^2*z^2 + c222*x^2*y^2*z^2
> + c012    *y  *z^2 + c112*x  *y  *z^2 + c212*x^2*y  *z^2
> + c002        *z^2 + c102*x      *z^2 + c202*x^2    *z^2
# z   --------------------------------------------------
> + c021    *y^2*z   + c121*x  *y^2*z   + c221*x^2*y^2*z
> + c011    *y  *z   + c111*x  *y  *z   + c211*x^2*y  *z
> + c001        *z   + c101*x      *z   + c201*x^2    *z
# z^0 ------------------------------------------------
> + c020    *y^2     + c120*x  *y^2     + c220*x^2*y^2
> + c010    *y       + c110*x  *y       + c210*x^2*y
> + c000             + c100*x           + c200*x^2
> end proc;
fn_3d_order2 := proc(x, y, z)
    c111*x*y*z + c122*x*y^2*z^2 + c222*x^2*y^2*z^2 + c112*x*y*z^2
     + c212*x^2*y*z^2 + c121*x*y^2*z + c221*x^2*y^2*z + c211*x^2*y*z
     + c011*y*z + c101*x*z + c110*x*y + c022*y^2*z^2 + c012*y*z^2
     + c102*x*z^2 + c202*x^2*z^2 + c021*y^2*z + c201*x^2*z + c120*x*y^2
     + c220*x^2*y^2 + c210*x^2*y + c001*z + c010*y + c000 + c100*x
     + c002*z^2 + c020*y^2 + c200*x^2
end proc

> 
> fn_3d_order3 :=
> proc(x,y,z)
# z^3 ---------------------------------------------------------------------
> + c033    *y^3*z^3 + c133*x  *y^3*z^3 + c233*x^2*y^3*z^3 + c333*x^3*y^3*z^3
> + c023    *y^2*z^3 + c123*x  *y^2*z^3 + c223*x^2*y^2*z^3 + c323*x^3*y^2*z^3
> + c013    *y  *z^3 + c113*x  *y  *z^3 + c213*x^2*y  *z^3 + c313*x^3*y  *z^3
> + c003        *z^3 + c103*x      *z^3 + c203*x^2    *z^3 + c303*x^3    *z^3
# z^2 ---------------------------------------------------------------------
> + c032    *y^3*z^2 + c132*x  *y^3*z^2 + c232*x^2*y^3*z^2 + c332*x^3*y^3*z^2
> + c022    *y^2*z^2 + c122*x  *y^2*z^2 + c222*x^2*y^2*z^2 + c322*x^3*y^2*z^2
> + c012    *y  *z^2 + c112*x  *y  *z^2 + c212*x^2*y  *z^2 + c312*x^3*y  *z^2
> + c002        *z^2 + c102*x      *z^2 + c202*x^2    *z^2 + c302*x^3    *z^2
# z   ---------------------------------------------------------------------
> + c031    *y^3*z   + c131*x  *y^3*z   + c231*x^2*y^3*z   + c331*x^3*y^3*z
> + c021    *y^2*z   + c121*x  *y^2*z   + c221*x^2*y^2*z   + c321*x^3*y^2*z
> + c011    *y  *z   + c111*x  *y  *z   + c211*x^2*y  *z   + c311*x^3*y  *z
> + c001        *z   + c101*x      *z   + c201*x^2    *z   + c301*x^3    *z
# z^0 ---------------------------------------------------------------------
> + c030    *y^3     + c130*x  *y^3     + c230*x^2*y^3     + c330*x^3*y^3
> + c020    *y^2     + c120*x  *y^2     + c220*x^2*y^2     + c320*x^3*y^2
> + c010    *y       + c110*x  *y       + c210*x^2*y       + c310*x^3*y
> + c000             + c100*x           + c200*x^2         + c300*x^3
> end proc;
fn_3d_order3 := proc(x, y, z)
    c330*x^3*y^3 + c031*y^3*z + c103*x*z^3 + c111*x*y*z + c122*x*y^2*z^2
     + c222*x^2*y^2*z^2 + c112*x*y*z^2 + c212*x^2*y*z^2 + c121*x*y^2*z
     + c221*x^2*y^2*z + c211*x^2*y*z + c133*x*y^3*z^3 + c233*x^2*y^3*z^3
     + c333*x^3*y^3*z^3 + c123*x*y^2*z^3 + c223*x^2*y^2*z^3
     + c323*x^3*y^2*z^3 + c113*x*y*z^3 + c213*x^2*y*z^3 + c313*x^3*y*z^3
     + c132*x*y^3*z^2 + c232*x^2*y^3*z^2 + c332*x^3*y^3*z^2
     + c322*x^3*y^2*z^2 + c312*x^3*y*z^2 + c131*x*y^3*z + c231*x^2*y^3*z
     + c331*x^3*y^3*z + c321*x^3*y^2*z + c311*x^3*y*z + c011*y*z + c101*x*z
     + c110*x*y + c022*y^2*z^2 + c012*y*z^2 + c102*x*z^2 + c202*x^2*z^2
     + c021*y^2*z + c201*x^2*z + c120*x*y^2 + c220*x^2*y^2 + c210*x^2*y
     + c033*y^3*z^3 + c023*y^2*z^3 + c013*y*z^3 + c203*x^2*z^3
     + c303*x^3*z^3 + c032*y^3*z^2 + c302*x^3*z^2 + c301*x^3*z + c130*x*y^3
     + c230*x^2*y^3 + c320*x^3*y^2 + c001*z + c010*y + c000 + c100*x
     + c002*z^2 + c020*y^2 + c200*x^2 + c003*z^3 + c030*y^3 + c300*x^3
     + c310*x^3*y
end proc

> 
> fn_3d_order4 :=
> proc(x,y,z)
# z^4 ----------------------------------------------------------------------------------------
> + c044    *y^4*z^4 + c144*x  *y^4*z^4 + c244*x^2*y^4*z^4 + c344*x^3*y^4*z^4 + c444*x^4*y^4*z^4
> + c034    *y^3*z^4 + c134*x  *y^3*z^4 + c234*x^2*y^3*z^4 + c334*x^3*y^3*z^4 + c434*x^4*y^3*z^4
> + c024    *y^2*z^4 + c124*x  *y^2*z^4 + c224*x^2*y^2*z^4 + c324*x^3*y^2*z^4 + c424*x^4*y^2*z^4
> + c014    *y  *z^4 + c114*x  *y  *z^4 + c214*x^2*y  *z^4 + c314*x^3*y  *z^4 + c414*x^4*y  *z^4
> + c004        *z^4 + c104*x      *z^4 + c204*x^2    *z^4 + c304*x^3    *z^4 + c404*x^4    *z^4
# z^3 ----------------------------------------------------------------------------------------
> + c043    *y^4*z^3 + c143*x  *y^4*z^3 + c243*x^2*y^4*z^3 + c343*x^3*y^4*z^3 + c443*x^4*y^4*z^3
> + c033    *y^3*z^3 + c133*x  *y^3*z^3 + c233*x^2*y^3*z^3 + c333*x^3*y^3*z^3 + c433*x^4*y^3*z^3
> + c023    *y^2*z^3 + c123*x  *y^2*z^3 + c223*x^2*y^2*z^3 + c323*x^3*y^2*z^3 + c423*x^4*y^2*z^3
> + c013    *y  *z^3 + c113*x  *y  *z^3 + c213*x^2*y  *z^3 + c313*x^3*y  *z^3 + c413*x^4*y  *z^3
> + c003        *z^3 + c103*x      *z^3 + c203*x^2    *z^3 + c303*x^3    *z^3 + c403*x^4    *z^3
# z^2 ----------------------------------------------------------------------------------------
> + c042    *y^4*z^2 + c142*x  *y^4*z^2 + c242*x^2*y^4*z^2 + c342*x^3*y^4*z^2 + c442*x^4*y^4*z^2
> + c032    *y^3*z^2 + c132*x  *y^3*z^2 + c232*x^2*y^3*z^2 + c332*x^3*y^3*z^2 + c432*x^4*y^3*z^2
> + c022    *y^2*z^2 + c122*x  *y^2*z^2 + c222*x^2*y^2*z^2 + c322*x^3*y^2*z^2 + c422*x^4*y^2*z^2
> + c012    *y  *z^2 + c112*x  *y  *z^2 + c212*x^2*y  *z^2 + c312*x^3*y  *z^2 + c412*x^4*y  *z^2
> + c002        *z^2 + c102*x      *z^2 + c202*x^2    *z^2 + c302*x^3    *z^2 + c402*x^4    *z^2
# z   ----------------------------------------------------------------------------------------
> + c041    *y^4*z   + c141*x  *y^4*z   + c241*x^2*y^4*z   + c341*x^3*y^4*z   + c441*x^4*y^4*z
> + c031    *y^3*z   + c131*x  *y^3*z   + c231*x^2*y^3*z   + c331*x^3*y^3*z   + c431*x^4*y^3*z
> + c021    *y^2*z   + c121*x  *y^2*z   + c221*x^2*y^2*z   + c321*x^3*y^2*z   + c421*x^4*y^2*z
> + c011    *y  *z   + c111*x  *y  *z   + c211*x^2*y  *z   + c311*x^3*y  *z   + c411*x^4*y  *z
> + c001        *z   + c101*x      *z   + c201*x^2    *z   + c301*x^3    *z   + c401*x^4    *z
# z^0 ----------------------------------------------------------------------------------------
> + c040    *y^4     + c140*x  *y^4     + c240*x^2*y^4     + c340*x^3*y^4     + c440*x^4*y^4
> + c030    *y^3     + c130*x  *y^3     + c230*x^2*y^3     + c330*x^3*y^3     + c430*x^4*y^3
> + c020    *y^2     + c120*x  *y^2     + c220*x^2*y^2     + c320*x^3*y^2     + c420*x^4*y^2
> + c010    *y       + c110*x  *y       + c210*x^2*y       + c310*x^3*y       + c410*x^4*y
> + c000             + c100*x           + c200*x^2         + c300*x^3         + c400*x^4
> end;
fn_3d_order4 := proc(x, y, z)
    c104*x*z^4 + c330*x^3*y^3 + c042*y^4*z^2 + c031*y^3*z + c103*x*z^3
     + c304*x^3*z^4 + c024*y^2*z^4 + c111*x*y*z + c122*x*y^2*z^2
     + c222*x^2*y^2*z^2 + c112*x*y*z^2 + c212*x^2*y*z^2 + c121*x*y^2*z
     + c221*x^2*y^2*z + c211*x^2*y*z + c133*x*y^3*z^3 + c233*x^2*y^3*z^3
     + c333*x^3*y^3*z^3 + c123*x*y^2*z^3 + c223*x^2*y^2*z^3
     + c323*x^3*y^2*z^3 + c113*x*y*z^3 + c213*x^2*y*z^3 + c313*x^3*y*z^3
     + c132*x*y^3*z^2 + c232*x^2*y^3*z^2 + c332*x^3*y^3*z^2
     + c322*x^3*y^2*z^2 + c312*x^3*y*z^2 + c131*x*y^3*z + c231*x^2*y^3*z
     + c331*x^3*y^3*z + c321*x^3*y^2*z + c311*x^3*y*z + c144*x*y^4*z^4
     + c244*x^2*y^4*z^4 + c344*x^3*y^4*z^4 + c444*x^4*y^4*z^4
     + c134*x*y^3*z^4 + c234*x^2*y^3*z^4 + c334*x^3*y^3*z^4
     + c434*x^4*y^3*z^4 + c124*x*y^2*z^4 + c224*x^2*y^2*z^4
     + c324*x^3*y^2*z^4 + c424*x^4*y^2*z^4 + c114*x*y*z^4 + c214*x^2*y*z^4
     + c314*x^3*y*z^4 + c414*x^4*y*z^4 + c143*x*y^4*z^3 + c243*x^2*y^4*z^3
     + c343*x^3*y^4*z^3 + c443*x^4*y^4*z^3 + c433*x^4*y^3*z^3
     + c423*x^4*y^2*z^3 + c413*x^4*y*z^3 + c142*x*y^4*z^2
     + c242*x^2*y^4*z^2 + c011*y*z + c101*x*z + c110*x*y + c022*y^2*z^2
     + c012*y*z^2 + c102*x*z^2 + c202*x^2*z^2 + c021*y^2*z + c201*x^2*z
     + c120*x*y^2 + c220*x^2*y^2 + c210*x^2*y + c033*y^3*z^3 + c023*y^2*z^3
     + c013*y*z^3 + c203*x^2*z^3 + c303*x^3*z^3 + c032*y^3*z^2
     + c302*x^3*z^2 + c301*x^3*z + c130*x*y^3 + c230*x^2*y^3 + c320*x^3*y^2
     + c001*z + c010*y + c000 + c100*x + c002*z^2 + c020*y^2 + c200*x^2
     + c003*z^3 + c030*y^3 + c300*x^3 + c004*z^4 + c310*x^3*y
     + c044*y^4*z^4 + c034*y^3*z^4 + c014*y*z^4 + c204*x^2*z^4
     + c404*x^4*z^4 + c043*y^4*z^3 + c403*x^4*z^3 + c402*x^4*z^2
     + c041*y^4*z + c401*x^4*z + c140*x*y^4 + c240*x^2*y^4 + c340*x^3*y^4
     + c440*x^4*y^4 + c430*x^4*y^3 + c420*x^4*y^2 + c410*x^4*y
     + c342*x^3*y^4*z^2 + c442*x^4*y^4*z^2 + c432*x^4*y^3*z^2
     + c422*x^4*y^2*z^2 + c412*x^4*y*z^2 + c141*x*y^4*z + c241*x^2*y^4*z
     + c341*x^3*y^4*z + c441*x^4*y^4*z + c431*x^4*y^3*z + c421*x^4*y^2*z
     + c411*x^4*y*z + c040*y^4 + c400*x^4
end proc

> 
########################################
> 
# coordinates for 3-D interpolating functions
> coords_list_3d := [x,y,z];
                          coords_list_3d := [x, y, z]

> 
########################################
> 
#
# coefficients in 3-D interpolating functions
#
> 
> coeffs_list_3d_order1 := [
> 			 # z^1 -----
> 			 c011, c111,
> 			 c001, c101,
> 			 # z^0 -----
> 			 c010, c110,
> 			 c000, c100
> 			 ];
   coeffs_list_3d_order1 := [c011, c111, c001, c101, c010, c110, c000, c100]

> coeffs_list_3d_order2 := [
> 			 # z^2 -----------
> 			 c022, c122, c222,
> 			 c012, c112, c212,
> 			 c002, c102, c202,
> 			 # z^1 -----------
> 			 c021, c121, c221,
> 			 c011, c111, c211,
> 			 c001, c101, c201,
> 			 # z^0 -----------
> 			 c020, c120, c220,
> 			 c010, c110, c210,
> 			 c000, c100, c200
> 			 ];
coeffs_list_3d_order2 := [c022, c122, c222, c012, c112, c212, c002, c102, c202,

    c021, c121, c221, c011, c111, c211, c001, c101, c201, c020, c120, c220,

    c010, c110, c210, c000, c100, c200]

> coeffs_list_3d_order3 := [
> 			 # z^3 -----------------
> 			 c033, c133, c233, c333,
> 			 c023, c123, c223, c323,
> 			 c013, c113, c213, c313,
> 			 c003, c103, c203, c303,
> 			 # z^2 -----------------
> 			 c032, c132, c232, c332,
> 			 c022, c122, c222, c322,
> 			 c012, c112, c212, c312,
> 			 c002, c102, c202, c302,
> 			 # z^1 -----------------
> 			 c031, c131, c231, c331,
> 			 c021, c121, c221, c321,
> 			 c011, c111, c211, c311,
> 			 c001, c101, c201, c301,
> 			 # z^0 -----------------
> 			 c030, c130, c230, c330,
> 			 c020, c120, c220, c320,
> 			 c010, c110, c210, c310,
> 			 c000, c100, c200, c300
> 			 ];
coeffs_list_3d_order3 := [c033, c133, c233, c333, c023, c123, c223, c323, c013,

    c113, c213, c313, c003, c103, c203, c303, c032, c132, c232, c332, c022,

    c122, c222, c322, c012, c112, c212, c312, c002, c102, c202, c302, c031,

    c131, c231, c331, c021, c121, c221, c321, c011, c111, c211, c311, c001,

    c101, c201, c301, c030, c130, c230, c330, c020, c120, c220, c320, c010,

    c110, c210, c310, c000, c100, c200, c300]

> coeffs_list_3d_order4 := [
> 			 # z^4 -----------------------
> 			 c044, c144, c244, c344, c444,
> 			 c034, c134, c234, c334, c434,
> 			 c024, c124, c224, c324, c424,
> 			 c014, c114, c214, c314, c414,
> 			 c004, c104, c204, c304, c404,
> 			 # z^3 -----------------------
> 			 c043, c143, c243, c343, c443,
> 			 c033, c133, c233, c333, c433,
> 			 c023, c123, c223, c323, c423,
> 			 c013, c113, c213, c313, c413,
> 			 c003, c103, c203, c303, c403,
> 			 # z^2 -----------------------
> 			 c042, c142, c242, c342, c442,
> 			 c032, c132, c232, c332, c432,
> 			 c022, c122, c222, c322, c422,
> 			 c012, c112, c212, c312, c412,
> 			 c002, c102, c202, c302, c402,
> 			 # z^1 -----------------------
> 			 c041, c141, c241, c341, c441,
> 			 c031, c131, c231, c331, c431,
> 			 c021, c121, c221, c321, c421,
> 			 c011, c111, c211, c311, c411,
> 			 c001, c101, c201, c301, c401,
> 			 # z^0 -----------------------
> 			 c040, c140, c240, c340, c440,
> 			 c030, c130, c230, c330, c430,
> 			 c020, c120, c220, c320, c420,
> 			 c010, c110, c210, c310, c410,
> 			 c000, c100, c200, c300, c400
> 			 ];
coeffs_list_3d_order4 := [c044, c144, c244, c344, c444, c034, c134, c234, c334,

    c434, c024, c124, c224, c324, c424, c014, c114, c214, c314, c414, c004,

    c104, c204, c304, c404, c043, c143, c243, c343, c443, c033, c133, c233,

    c333, c433, c023, c123, c223, c323, c423, c013, c113, c213, c313, c413,

    c003, c103, c203, c303, c403, c042, c142, c242, c342, c442, c032, c132,

    c232, c332, c432, c022, c122, c222, c322, c422, c012, c112, c212, c312,

    c412, c002, c102, c202, c302, c402, c041, c141, c241, c341, c441, c031,

    c131, c231, c331, c431, c021, c121, c221, c321, c421, c011, c111, c211,

    c311, c411, c001, c101, c201, c301, c401, c040, c140, c240, c340, c440,

    c030, c130, c230, c330, c430, c020, c120, c220, c320, c420, c010, c110,

    c210, c310, c410, c000, c100, c200, c300, c400]

> 
################################################################################
# 2d.maple -- compute Lagrange interpolation coefficients in 2-D
# $Header$
> 
################################################################################
> 
#
# 2d, cube, order=1, smoothing=0 (size=2)
#
> 
# interpolating polynomial
> interp_2d_cube_order1_smooth0
> 	:= Lagrange_polynomial_interpolant(fn_2d_order1, coeffs_list_2d_order1,
> 					   coords_list_2d, posn_list_2d_size2);
interp_2d_cube_order1_smooth0 := (-DATA(0, 0) + DATA(0, 1)) y

     + (-DATA(1, 0) + DATA(0, 0) + DATA(1, 1) - DATA(0, 1)) x y + DATA(0, 0)

     + (DATA(1, 0) - DATA(0, 0)) x

> 
# I
> coeffs_as_lc_of_data(%, posn_list_2d_size2);
[COEFF(0, 0) = x y + 1 - y - x, COEFF(1, 0) = x - x y, COEFF(0, 1) = y - x y,

    COEFF(1, 1) = x y]

> print_coeffs__lc_of_data(%, "coeffs_I->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order1.smooth0/coeffs-I.compute.c");
bytes used=1009108, alloc=917336, time=0.09
> 
# d/dx
> simplify( diff(interp_2d_cube_order1_smooth0,x) );
-y DATA(1, 0) + y DATA(0, 0) + y DATA(1, 1) - y DATA(0, 1) + DATA(1, 0)

     - DATA(0, 0)

> coeffs_as_lc_of_data(%, posn_list_2d_size2);
 [COEFF(0, 0) = y - 1, COEFF(1, 0) = -y + 1, COEFF(0, 1) = -y, COEFF(1, 1) = y]

> print_coeffs__lc_of_data(%, "coeffs_dx->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order1.smooth0/coeffs-dx.compute.c");
> 
# d/dy
> simplify( diff(interp_2d_cube_order1_smooth0,y) );
-DATA(0, 0) + DATA(0, 1) - x DATA(1, 0) + x DATA(0, 0) + x DATA(1, 1)

     - x DATA(0, 1)

> coeffs_as_lc_of_data(%, posn_list_2d_size2);
 [COEFF(0, 0) = x - 1, COEFF(1, 0) = -x, COEFF(0, 1) = 1 - x, COEFF(1, 1) = x]

> print_coeffs__lc_of_data(%, "coeffs_dy->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order1.smooth0/coeffs-dy.compute.c");
> 
################################################################################
> 
#
# 2d, cube, order=2, smoothing=0 (size=3)
#
> 
# interpolating polynomial
> interp_2d_cube_order2_smooth0
> 	:= Lagrange_polynomial_interpolant(fn_2d_order2, coeffs_list_2d_order2,
> 					   coords_list_2d, posn_list_2d_size3);
bytes used=2009388, alloc=1376004, time=0.18
interp_2d_cube_order2_smooth0 :=

                                                      2
    (-DATA(0, 0) + 1/2 DATA(0, -1) + 1/2 DATA(0, 1)) y  + (1/4 DATA(1, 1)

     - 1/4 DATA(-1, -1) + 1/4 DATA(1, -1) - 1/4 DATA(-1, 1) + 1/2 DATA(-1, 0)

                          2
     - 1/2 DATA(1, 0)) x y  + (DATA(0, 0) - 1/2 DATA(0, -1) - 1/2 DATA(0, 1)

     + 1/4 DATA(1, 1) + 1/4 DATA(-1, -1) + 1/4 DATA(1, -1) + 1/4 DATA(-1, 1)

                                          2  2
     - 1/2 DATA(-1, 0) - 1/2 DATA(1, 0)) x  y

     + (- 1/2 DATA(0, -1) + 1/2 DATA(0, 1)) y +

    (1/4 DATA(1, 1) + 1/4 DATA(-1, -1) - 1/4 DATA(1, -1) - 1/4 DATA(-1, 1)) x y

     + (1/2 DATA(0, -1) - 1/2 DATA(0, 1) - 1/4 DATA(-1, -1) - 1/4 DATA(1, -1)

                                          2
     + 1/4 DATA(-1, 1) + 1/4 DATA(1, 1)) x  y + DATA(0, 0)

     + (- 1/2 DATA(-1, 0) + 1/2 DATA(1, 0)) x

                                                         2
     + (-DATA(0, 0) + 1/2 DATA(-1, 0) + 1/2 DATA(1, 0)) x

> 
# I
> coeffs_as_lc_of_data(%, posn_list_2d_size3);
                        2            2                  2  2
[COEFF(-1, -1) = - 1/4 x  y - 1/4 x y  + 1/4 x y + 1/4 x  y ,

                        2        2  2                2
    COEFF(0, -1) = 1/2 y  - 1/2 x  y  - 1/2 y + 1/2 x  y,

                          2                  2  2        2
    COEFF(1, -1) = 1/4 x y  - 1/4 x y + 1/4 x  y  - 1/4 x  y,

                          2        2                2  2
    COEFF(-1, 0) = 1/2 x y  + 1/2 x  - 1/2 x - 1/2 x  y ,

                    2    2  2        2
    COEFF(0, 0) = -y  + x  y  + 1 - x ,

                       2          2                2  2
    COEFF(1, 0) = 1/2 x  - 1/2 x y  + 1/2 x - 1/2 x  y ,

                                      2        2          2  2
    COEFF(-1, 1) = - 1/4 x y - 1/4 x y  + 1/4 x  y + 1/4 x  y ,

                       2        2          2  2
    COEFF(0, 1) = 1/2 y  - 1/2 x  y - 1/2 x  y  + 1/2 y,

                                   2        2          2  2
    COEFF(1, 1) = 1/4 x y + 1/4 x y  + 1/4 x  y + 1/4 x  y ]

> print_coeffs__lc_of_data(%, "coeffs_I->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order2.smooth0/coeffs-I.compute.c");
bytes used=3009564, alloc=1638100, time=0.25
bytes used=4009720, alloc=1703624, time=0.33
> 
# d/dx
> simplify( diff(interp_2d_cube_order2_smooth0,x) );
bytes used=5009940, alloc=1703624, time=0.43
                      2                 2                  2
1/2 DATA(1, 0) + 2 x y  DATA(0, 0) - x y  DATA(0, -1) - x y  DATA(0, 1)

              2                     2                       2
     + 1/2 x y  DATA(1, 1) + 1/2 x y  DATA(-1, -1) + 1/2 x y  DATA(1, -1)

              2                  2                  2
     + 1/2 x y  DATA(-1, 1) - x y  DATA(-1, 0) - x y  DATA(1, 0)

     + x y DATA(0, -1) - x y DATA(0, 1) - 1/2 x y DATA(-1, -1)

     - 1/2 x y DATA(1, -1) + 1/2 x y DATA(-1, 1) + 1/2 x y DATA(1, 1)

     - 1/2 DATA(-1, 0) - 1/4 y DATA(1, -1) - 2 x DATA(0, 0) + x DATA(-1, 0)

                           2                    2
     + x DATA(1, 0) + 1/4 y  DATA(1, -1) + 1/4 y  DATA(1, 1)

                                2                     2
     - 1/4 y DATA(-1, 1) - 1/4 y  DATA(-1, -1) - 1/4 y  DATA(-1, 1)

            2                    2
     + 1/2 y  DATA(-1, 0) - 1/2 y  DATA(1, 0) + 1/4 y DATA(1, 1)

     + 1/4 y DATA(-1, -1)

> coeffs_as_lc_of_data(%, posn_list_2d_size3);
                        2                          2
[COEFF(-1, -1) = 1/2 x y  + 1/4 y - 1/2 x y - 1/4 y ,

                       2
    COEFF(0, -1) = -x y  + x y,

                                    2                  2
    COEFF(1, -1) = - 1/2 x y + 1/4 y  - 1/4 y + 1/2 x y ,

                                2      2                                2
    COEFF(-1, 0) = - 1/2 + 1/2 y  - x y  + x, COEFF(0, 0) = -2 x + 2 x y ,

                               2        2
    COEFF(1, 0) = 1/2 + x - x y  - 1/2 y ,

                                            2          2
    COEFF(-1, 1) = - 1/4 y + 1/2 x y - 1/4 y  + 1/2 x y ,

                            2
    COEFF(0, 1) = -x y - x y ,

                                           2        2
    COEFF(1, 1) = 1/2 x y + 1/4 y + 1/2 x y  + 1/4 y ]

> print_coeffs__lc_of_data(%, "coeffs_dx->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order2.smooth0/coeffs-dx.compute.c");
bytes used=6010152, alloc=1769148, time=0.52
> 
# d/dy
> simplify( diff(interp_2d_cube_order2_smooth0,y) );
bytes used=7010360, alloc=1769148, time=0.59
                                         2
1/2 DATA(0, 1) - 1/2 x y DATA(-1, -1) - x  y DATA(0, 1) + 1/2 x y DATA(1, -1)

                                                     2
     - 1/2 x y DATA(-1, 1) + 1/2 x y DATA(1, 1) + 2 x  y DATA(0, 0)

        2
     - x  y DATA(0, -1) + x y DATA(-1, 0) - 1/2 DATA(0, -1) - x y DATA(1, 0)

            2                  2                      2
     + 1/2 x  y DATA(1, -1) - x  y DATA(-1, 0) + 1/2 x  y DATA(1, 1)

            2
     + 1/2 x  y DATA(-1, -1) - 2 y DATA(0, 0) + y DATA(0, -1) + y DATA(0, 1)

     + 1/4 x DATA(1, 1) + 1/4 x DATA(-1, -1) - 1/4 x DATA(1, -1)

                                2                    2
     - 1/4 x DATA(-1, 1) + 1/2 x  DATA(0, -1) - 1/2 x  DATA(0, 1)

            2                     2                    2
     - 1/4 x  DATA(-1, -1) - 1/4 x  DATA(1, -1) + 1/4 x  DATA(-1, 1)

            2               2                     2
     + 1/4 x  DATA(1, 1) - x  y DATA(1, 0) + 1/2 x  y DATA(-1, 1)

> coeffs_as_lc_of_data(%, posn_list_2d_size3);
                              2                    2
[COEFF(-1, -1) = 1/4 x + 1/2 x  y - 1/2 x y - 1/4 x ,

                        2    2
    COEFF(0, -1) = 1/2 x  - x  y + y - 1/2,

                                  2        2
    COEFF(1, -1) = 1/2 x y - 1/4 x  + 1/2 x  y - 1/4 x,

                     2                                  2
    COEFF(-1, 0) = -x  y + x y, COEFF(0, 0) = -2 y + 2 x  y,

                    2
    COEFF(1, 0) = -x  y - x y,

                        2                          2
    COEFF(-1, 1) = 1/4 x  - 1/2 x y - 1/4 x + 1/2 x  y,

                         2          2
    COEFF(0, 1) = 1/2 - x  y - 1/2 x  + y,

                       2          2
    COEFF(1, 1) = 1/2 x  y + 1/4 x  + 1/4 x + 1/2 x y]

> print_coeffs__lc_of_data(%, "coeffs_dy->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order2.smooth0/coeffs-dy.compute.c");
bytes used=8010552, alloc=1834672, time=0.68
> 
# d^2/dx^2
> simplify( diff(interp_2d_cube_order2_smooth0,x,x) );
   2               2                2                   2
2 y  DATA(0, 0) - y  DATA(0, -1) - y  DATA(0, 1) + 1/2 y  DATA(1, 1)

            2                     2                    2
     + 1/2 y  DATA(-1, -1) + 1/2 y  DATA(1, -1) + 1/2 y  DATA(-1, 1)

        2                2
     - y  DATA(-1, 0) - y  DATA(1, 0) + y DATA(0, -1) - y DATA(0, 1)

     - 1/2 y DATA(-1, -1) - 1/2 y DATA(1, -1) + 1/2 y DATA(-1, 1)

     + 1/2 y DATA(1, 1) - 2 DATA(0, 0) + DATA(-1, 0) + DATA(1, 0)

> coeffs_as_lc_of_data(%, posn_list_2d_size3);
                                2                      2
[COEFF(-1, -1) = - 1/2 y + 1/2 y , COEFF(0, -1) = y - y ,

                                  2                      2
    COEFF(1, -1) = - 1/2 y + 1/2 y , COEFF(-1, 0) = 1 - y ,

                          2                     2
    COEFF(0, 0) = -2 + 2 y , COEFF(1, 0) = 1 - y ,

                                2                  2
    COEFF(-1, 1) = 1/2 y + 1/2 y , COEFF(0, 1) = -y  - y,

                               2
    COEFF(1, 1) = 1/2 y + 1/2 y ]

> print_coeffs__lc_of_data(%, "coeffs_dxx->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order2.smooth0/coeffs-dxx.compute.c");
bytes used=9010836, alloc=1834672, time=0.77
> 
# d^2/dxdy
> simplify( diff(interp_2d_cube_order2_smooth0,x,y) );
x y DATA(1, -1) + x y DATA(-1, 1) - 2 x y DATA(-1, 0) - 2 x y DATA(1, 0)

     + 4 x y DATA(0, 0) - 2 x y DATA(0, -1) - 2 x y DATA(0, 1) + x y DATA(1, 1)

     + x y DATA(-1, -1) + 1/4 DATA(1, 1) - 1/2 y DATA(-1, -1)

     + 1/2 y DATA(1, -1) - 1/2 y DATA(-1, 1) + 1/2 y DATA(1, 1) + y DATA(-1, 0)

     - y DATA(1, 0) + x DATA(0, -1) - x DATA(0, 1) - 1/2 x DATA(-1, -1)

     - 1/2 x DATA(1, -1) + 1/2 x DATA(-1, 1) + 1/2 x DATA(1, 1)

     + 1/4 DATA(-1, -1) - 1/4 DATA(1, -1) - 1/4 DATA(-1, 1)

> coeffs_as_lc_of_data(%, posn_list_2d_size3);
[COEFF(-1, -1) = - 1/2 x + x y + 1/4 - 1/2 y, COEFF(0, -1) = x - 2 x y,

    COEFF(1, -1) = x y - 1/4 + 1/2 y - 1/2 x, COEFF(-1, 0) = y - 2 x y,

    COEFF(0, 0) = 4 x y, COEFF(1, 0) = -2 x y - y,

    COEFF(-1, 1) = - 1/2 y + x y + 1/2 x - 1/4, COEFF(0, 1) = -2 x y - x,

    COEFF(1, 1) = 1/4 + x y + 1/2 y + 1/2 x]

> print_coeffs__lc_of_data(%, "coeffs_dxy->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order2.smooth0/coeffs-dxy.compute.c");
bytes used=10011184, alloc=1834672, time=0.84
> 
# d^2/dy^2
> simplify( diff(interp_2d_cube_order2_smooth0,y,y) );
-2 DATA(0, 0) + DATA(0, -1) + DATA(0, 1) + 1/2 x DATA(1, 1)

     - 1/2 x DATA(-1, -1) + 1/2 x DATA(1, -1) - 1/2 x DATA(-1, 1)

                                         2               2
     + x DATA(-1, 0) - x DATA(1, 0) + 2 x  DATA(0, 0) - x  DATA(0, -1)

        2                   2                   2
     - x  DATA(0, 1) + 1/2 x  DATA(1, 1) + 1/2 x  DATA(-1, -1)

            2                    2                2                2
     + 1/2 x  DATA(1, -1) + 1/2 x  DATA(-1, 1) - x  DATA(-1, 0) - x  DATA(1, 0)

> coeffs_as_lc_of_data(%, posn_list_2d_size3);
                      2                           2
[COEFF(-1, -1) = 1/2 x  - 1/2 x, COEFF(0, -1) = -x  + 1,

                        2                           2
    COEFF(1, -1) = 1/2 x  + 1/2 x, COEFF(-1, 0) = -x  + x,

                          2                  2
    COEFF(0, 0) = -2 + 2 x , COEFF(1, 0) = -x  - x,

                        2                          2
    COEFF(-1, 1) = 1/2 x  - 1/2 x, COEFF(0, 1) = -x  + 1,

                       2
    COEFF(1, 1) = 1/2 x  + 1/2 x]

> print_coeffs__lc_of_data(%, "coeffs_dyy->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order2.smooth0/coeffs-dyy.compute.c");
bytes used=11011432, alloc=1834672, time=0.92
> 
################################################################################
> 
#
# 2d, cube, order=3, smoothing=0 (size=4)
#
> 
# interpolating polynomial
> interp_2d_cube_order3_smooth0
> 	:= Lagrange_polynomial_interpolant(fn_2d_order3, coeffs_list_2d_order3,
> 					   coords_list_2d, posn_list_2d_size4);
bytes used=12011584, alloc=1834672, time=0.98
bytes used=13011784, alloc=1900196, time=1.04
bytes used=14013380, alloc=1900196, time=1.11
bytes used=15013736, alloc=1900196, time=1.18
bytes used=16014128, alloc=1900196, time=1.25
bytes used=17014448, alloc=1965720, time=1.31
bytes used=18014800, alloc=1965720, time=1.38
bytes used=19014988, alloc=1965720, time=1.44
bytes used=20015392, alloc=1965720, time=1.51
bytes used=21015780, alloc=1965720, time=1.58
bytes used=22015948, alloc=1965720, time=1.65
bytes used=23016104, alloc=1965720, time=1.72
bytes used=24017064, alloc=1965720, time=1.78
bytes used=25017276, alloc=1965720, time=1.85
bytes used=26017432, alloc=1965720, time=1.92
bytes used=27017588, alloc=1965720, time=1.98
bytes used=28017792, alloc=1965720, time=2.05
bytes used=29018116, alloc=1965720, time=2.11
interp_2d_cube_order3_smooth0 :=

                                                                          3
    (1/2 DATA(0, 0) - 1/2 DATA(0, 1) - 1/6 DATA(0, -1) + 1/6 DATA(0, 2)) y  + (

    1/2 DATA(1, 0) - 1/2 DATA(1, 1) + 1/18 DATA(-1, -1) - 1/6 DATA(1, -1)

     - 1/6 DATA(-1, 0) + 1/6 DATA(-1, 1) + 1/6 DATA(1, 2) - 1/18 DATA(-1, 2)

     + 1/4 DATA(0, 1) + 1/12 DATA(0, -1) + 1/36 DATA(2, -1) - 1/12 DATA(0, 2)

     + 1/12 DATA(2, 1) - 1/36 DATA(2, 2) - 1/12 DATA(2, 0) - 1/4 DATA(0, 0)) x

     3
    y  + (1/4 DATA(1, 0) + 1/2 DATA(0, 1) + 1/6 DATA(0, -1) - 1/12 DATA(1, -1)

     + 1/4 DATA(-1, 0) - 1/4 DATA(-1, 1) + 1/12 DATA(1, 2) - 1/6 DATA(0, 2)

     + 1/12 DATA(-1, 2) - 1/2 DATA(0, 0) - 1/4 DATA(1, 1) - 1/12 DATA(-1, -1))

     2  3
    x  y  + (- 1/4 DATA(0, 1) + 1/4 DATA(1, 1) + 1/36 DATA(-1, -1)

     - 1/12 DATA(0, -1) + 1/12 DATA(1, -1) + 1/12 DATA(-1, 1)

     - 1/36 DATA(2, -1) - 1/12 DATA(1, 2) + 1/12 DATA(0, 2) - 1/36 DATA(-1, 2)

     - 1/12 DATA(2, 1) + 1/36 DATA(2, 2) + 1/12 DATA(2, 0) + 1/4 DATA(0, 0)

                                           3  3
     - 1/4 DATA(1, 0) - 1/12 DATA(-1, 0)) x  y

                                                         2
     + (-DATA(0, 0) + 1/2 DATA(0, -1) + 1/2 DATA(0, 1)) y  + (1/6 DATA(2, 0)

     + 1/2 DATA(0, 0) - DATA(1, 0) - 1/4 DATA(0, 1) + 1/2 DATA(1, 1)

     - 1/6 DATA(-1, -1) - 1/4 DATA(0, -1) + 1/2 DATA(1, -1) + 1/3 DATA(-1, 0)

                                                                2
     - 1/6 DATA(-1, 1) - 1/12 DATA(2, -1) - 1/12 DATA(2, 1)) x y  + (DATA(0, 0)

     - 1/2 DATA(0, -1) - 1/2 DATA(0, 1) + 1/4 DATA(1, 1) + 1/4 DATA(-1, -1)

                                                                              2
     + 1/4 DATA(1, -1) + 1/4 DATA(-1, 1) - 1/2 DATA(-1, 0) - 1/2 DATA(1, 0)) x

     2
    y  + (- 1/6 DATA(2, 0) - 1/2 DATA(0, 0) + 1/2 DATA(1, 0) + 1/4 DATA(0, 1)

     - 1/4 DATA(1, 1) - 1/12 DATA(-1, -1) + 1/4 DATA(0, -1) - 1/4 DATA(1, -1)

     + 1/6 DATA(-1, 0) - 1/12 DATA(-1, 1) + 1/12 DATA(2, -1) + 1/12 DATA(2, 1))

     3  2
    x  y

     + (- 1/2 DATA(0, 0) + DATA(0, 1) - 1/3 DATA(0, -1) - 1/6 DATA(0, 2)) y + (

    1/12 DATA(2, 0) + 1/4 DATA(0, 0) - 1/2 DATA(1, 0) - 1/2 DATA(0, 1)

     + DATA(1, 1) + 1/9 DATA(-1, -1) + 1/6 DATA(0, -1) - 1/3 DATA(1, -1)

     + 1/6 DATA(-1, 0) - 1/3 DATA(-1, 1) + 1/18 DATA(2, -1) - 1/6 DATA(1, 2)

     + 1/12 DATA(0, 2) + 1/18 DATA(-1, 2) - 1/6 DATA(2, 1) + 1/36 DATA(2, 2)) x

    y + (-DATA(0, 1) + 1/2 DATA(1, 1) - 1/6 DATA(-1, -1) + 1/3 DATA(0, -1)

     - 1/6 DATA(1, -1) + 1/2 DATA(-1, 1) - 1/4 DATA(1, 0) - 1/4 DATA(-1, 0)

                                                                              2
     - 1/12 DATA(1, 2) + 1/6 DATA(0, 2) - 1/12 DATA(-1, 2) + 1/2 DATA(0, 0)) x

    y + (- 1/12 DATA(2, 0) - 1/4 DATA(0, 0) + 1/4 DATA(1, 0) + 1/2 DATA(0, 1)

     - 1/2 DATA(1, 1) + 1/18 DATA(-1, -1) - 1/6 DATA(0, -1) + 1/6 DATA(1, -1)

     + 1/12 DATA(-1, 0) - 1/6 DATA(-1, 1) - 1/18 DATA(2, -1) + 1/12 DATA(1, 2)

     - 1/12 DATA(0, 2) + 1/36 DATA(-1, 2) + 1/6 DATA(2, 1) - 1/36 DATA(2, 2))

     3
    x  y + DATA(0, 0)

     + (- 1/6 DATA(2, 0) - 1/2 DATA(0, 0) + DATA(1, 0) - 1/3 DATA(-1, 0)) x

                                                         2
     + (-DATA(0, 0) + 1/2 DATA(-1, 0) + 1/2 DATA(1, 0)) x

                                                                             3
     + (1/6 DATA(2, 0) + 1/2 DATA(0, 0) - 1/2 DATA(1, 0) - 1/6 DATA(-1, 0)) x

> 
# I
> coeffs_as_lc_of_data(%, posn_list_2d_size4);
bytes used=30018428, alloc=1965720, time=2.18
                                 3  2        2             3         3
[COEFF(-1, -1) = 1/9 x y - 1/12 x  y  - 1/6 x  y + 1/18 x y  + 1/18 x  y

             2  3          2         3  3        2  2                      2  3
     - 1/12 x  y  - 1/6 x y  + 1/36 x  y  + 1/4 x  y , COEFF(0, -1) = 1/6 x  y

               3                  2        2  2        3          2
     + 1/12 x y  + 1/6 x y + 1/2 y  - 1/2 x  y  - 1/6 x  y + 1/3 x  y

            3  2         3  3          2                3
     + 1/4 x  y  - 1/12 x  y  - 1/4 x y  - 1/3 y - 1/6 y , COEFF(1, -1) =

           2          3  2         3  3        2  2          3        3
    - 1/6 x  y - 1/4 x  y  + 1/12 x  y  + 1/4 x  y  - 1/6 x y  + 1/6 x  y

              2         2  3
     + 1/2 x y  - 1/12 x  y  - 1/3 x y, COEFF(2, -1) =

            3                        3         3  3         3  2           2
    - 1/18 x  y + 1/18 x y + 1/36 x y  - 1/36 x  y  + 1/12 x  y  - 1/12 x y ,

                                  2  3         3  3         3          3  2
    COEFF(-1, 0) = 1/6 x y + 1/4 x  y  - 1/12 x  y  + 1/12 x  y + 1/6 x  y

                      2        2          3        2          2  2        3
     - 1/3 x + 1/3 x y  + 1/2 x  - 1/6 x y  - 1/4 x  y - 1/2 x  y  - 1/6 x ,

                       3    2          3          2        2  3        3
    COEFF(0, 0) = 1/2 y  - y  - 1/4 x y  + 1/2 x y  - 1/2 x  y  - 1/4 x  y + 1

                    3  3                          3        3  2    2    2  2
     - 1/2 y + 1/4 x  y  - 1/2 x + 1/4 x y + 1/2 x  - 1/2 x  y  - x  + x  y

            2                         3        3  2        2              2  3
     + 1/2 x  y, COEFF(1, 0) = 1/2 x y  + 1/2 x  y  - 1/4 x  y + x + 1/4 x  y

            2  2        3  3        3        2      2                  3
     - 1/2 x  y  - 1/4 x  y  - 1/2 x  + 1/2 x  - x y  - 1/2 x y + 1/4 x  y,

                        3  3           3          2        3
    COEFF(2, 0) = 1/12 x  y  - 1/12 x y  + 1/6 x y  + 1/6 x  + 1/12 x y - 1/6 x

             3          3  2                      2           3  3        2  2
     - 1/12 x  y - 1/6 x  y , COEFF(-1, 1) = 1/2 x  y + 1/12 x  y  + 1/4 x  y

              3          2                  2  3         3  2        3
     + 1/6 x y  - 1/6 x y  - 1/3 x y - 1/4 x  y  - 1/12 x  y  - 1/6 x  y,

                       2    2          3        3          3  2        3  3
    COEFF(0, 1) = 1/2 y  - x  y - 1/2 y  + 1/2 x  y + 1/4 x  y  - 1/4 x  y

              2        2  2                    3        2  3
     - 1/4 x y  - 1/2 x  y  - 1/2 x y + 1/4 x y  + 1/2 x  y  + y, COEFF(1, 1)

            2  2        3                3  3        2          2  3          2
     = 1/4 x  y  - 1/2 x  y + x y + 1/4 x  y  + 1/2 x  y - 1/4 x  y  + 1/2 x y

            3  2          3
     - 1/4 x  y  - 1/2 x y , COEFF(2, 1) =

         3                       2           3         3  3         3  2
    1/6 x  y - 1/6 x y - 1/12 x y  + 1/12 x y  - 1/12 x  y  + 1/12 x  y ,

    COEFF(-1, 2) =

          3             3                    2           2  3         3  3
    1/36 x  y - 1/18 x y  + 1/18 x y - 1/12 x  y + 1/12 x  y  - 1/36 x  y ,

                       3         3             3                   2
    COEFF(0, 2) = 1/6 y  - 1/12 x  y - 1/12 x y  + 1/12 x y + 1/6 x  y

            2  3         3  3
     - 1/6 x  y  + 1/12 x  y  - 1/6 y, COEFF(1, 2) =

          3            3                   2           2  3         3  3
    1/12 x  y + 1/6 x y  - 1/6 x y - 1/12 x  y + 1/12 x  y  - 1/12 x  y ,

                          3             3                    3  3
    COEFF(2, 2) = - 1/36 x  y - 1/36 x y  + 1/36 x y + 1/36 x  y ]

> print_coeffs__lc_of_data(%, "coeffs_I->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order3.smooth0/coeffs-I.compute.c");
bytes used=31018624, alloc=1965720, time=2.26
bytes used=32021940, alloc=1965720, time=2.33
bytes used=33022996, alloc=1965720, time=2.40
bytes used=34023168, alloc=1965720, time=2.46
bytes used=35023484, alloc=1965720, time=2.55
bytes used=36029084, alloc=1965720, time=2.62
bytes used=37029336, alloc=1965720, time=2.71
bytes used=38029696, alloc=1965720, time=2.80
bytes used=39029932, alloc=1965720, time=2.89
bytes used=40030268, alloc=1965720, time=2.98
bytes used=41030440, alloc=1965720, time=3.08
bytes used=42030660, alloc=1965720, time=3.20
> 
# d/dx
> simplify( diff(interp_2d_cube_order3_smooth0,x) );
bytes used=43030872, alloc=1965720, time=3.33
bytes used=44031036, alloc=2031244, time=3.40
                                                      2
- 1/6 DATA(2, 0) - 1/2 DATA(0, 0) + DATA(1, 0) - 1/2 x  y DATA(0, -1)

            2                     2                     2
     + 3/4 x  y DATA(1, 0) + 3/2 x  y DATA(0, 1) - 3/2 x  y DATA(1, 1)

            2                        2                      2
     + 1/6 x  y DATA(-1, -1) + 1/12 x  y DATA(-1, 2) + 1/2 x  y DATA(2, 1)

             2                     2                      2
     - 1/12 x  y DATA(2, 2) + 1/2 x  y DATA(1, -1) + 1/4 x  y DATA(-1, 0)

            3                    3                    3
     + 1/6 y  DATA(1, 2) - 1/18 y  DATA(-1, 2) + 1/4 y  DATA(0, 1)

                                           2                   2
     + x DATA(-1, 0) + x DATA(1, 0) + 1/2 x  DATA(2, 0) + 3/2 x  DATA(0, 0)

            2                   2
     - 3/2 x  DATA(1, 0) - 1/2 x  DATA(-1, 0) - 2 x DATA(0, 0)

            3                   3                    3
     + 1/2 y  DATA(1, 0) - 1/2 y  DATA(1, 1) + 1/18 y  DATA(-1, -1)

            3                    3                    3
     - 1/6 y  DATA(1, -1) - 1/6 y  DATA(-1, 0) + 1/6 y  DATA(-1, 1)

              3                      3                      3
     + 1/3 x y  DATA(0, -1) - 1/6 x y  DATA(1, -1) + 1/2 x y  DATA(-1, 0)

              3                      3                     3
     - 1/2 x y  DATA(-1, 1) + 1/6 x y  DATA(1, 2) - 1/3 x y  DATA(0, 2)

              3                  3                     3
     + 1/6 x y  DATA(-1, 2) - x y  DATA(0, 0) - 1/2 x y  DATA(1, 1)

              3                     2  3                   2  3
     - 1/6 x y  DATA(-1, -1) - 3/4 x  y  DATA(0, 1) + 3/4 x  y  DATA(1, 1)

             2  3                     2                     2
     + 1/12 x  y  DATA(-1, -1) + 1/4 x  y DATA(1, 2) - 1/4 x  y DATA(0, 2)

            2  3                     2  3                    2  3
     + 1/4 x  y  DATA(-1, 1) - 1/12 x  y  DATA(2, -1) - 1/4 x  y  DATA(1, 2)

          3                    2  3                    2  3
     + x y  DATA(0, 1) - 1/12 x  y  DATA(-1, 2) - 1/4 x  y  DATA(2, 1)

             2  3                   2  3                   2  3
     + 1/12 x  y  DATA(2, 2) + 1/4 x  y  DATA(2, 0) - 1/4 x  y  DATA(0, -1)

            2  3                    2                     2
     + 1/4 x  y  DATA(1, -1) - 1/6 y  DATA(-1, -1) + 1/2 y  DATA(1, 1)

            2                   2               2
     + 1/6 y  DATA(2, 0) + 1/2 y  DATA(0, 0) - y  DATA(1, 0)

             3                     3                     3
     + 1/12 y  DATA(0, -1) + 1/36 y  DATA(2, -1) - 1/12 y  DATA(0, 2)

             3                    3                    3
     + 1/12 y  DATA(2, 1) - 1/36 y  DATA(2, 2) - 1/12 y  DATA(2, 0)

            3                   2                    2
     - 1/4 y  DATA(0, 0) + 1/3 y  DATA(-1, 0) - 1/6 y  DATA(-1, 1)

             2                     2                   2
     - 1/12 y  DATA(2, -1) - 1/12 y  DATA(2, 1) - 1/4 y  DATA(0, 1)

            2  3                     2                       2
     + 3/4 x  y  DATA(0, 0) + 1/2 x y  DATA(-1, -1) + 1/2 x y  DATA(1, -1)

              2                  2                  2
     + 1/2 x y  DATA(-1, 1) - x y  DATA(-1, 0) - x y  DATA(1, 0)

            2  2                   2  2                   2  3
     - 1/2 x  y  DATA(2, 0) - 3/2 x  y  DATA(0, 0) - 3/4 x  y  DATA(1, 0)

            2  3                    2                   2  3
     - 1/4 x  y  DATA(-1, 0) + 2 x y  DATA(0, 0) + 1/4 x  y  DATA(0, 2)

     + 1/12 y DATA(2, 0) + 1/4 y DATA(0, 0) - 1/2 y DATA(1, 0)

     - 1/2 y DATA(0, 1) + y DATA(1, 1) + 1/9 y DATA(-1, -1) + 1/6 y DATA(0, -1)

            2                    2                    2  2
     - 1/4 y  DATA(0, -1) + 1/2 y  DATA(1, -1) - 1/4 x  y  DATA(-1, -1)

            2  2                    2  2                    2  2
     + 3/4 x  y  DATA(0, -1) - 3/4 x  y  DATA(1, -1) + 1/2 x  y  DATA(-1, 0)

            2  2                    2  2                  2
     - 1/4 x  y  DATA(-1, 1) + 1/4 x  y  DATA(2, -1) - x y  DATA(0, -1)

          2                     2
     - x y  DATA(0, 1) + 1/2 x y  DATA(1, 1) + 1/3 x y DATA(0, 2)

     - 1/6 x y DATA(-1, 2) + x y DATA(0, 0) - 1/6 x y DATA(1, 2)

                               2  2
     - 2 x y DATA(0, 1) + 1/4 x  y  DATA(2, 1) - 1/3 x y DATA(-1, -1)

     + 2/3 x y DATA(0, -1) - 1/3 x y DATA(1, -1) + x y DATA(-1, 1)

                                                  2  2
     - 1/2 x y DATA(1, 0) + x y DATA(1, 1) + 3/2 x  y  DATA(1, 0)

            2  2                   2  2                     3
     + 3/4 x  y  DATA(0, 1) - 3/4 x  y  DATA(1, 1) + 1/2 x y  DATA(1, 0)

     - 1/2 x y DATA(-1, 0) - 1/3 y DATA(1, -1) - 1/3 y DATA(-1, 1)

     + 1/18 y DATA(2, -1) - 1/6 y DATA(1, 2) + 1/12 y DATA(0, 2)

     + 1/6 y DATA(-1, 0) + 1/18 y DATA(-1, 2) - 1/6 y DATA(2, 1)

                                                  2
     + 1/36 y DATA(2, 2) - 1/3 DATA(-1, 0) - 1/2 x  y DATA(-1, 1)

            2                      2                     2
     - 1/6 x  y DATA(2, -1) - 1/4 x  y DATA(2, 0) - 3/4 x  y DATA(0, 0)

> coeffs_as_lc_of_data(%, posn_list_2d_size4);
bytes used=45042960, alloc=2031244, time=3.48
                       2  3                            3        2  2        2
[COEFF(-1, -1) = 1/12 x  y  + 1/9 y - 1/3 x y - 1/6 x y  - 1/4 x  y  - 1/6 y

              2        2           3                                2  3
     + 1/2 x y  + 1/6 x  y + 1/18 y , COEFF(0, -1) = 2/3 x y - 1/4 x  y

             3        2          2                2  2      2          3
     + 1/12 y  - 1/2 x  y - 1/4 y  + 1/6 y + 3/4 x  y  - x y  + 1/3 x y ,

                            3        2          3                2        2  2
    COEFF(1, -1) = - 1/6 x y  + 1/2 x  y - 1/6 y  - 1/3 y + 1/2 y  - 3/4 x  y

            2  3          2
     + 1/4 x  y  + 1/2 x y  - 1/3 x y, COEFF(2, -1) =

         2  2                  2  3        2           3         2
    1/4 x  y  + 1/18 y - 1/12 x  y  - 1/6 x  y + 1/36 y  - 1/12 y ,

                        2  2        2      2        2  3                  3
    COEFF(-1, 0) = 1/2 x  y  - 1/2 x  - x y  - 1/4 x  y  - 1/2 x y - 1/6 y

            2            3                      2                         2
     + 1/4 x  y + 1/2 x y  + 1/6 y - 1/3 + 1/3 y  + x, COEFF(0, 0) = 3/2 x

            2                      3        2        2  3      3
     - 3/4 x  y - 2 x + x y - 1/4 y  + 1/2 y  + 3/4 x  y  - x y  + 1/4 y

            2  2              2                                 2  2
     - 3/2 x  y  - 1/2 + 2 x y , COEFF(1, 0) = - 1/2 x y + 3/2 x  y  + 1

            3                2  3        2        2          3        2
     + 1/2 y  - 1/2 y - 3/4 x  y  + 3/4 x  y - x y  + 1/2 x y  - 3/2 x  + x

        2
     - y , COEFF(2, 0) =

         2        2              2          2  2                 2  3         3
    1/2 x  + 1/6 y  - 1/6 - 1/4 x  y - 1/2 x  y  + 1/12 y + 1/4 x  y  - 1/12 y

                          3        2          3          2        2  2
    , COEFF(-1, 1) = 1/6 y  - 1/6 y  - 1/2 x y  + 1/2 x y  - 1/4 x  y  - 1/3 y

            2          2  3                                  2      3
     - 1/2 x  y + 1/4 x  y  + x y, COEFF(0, 1) = -2 x y - x y  + x y  - 1/2 y

            2  2        2          3        2        2  3
     + 3/4 x  y  + 3/2 x  y + 1/4 y  - 1/4 y  - 3/4 x  y , COEFF(1, 1) =

         2  3              2            3        2          2        3
    3/4 x  y  + x y - 3/2 x  y - 1/2 x y  + 1/2 y  + 1/2 x y  - 1/2 y  + y

            2  2
     - 3/4 x  y ,

                       2           2        2  2         3                2  3
    COEFF(2, 1) = 1/2 x  y - 1/12 y  + 1/4 x  y  + 1/12 y  - 1/6 y - 1/4 x  y ,

    COEFF(-1, 2) =

           3                  2  3                   2           3
    1/6 x y  + 1/18 y - 1/12 x  y  - 1/6 x y + 1/12 x  y - 1/18 y , COEFF(0, 2)

               3                 2  3          3                  2
     = - 1/12 y  + 1/12 y + 1/4 x  y  - 1/3 x y  + 1/3 x y - 1/4 x  y,

                         2  3        3                  3        2
    COEFF(1, 2) = - 1/4 x  y  + 1/6 y  - 1/6 y + 1/6 x y  + 1/4 x  y - 1/6 x y,

                        2  3                  2           3
    COEFF(2, 2) = 1/12 x  y  + 1/36 y - 1/12 x  y - 1/36 y ]

> print_coeffs__lc_of_data(%, "coeffs_dx->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order3.smooth0/coeffs-dx.compute.c");
bytes used=46043172, alloc=2031244, time=3.55
bytes used=47044504, alloc=2031244, time=3.63
bytes used=48045408, alloc=2031244, time=3.71
bytes used=49045584, alloc=2031244, time=3.81
bytes used=50046312, alloc=2031244, time=3.90
bytes used=51050092, alloc=2031244, time=3.99
bytes used=52050332, alloc=2031244, time=4.09
bytes used=53050484, alloc=2031244, time=4.20
bytes used=54050712, alloc=2031244, time=4.29
bytes used=55050888, alloc=2031244, time=4.40
bytes used=56051052, alloc=2031244, time=4.51
> 
# d/dy
> simplify( diff(interp_2d_cube_order3_smooth0,y) );
bytes used=57051236, alloc=2031244, time=4.59
                                 2                  2
- 1/2 DATA(0, 0) + DATA(0, 1) - x  y DATA(0, -1) - x  y DATA(1, 0)

        2                     2                     2
     - x  y DATA(0, 1) + 1/2 x  y DATA(1, 1) + 1/2 x  y DATA(-1, -1)

            2                  2
     + 1/2 x  y DATA(1, -1) - x  y DATA(-1, 0) + 1/6 x DATA(-1, 0)

                               2                   2
     - 1/2 x DATA(1, 0) + 1/2 x  DATA(0, 0) - 1/4 x  DATA(1, 0)

            2                                       2
     - 1/4 x  DATA(-1, 0) + 1/4 x DATA(0, 0) + 3/2 y  DATA(0, 0)

            2                     2                       2
     - 3/2 y  DATA(0, 1) + 1/6 x y  DATA(-1, -1) - 1/2 x y  DATA(1, -1)

              2                      2                      2
     + 1/2 x y  DATA(-1, 1) - 1/2 x y  DATA(-1, 0) + 3/2 x y  DATA(1, 0)

            2  2                     2
     - 3/2 x  y  DATA(0, 0) - 3/4 x y  DATA(0, 0) - 2 y DATA(0, 0)

                                           2
     + y DATA(0, 1) + y DATA(0, -1) - 1/2 y  DATA(0, -1)

            2  2                     2  2                    2  2
     - 1/4 x  y  DATA(-1, -1) + 1/2 x  y  DATA(0, -1) - 1/4 x  y  DATA(1, -1)

            2  2                    2  2                      2
     + 3/4 x  y  DATA(-1, 0) - 3/4 x  y  DATA(-1, 1) + 1/4 x y  DATA(0, -1)

              2                     2
     + 3/4 x y  DATA(0, 1) - 3/2 x y  DATA(1, 1) + x y DATA(0, 0)

     - 1/2 x y DATA(0, 1) - 1/3 x y DATA(-1, -1) - 1/2 x y DATA(0, -1)

     + x y DATA(1, -1) - 1/3 x y DATA(-1, 1) - 2 x y DATA(1, 0)

                             2  2                   2  2
     + x y DATA(1, 1) + 3/4 x  y  DATA(1, 0) + 3/2 x  y  DATA(0, 1)

            2  2                                         3
     - 3/4 x  y  DATA(1, 1) + 2/3 x y DATA(-1, 0) + 1/6 x  y DATA(2, -1)

            3                     3
     + 1/6 x  y DATA(2, 1) - 1/3 x  y DATA(2, 0) - 1/3 DATA(0, -1)

              2                      2                      2
     + 1/2 x y  DATA(1, 2) + 1/12 x y  DATA(2, -1) - 1/4 x y  DATA(0, 2)

              2                      2                   2  2
     - 1/6 x y  DATA(-1, 2) - 1/4 x y  DATA(2, 0) + 1/4 x  y  DATA(1, 2)

            2  2                   2  2                      2
     - 1/2 x  y  DATA(0, 2) + 1/4 x  y  DATA(-1, 2) + 1/4 x y  DATA(2, 1)

               2                   2                   3
     - 1/12 x y  DATA(2, 2) + 1/2 y  DATA(0, 2) + 1/6 x  DATA(2, 1)

             3                    3                   3
     - 1/36 x  DATA(2, 2) - 1/12 x  DATA(2, 0) - 1/4 x  DATA(0, 0)

            3                   3                   3
     + 1/4 x  DATA(1, 0) + 1/2 x  DATA(0, 1) - 1/2 x  DATA(1, 1)

             3                     3  2                    3  2
     + 1/18 x  DATA(-1, -1) + 1/4 x  y  DATA(1, -1) + 1/4 x  y  DATA(-1, 1)

             3  2                    3  2                   3  2
     - 1/12 x  y  DATA(2, -1) - 1/4 x  y  DATA(1, 2) + 1/4 x  y  DATA(0, 2)

             3  2                    3  2                    3  2
     - 1/12 x  y  DATA(-1, 2) - 1/4 x  y  DATA(2, 1) + 1/12 x  y  DATA(2, 2)

            3  2                   3  2                   3  2
     + 1/4 x  y  DATA(2, 0) + 3/4 x  y  DATA(0, 0) - 3/4 x  y  DATA(1, 0)

            3  2
     - 1/4 x  y  DATA(-1, 0) - 1/6 x y DATA(2, -1) - 1/6 x y DATA(2, 1)

            3  2                    3  2                     3  2
     + 3/4 x  y  DATA(1, 1) + 1/12 x  y  DATA(-1, -1) - 1/4 x  y  DATA(0, -1)

                             3                     3
     + 1/3 x y DATA(2, 0) - x  y DATA(0, 0) + 1/2 x  y DATA(0, 1)

            3                     3                       3
     - 1/2 x  y DATA(1, 1) - 1/6 x  y DATA(-1, -1) + 1/2 x  y DATA(0, -1)

            3                  3
     - 1/2 x  y DATA(1, -1) + x  y DATA(1, 0) + x DATA(1, 1)

     + 1/9 x DATA(-1, -1) + 1/6 x DATA(0, -1) - 1/3 x DATA(1, -1)

     - 1/3 x DATA(-1, 1) + 1/18 x DATA(2, -1) - 1/6 x DATA(1, 2)

     + 1/12 x DATA(0, 2) + 1/18 x DATA(-1, 2) - 1/6 x DATA(2, 1)

                                                    3
     + 1/36 x DATA(2, 2) + 1/12 x DATA(2, 0) + 1/3 x  y DATA(-1, 0)

            2                     2                    2
     - 1/6 x  DATA(-1, -1) + 1/3 x  DATA(0, -1) - 1/6 x  DATA(1, -1)

            2                     2                   2
     + 1/2 x  DATA(-1, 1) - 1/12 x  DATA(1, 2) + 1/6 x  DATA(0, 2)

             2                                       3
     - 1/12 x  DATA(-1, 2) - 1/2 x DATA(0, 1) - 1/6 x  DATA(0, -1)

            3                     3                    3
     + 1/6 x  DATA(1, -1) + 1/12 x  DATA(-1, 0) - 1/6 x  DATA(-1, 1)

             3                     3                    3
     - 1/18 x  DATA(2, -1) + 1/12 x  DATA(1, 2) - 1/12 x  DATA(0, 2)

             3                2                   2
     + 1/36 x  DATA(-1, 2) - x  DATA(0, 1) + 1/2 x  DATA(1, 1)

            3                                       2
     - 1/6 x  y DATA(-1, 1) - 1/6 DATA(0, 2) + 1/2 x  y DATA(-1, 1)

          2                     3  2
     + 2 x  y DATA(0, 0) - 3/4 x  y  DATA(0, 1)

> coeffs_as_lc_of_data(%, posn_list_2d_size4);
bytes used=58052428, alloc=2096768, time=4.67
                        2  2                  2         3  2                3
[COEFF(-1, -1) = - 1/4 x  y  - 1/3 x y - 1/6 x  + 1/12 x  y  + 1/9 x - 1/6 x  y

            2           3          2                      2  2
     + 1/2 x  y + 1/18 x  + 1/6 x y , COEFF(0, -1) = 1/2 x  y  - 1/2 x y

            3          2              3  2                2    2          3
     - 1/6 x  + 1/4 x y  - 1/3 - 1/4 x  y  + 1/6 x - 1/2 y  - x  y + 1/2 x  y

            2                                3                    2        2
     + 1/3 x  + y, COEFF(1, -1) = x y - 1/2 x  y - 1/3 x - 1/2 x y  - 1/6 x

            2          3  2        3        2  2
     + 1/2 x  y + 1/4 x  y  + 1/6 x  - 1/4 x  y , COEFF(2, -1) =

         3             2         3  2                            3
    1/6 x  y + 1/12 x y  - 1/12 x  y  - 1/6 x y + 1/18 x - 1/18 x ,

                          2        3                              2         3
    COEFF(-1, 0) = - 1/4 x  + 1/3 x  y + 2/3 x y + 1/6 x - 1/2 x y  + 1/12 x

            3  2        2  2    2                               3  2        3
     - 1/4 x  y  + 3/4 x  y  - x  y, COEFF(0, 0) = - 1/2 + 3/4 x  y  - 1/4 x

            2        2          2            2              3
     + 3/2 y  + 1/2 x  - 3/4 x y  - 2 y + 2 x  y + 1/4 x - x  y + x y

            2  2                       3  2    3          2  2          2
     - 3/2 x  y , COEFF(1, 0) = - 3/4 x  y  + x  y + 3/4 x  y  + 3/2 x y

        2          2                3
     - x  y - 1/4 x  - 2 x y + 1/4 x  - 1/2 x, COEFF(2, 0) =

           3                     3          2        3  2
    - 1/3 x  y + 1/3 x y - 1/12 x  - 1/4 x y  + 1/4 x  y  + 1/12 x,

                        2        2  2        2            2
    COEFF(-1, 1) = 1/2 x  - 3/4 x  y  + 1/2 x  y + 1/2 x y  - 1/3 x y

            3  2                3        3                                   3
     + 1/4 x  y  - 1/3 x - 1/6 x  - 1/6 x  y, COEFF(0, 1) = - 1/2 x y + 1/2 x

            3  2        2        2      2        2  2          2
     - 3/4 x  y  - 3/2 y  + y - x  y - x  + 3/2 x  y  + 3/4 x y  - 1/2 x

            3                               2  2        3                3
     + 1/2 x  y + 1, COEFF(1, 1) = x - 3/4 x  y  - 1/2 x  y + x y - 1/2 x

            2          2        3  2        2
     + 1/2 x  - 3/2 x y  + 3/4 x  y  + 1/2 x  y,

                       3          2        3                            3  2
    COEFF(2, 1) = 1/6 x  + 1/4 x y  + 1/6 x  y - 1/6 x - 1/6 x y - 1/4 x  y ,

    COEFF(-1, 2) =

                  2  2          2         3  2         3         2
    1/18 x + 1/4 x  y  - 1/6 x y  - 1/12 x  y  + 1/36 x  - 1/12 x , COEFF(0, 2)

                2        2        2                       2  2        3  2
     = - 1/4 x y  + 1/2 y  + 1/6 x  - 1/6 + 1/12 x - 1/2 x  y  + 1/4 x  y

             3
     - 1/12 x , COEFF(1, 2) =

                    2         3          2        2  2        3  2
    - 1/6 x - 1/12 x  + 1/12 x  + 1/2 x y  + 1/4 x  y  - 1/4 x  y ,

                            2         3  2         3
    COEFF(2, 2) = - 1/12 x y  + 1/12 x  y  - 1/36 x  + 1/36 x]

> print_coeffs__lc_of_data(%, "coeffs_dy->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order3.smooth0/coeffs-dy.compute.c");
bytes used=59052584, alloc=2096768, time=4.75
bytes used=60053948, alloc=2096768, time=4.84
bytes used=61054256, alloc=2096768, time=4.91
bytes used=62054420, alloc=2096768, time=5.01
bytes used=63054732, alloc=2096768, time=5.10
bytes used=64055016, alloc=2096768, time=5.23
bytes used=65055480, alloc=2096768, time=5.33
bytes used=66055672, alloc=2096768, time=5.43
bytes used=67055852, alloc=2096768, time=5.52
bytes used=68056060, alloc=2096768, time=5.65
> 
# d^2/dx^2
> simplify( diff(interp_2d_cube_order3_smooth0,x,x) );
bytes used=69057148, alloc=2096768, time=5.75
         3
- 3/2 x y  DATA(0, 1) - 2 DATA(0, 0) + DATA(1, 0) - x DATA(-1, 0)

                                            2               2
     - 3 x DATA(1, 0) + 3 x DATA(0, 0) + 2 y  DATA(0, 0) - y  DATA(0, 1)

              2                       2                      2
     - 1/2 x y  DATA(-1, -1) - 3/2 x y  DATA(1, -1) - 1/2 x y  DATA(-1, 1)

          2                    2                   2
     + x y  DATA(-1, 0) + 3 x y  DATA(1, 0) - 3 x y  DATA(0, 0) + y DATA(0, 0)

                                             2
     - 2 y DATA(0, 1) + 2/3 y DATA(0, -1) - y  DATA(0, -1)

              2                      2                     2
     + 3/2 x y  DATA(0, -1) + 3/2 x y  DATA(0, 1) - 3/2 x y  DATA(1, 1)

     - 3/2 x y DATA(0, 0) + 3 x y DATA(0, 1) + 1/3 x y DATA(-1, -1)

     - x y DATA(0, -1) + x y DATA(1, -1) - x y DATA(-1, 1) + 3/2 x y DATA(1, 0)

     - 3 x y DATA(1, 1) + 1/2 x y DATA(-1, 0) + DATA(-1, 0) + y DATA(1, 1)

                                                     2
     - 1/3 y DATA(1, -1) - 1/3 y DATA(-1, -1) + 1/2 y  DATA(-1, 1)

            2                    2                     2
     + 1/2 y  DATA(1, -1) + 1/2 y  DATA(-1, -1) + 1/2 y  DATA(1, 1)

        2               2
     - y  DATA(1, 0) - y  DATA(-1, 0) - 1/2 y DATA(-1, 0) + 1/3 y DATA(0, 2)

                                3                   3
     - 1/6 y DATA(-1, 2) + 1/2 y  DATA(1, 0) + 1/6 y  DATA(-1, 2)

            3                   3                   3
     - 1/3 y  DATA(0, 2) + 1/6 y  DATA(1, 2) - 1/2 y  DATA(-1, 1)

            3                    3
     + 1/2 y  DATA(-1, 0) - 1/6 y  DATA(1, -1) - 1/6 y DATA(1, 2)

            3                3                   3
     + 1/3 y  DATA(0, -1) + y  DATA(0, 1) - 1/6 y  DATA(-1, -1)

            3               3
     - 1/2 y  DATA(1, 1) - y  DATA(0, 0) + y DATA(-1, 1) - 1/2 y DATA(1, 0)

              2                  2                     2
     + 1/2 x y  DATA(2, -1) - x y  DATA(2, 0) + 1/2 x y  DATA(2, 1)

     - 1/3 x y DATA(2, -1) + x y DATA(2, 1) - 1/2 x y DATA(2, 0) + x DATA(2, 0)

              3                     3                     3
     + 1/6 x y  DATA(2, 2) + 1/2 x y  DATA(2, 0) + 3/2 x y  DATA(0, 0)

              3                     3                      3
     - 3/2 x y  DATA(1, 0) - 1/2 x y  DATA(-1, 0) + 3/2 x y  DATA(1, 1)

              3                       3                      3
     + 1/6 x y  DATA(-1, -1) - 1/2 x y  DATA(0, -1) + 1/2 x y  DATA(1, -1)

              3                      3                      3
     + 1/2 x y  DATA(-1, 1) - 1/6 x y  DATA(2, -1) - 1/2 x y  DATA(1, 2)

              3                     3                      3
     + 1/2 x y  DATA(0, 2) - 1/6 x y  DATA(-1, 2) - 1/2 x y  DATA(2, 1)

     + 1/6 x y DATA(-1, 2) + 1/2 x y DATA(1, 2) - 1/2 x y DATA(0, 2)

     - 1/6 x y DATA(2, 2)

> coeffs_as_lc_of_data(%, posn_list_2d_size4);
                          2          3                          2        3
[COEFF(-1, -1) = - 1/2 x y  + 1/6 x y  - 1/3 y + 1/3 x y + 1/2 y  - 1/6 y ,

                               3          2          3    2
    COEFF(0, -1) = -x y + 1/3 y  + 3/2 x y  - 1/2 x y  - y  + 2/3 y,

                          3              3        2          2
    COEFF(1, -1) = 1/2 x y  + x y - 1/6 y  + 1/2 y  - 3/2 x y  - 1/3 y,

                                      3          2
    COEFF(2, -1) = - 1/3 x y - 1/6 x y  + 1/2 x y ,

                                    3      2        2                  3
    COEFF(-1, 0) = - 1/2 y - 1/2 x y  + x y  + 1 - y  + 1/2 x y + 1/2 y  - x,

                                       2        2    3              3
    COEFF(0, 0) = - 3/2 x y + 3 x + 2 y  - 3 x y  - y  + y + 3/2 x y  - 2,

                       2          3    2                                    3
    COEFF(1, 0) = 3 x y  - 3/2 x y  - y  - 1/2 y + 1 - 3 x + 3/2 x y + 1/2 y ,

                                     3      2
    COEFF(2, 0) = - 1/2 x y + 1/2 x y  - x y  + x,

                               2          2          3            3
    COEFF(-1, 1) = -x y + 1/2 y  - 1/2 x y  + 1/2 x y  + y - 1/2 y ,

                           3          2            2          3
    COEFF(0, 1) = - 3/2 x y  + 3/2 x y  + 3 x y - y  - 2 y + y ,

                         3              3          2                2
    COEFF(1, 1) = - 1/2 y  + y + 3/2 x y  - 3/2 x y  - 3 x y + 1/2 y ,

                               2          3
    COEFF(2, 1) = x y + 1/2 x y  - 1/2 x y ,

                                    3                3
    COEFF(-1, 2) = 1/6 x y - 1/6 x y  - 1/6 y + 1/6 y ,

                                   3          3
    COEFF(0, 2) = - 1/2 x y - 1/3 y  + 1/2 x y  + 1/3 y,

                       3          3
    COEFF(1, 2) = 1/6 y  - 1/2 x y  - 1/6 y + 1/2 x y,

                         3
    COEFF(2, 2) = 1/6 x y  - 1/6 x y]

> print_coeffs__lc_of_data(%, "coeffs_dxx->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order3.smooth0/coeffs-dxx.compute.c");
bytes used=70057352, alloc=2096768, time=5.82
bytes used=71057536, alloc=2096768, time=5.91
bytes used=72058632, alloc=2096768, time=6.02
bytes used=73058984, alloc=2096768, time=6.13
bytes used=74059184, alloc=2096768, time=6.22
> 
# d^2/dxdy
> simplify( diff(interp_2d_cube_order3_smooth0,x,y) );
bytes used=75059676, alloc=2096768, time=6.29
       2
- 3/2 x  y DATA(1, 1) + 1/12 DATA(2, 0) + 1/4 DATA(0, 0) - 1/2 DATA(1, 0)

                                          2                   2
     - 1/2 DATA(0, 1) + DATA(1, 1) - 3/4 x  DATA(0, 0) - 1/4 x  DATA(2, 0)

             2                    2                   2
     + 1/12 x  DATA(-1, 2) - 1/4 x  DATA(0, 2) + 1/4 x  DATA(1, 2)

            2                    2                    2
     - 1/6 x  DATA(2, -1) - 1/2 x  DATA(-1, 1) + 1/4 x  DATA(-1, 0)

            2                     2                   2
     + 1/2 x  DATA(1, -1) - 1/12 x  DATA(2, 2) + 1/2 x  DATA(2, 1)

            2                     2                   2
     + 1/6 x  DATA(-1, -1) - 3/2 x  DATA(1, 1) + 3/2 x  DATA(0, 1)

            2                   2
     + 3/4 x  DATA(1, 0) - 1/2 x  DATA(0, -1) - 2 x DATA(0, 1)

     - 1/6 x DATA(-1, 2) + 1/3 x DATA(0, 2) - 1/6 x DATA(1, 2)

     - 1/6 y DATA(2, 1) - 1/6 y DATA(2, -1) + x DATA(-1, 1) - 1/3 x DATA(1, -1)

                                                                  2
     + 2/3 x DATA(0, -1) - 1/3 x DATA(-1, -1) + x DATA(1, 1) - x y  DATA(0, 2)

              2                    2  2                   2  2
     + 1/2 x y  DATA(-1, 2) + 3/4 x  y  DATA(0, 2) - 1/4 x  y  DATA(-1, 2)

              2                   2  2                   2  2
     + 1/2 x y  DATA(1, 2) + 9/4 x  y  DATA(1, 1) + 1/4 x  y  DATA(-1, -1)

            2  2                    2  2                    2  2
     - 3/4 x  y  DATA(0, -1) + 3/4 x  y  DATA(1, -1) + 3/4 x  y  DATA(-1, 1)

            2  2                    2  2                   2
     - 1/4 x  y  DATA(2, -1) - 3/4 x  y  DATA(1, 2) - 1/2 x  y DATA(-1, -1)

            2                      2                  2
     + 3/2 x  y DATA(0, -1) - 3/2 x  y DATA(1, -1) + x  y DATA(-1, 0)

            2                      2                      2  2
     - 1/2 x  y DATA(-1, 1) + 1/2 x  y DATA(2, -1) - 3/4 x  y  DATA(2, 1)

            2  2                   2  2                   2  2
     + 1/4 x  y  DATA(2, 2) + 3/4 x  y  DATA(2, 0) + 9/4 x  y  DATA(0, 0)

            2  2                   2  2                    2  2
     - 9/4 x  y  DATA(1, 0) - 3/4 x  y  DATA(-1, 0) - 9/4 x  y  DATA(0, 1)

            2                    2                   2
     - 1/6 y  DATA(-1, 2) + 1/2 y  DATA(1, 2) + 1/2 x  y DATA(2, 1)

        2                   2                   2
     - x  y DATA(2, 0) - 3 x  y DATA(0, 0) + 3 x  y DATA(1, 0)

            2
     + 3/2 x  y DATA(0, 1) - 1/2 x DATA(-1, 0) - 1/2 x DATA(1, 0)

                           2                   2
     + x DATA(0, 0) - 3/4 y  DATA(0, 0) + 3/4 y  DATA(0, 1)

              2                       2                      2
     - 1/2 x y  DATA(-1, -1) - 1/2 x y  DATA(1, -1) - 3/2 x y  DATA(-1, 1)

              2                      2                   2
     + 3/2 x y  DATA(-1, 0) + 3/2 x y  DATA(1, 0) - 3 x y  DATA(0, 0)

                                                                  2
     + y DATA(0, 0) - 1/2 y DATA(0, 1) - 1/2 y DATA(0, -1) + 1/4 y  DATA(0, -1)

          2                    2                     2
     + x y  DATA(0, -1) + 3 x y  DATA(0, 1) - 3/2 x y  DATA(1, 1)

     + 4 x y DATA(0, 0) - 2 x y DATA(0, 1) + x y DATA(-1, -1)

     - 2 x y DATA(0, -1) + x y DATA(1, -1) + x y DATA(-1, 1) - 2 x y DATA(1, 0)

     + x y DATA(1, 1) - 2 x y DATA(-1, 0) + 1/9 DATA(-1, -1) + 1/6 DATA(0, -1)

     - 1/3 DATA(1, -1) + 1/6 DATA(-1, 0) - 1/3 DATA(-1, 1) + y DATA(1, 1)

                                                 2
     + y DATA(1, -1) - 1/3 y DATA(-1, -1) + 1/2 y  DATA(-1, 1)

            2                    2                     2
     - 1/2 y  DATA(1, -1) + 1/6 y  DATA(-1, -1) - 3/2 y  DATA(1, 1)

            2                   2
     + 3/2 y  DATA(1, 0) - 1/2 y  DATA(-1, 0) + 2/3 y DATA(-1, 0)

     - 1/3 y DATA(-1, 1) - 2 y DATA(1, 0) + 1/18 DATA(2, -1) - 1/6 DATA(1, 2)

     + 1/12 DATA(0, 2) + 1/18 DATA(-1, 2) - 1/6 DATA(2, 1) + 1/36 DATA(2, 2)

             2                    2                   2
     + 1/12 y  DATA(2, -1) - 1/4 y  DATA(0, 2) + 1/4 y  DATA(2, 1)

             2                   2
     - 1/12 y  DATA(2, 2) - 1/4 y  DATA(2, 0) + 1/3 y DATA(2, 0)

> coeffs_as_lc_of_data(%, posn_list_2d_size4);
                        2          2                2  2
[COEFF(-1, -1) = - 1/2 x  y + 1/6 x  - 1/3 y + 1/4 x  y  + 1/9 - 1/3 x

              2              2                                2
     - 1/2 x y  + x y + 1/6 y , COEFF(0, -1) = - 1/2 y - 1/2 x  + 2/3 x

            2                        2  2        2      2
     + 3/2 x  y - 2 x y + 1/6 - 3/4 x  y  + 1/4 y  + x y , COEFF(1, -1) =

           2        2                      2        2  2              2
    - 1/2 y  - 3/2 x  y + x y + y - 1/2 x y  + 3/4 x  y  - 1/3 + 1/2 x  - 1/3 x

                           2        2          2  2        2
    , COEFF(2, -1) = 1/12 y  + 1/2 x  y - 1/4 x  y  - 1/6 x  + 1/18 - 1/6 y,

                          2        2  2        2          2
    COEFF(-1, 0) = - 1/2 y  - 3/4 x  y  + 1/4 x  + 1/6 + x  y - 1/2 x + 2/3 y

              2
     + 3/2 x y  - 2 x y, COEFF(0, 0) =

        2          2        2        2  2                      2
    -3 x  y - 3/4 x  - 3 x y  + 9/4 x  y  + y + 1/4 + x - 3/4 y  + 4 x y,

                                 2      2          2  2                2
    COEFF(1, 0) = - 1/2 + 3/2 x y  + 3 x  y - 9/4 x  y  - 1/2 x + 3/4 x  - 2 y

                    2
     - 2 x y + 3/2 y ,

                              2    2          2  2                2
    COEFF(2, 0) = 1/12 - 1/4 x  - x  y + 3/4 x  y  + 1/3 y - 1/4 y ,

    COEFF(-1, 1) =

           2        2  2                        2                    2        2
    - 1/2 x  + 3/4 x  y  - 1/3 + x y + x - 1/2 x  y - 1/3 y - 3/2 x y  + 1/2 y

                                         2  2        2          2        2
    , COEFF(0, 1) = - 1/2 - 1/2 y - 9/4 x  y  + 3/2 x  y + 3 x y  + 3/4 y

                          2
     - 2 x y - 2 x + 3/2 x , COEFF(1, 1) =

             2          2  2          2              2            2
    y - 3/2 x  y + 9/4 x  y  - 3/2 x y  + x y - 3/2 y  + x - 3/2 x  + 1,

                                 2        2        2  2              2
    COEFF(2, 1) = - 1/6 y + 1/2 x  + 1/4 y  - 3/4 x  y  - 1/6 + 1/2 x  y,

                                   2        2          2        2  2
    COEFF(-1, 2) = - 1/6 x + 1/12 x  - 1/6 y  + 1/2 x y  - 1/4 x  y  + 1/18,

                      2        2        2        2  2
    COEFF(0, 2) = -x y  - 1/4 x  - 1/4 y  + 3/4 x  y  + 1/12 + 1/3 x,

                                 2        2  2        2        2
    COEFF(1, 2) = - 1/6 + 1/2 x y  - 3/4 x  y  + 1/4 x  + 1/2 y  - 1/6 x,

                               2         2        2  2
    COEFF(2, 2) = 1/36 - 1/12 x  - 1/12 y  + 1/4 x  y ]

> print_coeffs__lc_of_data(%, "coeffs_dxy->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order3.smooth0/coeffs-dxy.compute.c");
bytes used=76060032, alloc=2096768, time=6.35
bytes used=77065632, alloc=2096768, time=6.43
bytes used=78066244, alloc=2096768, time=6.51
bytes used=79068800, alloc=2096768, time=6.63
bytes used=80068972, alloc=2096768, time=6.78
bytes used=81069188, alloc=2096768, time=6.87
bytes used=82069380, alloc=2096768, time=7.01
bytes used=83069640, alloc=2096768, time=7.14
> 
# d^2/dy^2
> simplify( diff(interp_2d_cube_order3_smooth0,y,y) );
bytes used=84070088, alloc=2096768, time=7.30
       2                                          3
- 3/2 x  y DATA(1, 1) + 1/3 x DATA(2, 0) - 1/6 y x  DATA(-1, 2)

              3                     3                     3
     - 1/2 y x  DATA(2, 1) + 1/6 y x  DATA(2, 2) + 1/2 y x  DATA(2, 0)

              3                     3                     3
     + 3/2 y x  DATA(0, 0) - 3/2 y x  DATA(1, 0) - 1/2 y x  DATA(-1, 0)

     + x y DATA(1, 2) - 1/3 x y DATA(-1, 2) + 1/6 x y DATA(2, -1)

     - 1/2 x y DATA(0, 2) + 1/2 x y DATA(2, 1) - 1/6 x y DATA(2, 2)

                                 2                 2
     - 1/2 x y DATA(2, 0) + 1/2 x  y DATA(1, 2) - x  y DATA(0, 2)

            2                        3                     3
     + 1/2 x  y DATA(-1, 2) - 3/2 y x  DATA(0, 1) + 3/2 y x  DATA(1, 1)

              3                       3                      3
     + 1/6 y x  DATA(-1, -1) - 1/2 y x  DATA(0, -1) + 1/2 y x  DATA(1, -1)

              3                      3                      3
     + 1/2 y x  DATA(-1, 1) - 1/6 y x  DATA(2, -1) - 1/2 y x  DATA(1, 2)

              3
     + 1/2 y x  DATA(0, 2) - 2 DATA(0, 0) + DATA(0, 1) + y DATA(0, 2)

                              2                   2
     - 1/6 x DATA(2, -1) + 2 x  DATA(0, 0) + 1/2 x  DATA(-1, 1)

        2                    2                    2
     - x  DATA(-1, 0) + 1/2 x  DATA(1, -1) + 1/2 x  DATA(-1, -1)

            2               2               2               2
     + 1/2 x  DATA(1, 1) - x  DATA(0, 1) - x  DATA(1, 0) - x  DATA(0, -1)

     - 1/2 x DATA(0, 1) - 1/3 x DATA(-1, 1) + x DATA(1, -1) - 1/2 x DATA(0, -1)

                                                2
     - 1/3 x DATA(-1, -1) + x DATA(1, 1) - 1/2 x  y DATA(-1, -1)

        2                      2                      2
     + x  y DATA(0, -1) - 1/2 x  y DATA(1, -1) + 3/2 x  y DATA(-1, 0)

            2                    2                     2
     - 3/2 x  y DATA(-1, 1) - 3 x  y DATA(0, 0) + 3/2 x  y DATA(1, 0)

          2
     + 3 x  y DATA(0, 1) + 2/3 x DATA(-1, 0) - 2 x DATA(1, 0) + x DATA(0, 0)

     + 3 y DATA(0, 0) - 3 y DATA(0, 1) - y DATA(0, -1) - 3/2 x y DATA(0, 0)

     + 3/2 x y DATA(0, 1) + 1/3 x y DATA(-1, -1) + 1/2 x y DATA(0, -1)

     - x y DATA(1, -1) + x y DATA(-1, 1) + 3 x y DATA(1, 0) - 3 x y DATA(1, 1)

                                                           3
     - x y DATA(-1, 0) + DATA(0, -1) - 1/6 x DATA(2, 1) + x  DATA(1, 0)

            3                   3                    3
     + 1/2 x  DATA(0, 1) + 1/3 x  DATA(-1, 0) - 1/6 x  DATA(-1, 1)

            3                    3                   3
     + 1/6 x  DATA(2, -1) + 1/6 x  DATA(2, 1) - 1/2 x  DATA(1, 1)

            3                     3                    3
     - 1/6 x  DATA(-1, -1) + 1/2 x  DATA(0, -1) - 1/2 x  DATA(1, -1)

            3               3
     - 1/3 x  DATA(2, 0) - x  DATA(0, 0)

> coeffs_as_lc_of_data(%, posn_list_2d_size4);
bytes used=85070256, alloc=2096768, time=7.36
                        3        2                2          3
[COEFF(-1, -1) = 1/6 y x  + 1/2 x  - 1/3 x - 1/2 x  y - 1/6 x  + 1/3 x y,

                                     2          3          3              2
    COEFF(0, -1) = -y + 1 - 1/2 x + x  y + 1/2 x  - 1/2 y x  + 1/2 x y - x ,

                            2        2                3          3
    COEFF(1, -1) = x + 1/2 x  - 1/2 x  y - x y - 1/2 x  + 1/2 y x ,

                                            3          3
    COEFF(2, -1) = - 1/6 x + 1/6 x y + 1/6 x  - 1/6 y x ,

                                      2            3    2        3
    COEFF(-1, 0) = 2/3 x - x y + 3/2 x  y - 1/2 y x  - x  + 1/3 x ,

                                               3          2      2      3
    COEFF(0, 0) = - 3/2 x y + 3 y - 2 + 3/2 y x  + x + 2 x  - 3 x  y - x ,

                       2              2          3          3
    COEFF(1, 0) = 3/2 x  y + 3 x y - x  - 3/2 y x  - 2 x + x ,

                               3          3
    COEFF(2, 0) = 1/3 x - 1/3 x  + 1/2 y x  - 1/2 x y,

                          3                2              2          3
    COEFF(-1, 1) = 1/2 y x  - 1/3 x + 1/2 x  + x y - 3/2 x  y - 1/6 x ,

                             3                        2          3          2
    COEFF(0, 1) = 1 - 3/2 y x  - 1/2 x + 3/2 x y + 3 x  y + 1/2 x  - 3 y - x ,

                         2            3            2                3
    COEFF(1, 1) = - 3/2 x  y + 3/2 y x  + x + 1/2 x  - 3 x y - 1/2 x ,

                           3        3
    COEFF(2, 1) = - 1/2 y x  + 1/6 x  - 1/6 x + 1/2 x y,

                                      3        2
    COEFF(-1, 2) = - 1/3 x y - 1/6 y x  + 1/2 x  y,

                             3              2
    COEFF(0, 2) = y + 1/2 y x  - 1/2 x y - x  y,

                       2                  3                                   3
    COEFF(1, 2) = 1/2 x  y + x y - 1/2 y x , COEFF(2, 2) = - 1/6 x y + 1/6 y x

    ]

> print_coeffs__lc_of_data(%, "coeffs_dyy->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order3.smooth0/coeffs-dyy.compute.c");
bytes used=86075440, alloc=2096768, time=7.44
bytes used=87075616, alloc=2096768, time=7.56
bytes used=88075824, alloc=2096768, time=7.64
bytes used=89076048, alloc=2096768, time=7.77
> 
################################################################################
> 
#
# 2d, cube, order=4, smoothing=0 (size=5)
#
> 
# interpolating polynomial
> interp_2d_cube_order4_smooth0
> 	:= Lagrange_polynomial_interpolant(fn_2d_order4, coeffs_list_2d_order4,
> 					   coords_list_2d, posn_list_2d_size5);
bytes used=90076240, alloc=2096768, time=7.94
bytes used=91076464, alloc=2096768, time=8.00
bytes used=92076632, alloc=2096768, time=8.06
bytes used=93076868, alloc=2096768, time=8.13
bytes used=94077116, alloc=2162292, time=8.19
bytes used=95077496, alloc=2162292, time=8.26
bytes used=96078532, alloc=2162292, time=8.32
bytes used=97078712, alloc=2162292, time=8.39
bytes used=98080036, alloc=2162292, time=8.46
bytes used=99080196, alloc=2162292, time=8.52
bytes used=100080384, alloc=2162292, time=8.58
bytes used=101080560, alloc=2162292, time=8.65
bytes used=102080728, alloc=2162292, time=8.72
bytes used=103083404, alloc=2162292, time=8.79
bytes used=104083848, alloc=2162292, time=8.86
bytes used=105084044, alloc=2162292, time=8.93
bytes used=106084360, alloc=2162292, time=8.99
bytes used=107085840, alloc=2162292, time=9.06
bytes used=108086108, alloc=2162292, time=9.13
bytes used=109086368, alloc=2162292, time=9.20
bytes used=110086540, alloc=2162292, time=9.26
bytes used=111086744, alloc=2162292, time=9.33
interp_2d_cube_order4_smooth0 := DATA(0, 0) + (1/48 DATA(2, 0)

     - 1/24 DATA(1, 0) + 1/36 DATA(1, 1) + 1/144 DATA(-1, -2)

     - 1/288 DATA(-2, -2) - 1/144 DATA(1, -2) + 1/72 DATA(-2, 1)

     - 1/48 DATA(-2, 0) + 1/72 DATA(-2, -1) + 1/288 DATA(2, -2)

     - 1/288 DATA(-2, 2) - 1/36 DATA(-1, -1) + 1/36 DATA(1, -1)

     + 1/24 DATA(-1, 0) - 1/36 DATA(-1, 1) - 1/72 DATA(2, -1)

     - 1/144 DATA(1, 2) + 1/144 DATA(-1, 2) - 1/72 DATA(2, 1)

                          3  4
     + 1/288 DATA(2, 2)) x  y  + (4/9 DATA(1, 1) - 1/18 DATA(-1, -2)

     + 1/144 DATA(-2, -2) + 1/18 DATA(1, -2) + 1/18 DATA(-2, 1)

     - 1/18 DATA(-2, -1) - 1/144 DATA(2, -2) - 1/144 DATA(-2, 2)

     + 4/9 DATA(-1, -1) - 4/9 DATA(1, -1) - 4/9 DATA(-1, 1) + 1/18 DATA(2, -1)

     - 1/18 DATA(1, 2) + 1/18 DATA(-1, 2) - 1/18 DATA(2, 1) + 1/144 DATA(2, 2))

    x y + (5/48 DATA(2, 0) - 5/6 DATA(1, 0) + 4/9 DATA(1, 1)

     + 1/36 DATA(-1, -2) - 1/288 DATA(-2, -2) - 1/36 DATA(1, -2)

     + 1/18 DATA(-2, 1) - 5/48 DATA(-2, 0) + 1/18 DATA(-2, -1)

     + 1/288 DATA(2, -2) - 1/288 DATA(-2, 2) - 4/9 DATA(-1, -1)

     + 4/9 DATA(1, -1) + 5/6 DATA(-1, 0) - 4/9 DATA(-1, 1) - 1/18 DATA(2, -1)

     - 1/36 DATA(1, 2) + 1/36 DATA(-1, 2) - 1/18 DATA(2, 1) + 1/288 DATA(2, 2))

       2   /                  25
    x y  + |5/96 DATA(2, 0) + -- DATA(0, 0) - 5/6 DATA(1, 0) - 5/6 DATA(0, 1)
           \                  16

     + 4/9 DATA(1, 1) - 1/36 DATA(-1, -2) + 5/96 DATA(0, -2)

     + 1/576 DATA(-2, -2) - 1/36 DATA(1, -2) - 1/36 DATA(-2, 1)

     + 5/96 DATA(-2, 0) - 1/36 DATA(-2, -1) + 1/576 DATA(2, -2)

     + 1/576 DATA(-2, 2) + 4/9 DATA(-1, -1) - 5/6 DATA(0, -1) + 4/9 DATA(1, -1)

     - 5/6 DATA(-1, 0) + 4/9 DATA(-1, 1) - 1/36 DATA(2, -1) - 1/36 DATA(1, 2)

                                                                              \
     + 5/96 DATA(0, 2) - 1/36 DATA(-1, 2) - 1/36 DATA(2, 1) + 1/576 DATA(2, 2)|
                                                                              /

     2  2
    x  y  + (- 1/9 DATA(1, 1) + 1/18 DATA(-1, -2) - 1/144 DATA(-2, -2)

     - 1/18 DATA(1, -2) - 1/72 DATA(-2, 1) + 1/72 DATA(-2, -1)

     + 1/144 DATA(2, -2) + 1/144 DATA(-2, 2) - 1/9 DATA(-1, -1)

     + 1/9 DATA(1, -1) + 1/9 DATA(-1, 1) - 1/72 DATA(2, -1) + 1/18 DATA(1, 2)

                                                                 3
     - 1/18 DATA(-1, 2) + 1/72 DATA(2, 1) - 1/144 DATA(2, 2)) x y  + (

    5/24 DATA(0, 1) - 1/9 DATA(1, 1) - 1/18 DATA(-1, -2) + 5/48 DATA(0, -2)

     + 1/288 DATA(-2, -2) - 1/18 DATA(1, -2) + 1/144 DATA(-2, 1)

     - 1/144 DATA(-2, -1) + 1/288 DATA(2, -2) - 1/288 DATA(-2, 2)

     + 1/9 DATA(-1, -1) - 5/24 DATA(0, -1) + 1/9 DATA(1, -1) - 1/9 DATA(-1, 1)

     - 1/144 DATA(2, -1) + 1/18 DATA(1, 2) - 5/48 DATA(0, 2) + 1/18 DATA(-1, 2)

                                             2  3
     + 1/144 DATA(2, 1) - 1/288 DATA(2, 2)) x  y  + (1/36 DATA(1, 1)

     - 1/72 DATA(-1, -2) + 1/144 DATA(-2, -2) + 1/72 DATA(1, -2)

     + 1/72 DATA(-2, 1) - 1/72 DATA(-2, -1) - 1/144 DATA(2, -2)

     - 1/144 DATA(-2, 2) + 1/36 DATA(-1, -1) - 1/36 DATA(1, -1)

     - 1/36 DATA(-1, 1) + 1/72 DATA(2, -1) - 1/72 DATA(1, 2) + 1/72 DATA(-1, 2)

                                            3  3
     - 1/72 DATA(2, 1) + 1/144 DATA(2, 2)) x  y  + (- 5/48 DATA(2, 0)

     + 5/24 DATA(1, 0) - 1/9 DATA(1, 1) - 1/144 DATA(-1, -2)

     + 1/288 DATA(-2, -2) + 1/144 DATA(1, -2) - 1/18 DATA(-2, 1)

     + 5/48 DATA(-2, 0) - 1/18 DATA(-2, -1) - 1/288 DATA(2, -2)

     + 1/288 DATA(-2, 2) + 1/9 DATA(-1, -1) - 1/9 DATA(1, -1)

     - 5/24 DATA(-1, 0) + 1/9 DATA(-1, 1) + 1/18 DATA(2, -1) + 1/144 DATA(1, 2)

                                                                3  2
     - 1/144 DATA(-1, 2) + 1/18 DATA(2, 1) - 1/288 DATA(2, 2)) x  y  + (

    - 1/9 DATA(1, 1) + 1/72 DATA(-1, -2) - 1/144 DATA(-2, -2)

     - 1/72 DATA(1, -2) - 1/18 DATA(-2, 1) + 1/18 DATA(-2, -1)

     + 1/144 DATA(2, -2) + 1/144 DATA(-2, 2) - 1/9 DATA(-1, -1)

     + 1/9 DATA(1, -1) + 1/9 DATA(-1, 1) - 1/18 DATA(2, -1) + 1/72 DATA(1, 2)

                                                               3
     - 1/72 DATA(-1, 2) + 1/18 DATA(2, 1) - 1/144 DATA(2, 2)) x  y + (

    - 1/48 DATA(2, 0) + 1/6 DATA(1, 0) - 1/9 DATA(1, 1) - 1/36 DATA(-1, -2)

     + 1/288 DATA(-2, -2) + 1/36 DATA(1, -2) - 1/72 DATA(-2, 1)

     + 1/48 DATA(-2, 0) - 1/72 DATA(-2, -1) - 1/288 DATA(2, -2)

     + 1/288 DATA(-2, 2) + 1/9 DATA(-1, -1) - 1/9 DATA(1, -1) - 1/6 DATA(-1, 0)

     + 1/9 DATA(-1, 1) + 1/72 DATA(2, -1) + 1/36 DATA(1, 2) - 1/36 DATA(-1, 2)

                                              4
     + 1/72 DATA(2, 1) - 1/288 DATA(2, 2)) x y  + (- 1/96 DATA(2, 0)

     - 5/16 DATA(0, 0) + 1/6 DATA(1, 0) + 5/24 DATA(0, 1) - 1/9 DATA(1, 1)

     + 1/36 DATA(-1, -2) - 5/96 DATA(0, -2) - 1/576 DATA(-2, -2)

     + 1/36 DATA(1, -2) + 1/144 DATA(-2, 1) - 1/96 DATA(-2, 0)

     + 1/144 DATA(-2, -1) - 1/576 DATA(2, -2) - 1/576 DATA(-2, 2)

     - 1/9 DATA(-1, -1) + 5/24 DATA(0, -1) - 1/9 DATA(1, -1) + 1/6 DATA(-1, 0)

     - 1/9 DATA(-1, 1) + 1/144 DATA(2, -1) + 1/36 DATA(1, 2) - 5/96 DATA(0, 2)

                                                                2  4
     + 1/36 DATA(-1, 2) + 1/144 DATA(2, 1) - 1/576 DATA(2, 2)) x  y  + (

    1/96 DATA(2, 0) + 1/16 DATA(0, 0) - 1/24 DATA(1, 0) - 1/24 DATA(0, 1)

     + 1/36 DATA(1, 1) - 1/144 DATA(-1, -2) + 1/96 DATA(0, -2)

     + 1/576 DATA(-2, -2) - 1/144 DATA(1, -2) - 1/144 DATA(-2, 1)

     + 1/96 DATA(-2, 0) - 1/144 DATA(-2, -1) + 1/576 DATA(2, -2)

     + 1/576 DATA(-2, 2) + 1/36 DATA(-1, -1) - 1/24 DATA(0, -1)

     + 1/36 DATA(1, -1) - 1/24 DATA(-1, 0) + 1/36 DATA(-1, 1)

     - 1/144 DATA(2, -1) - 1/144 DATA(1, 2) + 1/96 DATA(0, 2)

                                                                 4  4
     - 1/144 DATA(-1, 2) - 1/144 DATA(2, 1) + 1/576 DATA(2, 2)) x  y  + (

    - 1/24 DATA(0, 1) + 1/36 DATA(1, 1) + 1/72 DATA(-1, -2) - 1/48 DATA(0, -2)

     - 1/288 DATA(-2, -2) + 1/72 DATA(1, -2) - 1/144 DATA(-2, 1)

     + 1/144 DATA(-2, -1) - 1/288 DATA(2, -2) + 1/288 DATA(-2, 2)

     - 1/36 DATA(-1, -1) + 1/24 DATA(0, -1) - 1/36 DATA(1, -1)

     + 1/36 DATA(-1, 1) + 1/144 DATA(2, -1) - 1/72 DATA(1, 2) + 1/48 DATA(0, 2)

                                                                4  3
     - 1/72 DATA(-1, 2) - 1/144 DATA(2, 1) + 1/288 DATA(2, 2)) x  y  + (

    - 5/96 DATA(2, 0) - 5/16 DATA(0, 0) + 5/24 DATA(1, 0) + 1/6 DATA(0, 1)

     - 1/9 DATA(1, 1) + 1/144 DATA(-1, -2) - 1/96 DATA(0, -2)

     - 1/576 DATA(-2, -2) + 1/144 DATA(1, -2) + 1/36 DATA(-2, 1)

     - 5/96 DATA(-2, 0) + 1/36 DATA(-2, -1) - 1/576 DATA(2, -2)

     - 1/576 DATA(-2, 2) - 1/9 DATA(-1, -1) + 1/6 DATA(0, -1) - 1/9 DATA(1, -1)

     + 5/24 DATA(-1, 0) - 1/9 DATA(-1, 1) + 1/36 DATA(2, -1) + 1/144 DATA(1, 2)

     - 1/96 DATA(0, 2) + 1/144 DATA(-1, 2) + 1/36 DATA(2, 1) - 1/576 DATA(2, 2)

       4  2
    ) x  y  + (1/6 DATA(0, 1) - 1/9 DATA(1, 1) - 1/72 DATA(-1, -2)

     + 1/48 DATA(0, -2) + 1/288 DATA(-2, -2) - 1/72 DATA(1, -2)

     + 1/36 DATA(-2, 1) - 1/36 DATA(-2, -1) + 1/288 DATA(2, -2)

     - 1/288 DATA(-2, 2) + 1/9 DATA(-1, -1) - 1/6 DATA(0, -1) + 1/9 DATA(1, -1)

     - 1/9 DATA(-1, 1) - 1/36 DATA(2, -1) + 1/72 DATA(1, 2) - 1/48 DATA(0, 2)

                                                               4
     + 1/72 DATA(-1, 2) + 1/36 DATA(2, 1) - 1/288 DATA(2, 2)) x  y +

    (- 1/12 DATA(2, 0) + 2/3 DATA(1, 0) + 1/12 DATA(-2, 0) - 2/3 DATA(-1, 0)) x

     + (- 5/4 DATA(0, 0) + 2/3 DATA(0, 1) - 1/24 DATA(0, -2) + 2/3 DATA(0, -1)

                         2
     - 1/24 DATA(0, 2)) y  + (- 1/24 DATA(2, 0) - 5/4 DATA(0, 0)

                                                             2
     + 2/3 DATA(1, 0) - 1/24 DATA(-2, 0) + 2/3 DATA(-1, 0)) x  +

    (- 1/6 DATA(0, 1) - 1/12 DATA(0, -2) + 1/6 DATA(0, -1) + 1/12 DATA(0, 2))

     3
    y  +

                                                                             3
    (1/12 DATA(2, 0) - 1/6 DATA(1, 0) - 1/12 DATA(-2, 0) + 1/6 DATA(-1, 0)) x

     + (1/4 DATA(0, 0) - 1/6 DATA(0, 1) + 1/24 DATA(0, -2) - 1/6 DATA(0, -1)

                         4
     + 1/24 DATA(0, 2)) y  + (1/24 DATA(2, 0) + 1/4 DATA(0, 0) - 1/6 DATA(1, 0)

                                            4
     + 1/24 DATA(-2, 0) - 1/6 DATA(-1, 0)) x  +

    (2/3 DATA(0, 1) + 1/12 DATA(0, -2) - 2/3 DATA(0, -1) - 1/12 DATA(0, 2)) y

     + (- 5/6 DATA(0, 1) + 4/9 DATA(1, 1) + 1/18 DATA(-1, -2)

     - 5/48 DATA(0, -2) - 1/288 DATA(-2, -2) + 1/18 DATA(1, -2)

     - 1/36 DATA(-2, 1) + 1/36 DATA(-2, -1) - 1/288 DATA(2, -2)

     + 1/288 DATA(-2, 2) - 4/9 DATA(-1, -1) + 5/6 DATA(0, -1) - 4/9 DATA(1, -1)

     + 4/9 DATA(-1, 1) + 1/36 DATA(2, -1) - 1/18 DATA(1, 2) + 5/48 DATA(0, 2)

                                                               2
     - 1/18 DATA(-1, 2) - 1/36 DATA(2, 1) + 1/288 DATA(2, 2)) x  y

> 
# I
> coeffs_as_lc_of_data(%, posn_list_2d_size5);
bytes used=112097464, alloc=2162292, time=9.40
bytes used=113100880, alloc=2162292, time=9.47
                          4          3  2          2  4          2  3
[COEFF(-2, -2) = 1/288 x y  + 1/288 x  y  - 1/576 x  y  + 1/288 x  y

              4              3          4  2          4  3          4  4
     + 1/288 x  y - 1/144 y x  - 1/576 x  y  - 1/288 x  y  + 1/576 x  y

                3          3  3            2          2
     - 1/144 x y  + 1/144 x  y  - 1/288 x y  - 1/288 x  y + 1/144 x y

              3  4          2  2                          3         4  3
     - 1/288 x  y  + 1/576 x  y , COEFF(-1, -2) = 1/18 x y  + 1/72 x  y

               2         2  3                    3  3         4            3  2
     + 1/36 x y  - 1/18 x  y  - 1/18 x y - 1/72 x  y  - 1/72 x  y - 1/144 x  y

             2             3          4  4           4          4  2
     + 1/18 x  y + 1/72 y x  - 1/144 x  y  - 1/36 x y  + 1/144 x  y

             2  4          3  4         2  2                         2  4
     + 1/36 x  y  + 1/144 x  y  - 1/36 x  y , COEFF(0, -2) = - 5/96 x  y

             4  4         2  3         4  2         4           2
     + 1/96 x  y  + 5/48 x  y  - 1/96 x  y  + 1/48 x  y - 1/24 y  + 1/12 y

             2           3         4  3         2  2         4
     - 5/48 x  y - 1/12 y  - 1/48 x  y  + 5/96 x  y  + 1/24 y , COEFF(1, -2) =

          2             2          3  4          4  4         4            4  2
    1/18 x  y - 1/36 x y  - 1/144 x  y  - 1/144 x  y  - 1/72 x  y + 1/144 x  y

               4                      3         4  3          3  2         2  3
     + 1/36 x y  + 1/18 x y - 1/72 y x  + 1/72 x  y  + 1/144 x  y  - 1/18 x  y

             3  3         2  2           3         2  4
     + 1/72 x  y  - 1/36 x  y  - 1/18 x y  + 1/36 x  y , COEFF(2, -2) =

             3  3            3            2          4  2          2  3
    - 1/144 x  y  + 1/144 x y  + 1/288 x y  - 1/576 x  y  + 1/288 x  y

              4  4            4            3          3  2
     + 1/576 x  y  - 1/288 x y  + 1/144 y x  - 1/288 x  y  - 1/144 x y

              3  4          4            4  3          2  4          2
     + 1/288 x  y  + 1/288 x  y - 1/288 x  y  - 1/576 x  y  - 1/288 x  y

              2  2                          2  2           2
     + 1/576 x  y , COEFF(-2, -1) = - 1/36 x  y  + 1/18 x y  - 1/18 x y

              4  3           4         3  4         3  2          2  3
     + 1/144 x  y  - 1/72 x y  + 1/72 x  y  - 1/18 x  y  - 1/144 x  y

               3           3         3  3         4  2          4  4
     + 1/72 x y  + 1/18 y x  - 1/72 x  y  + 1/36 x  y  - 1/144 x  y

              2  4         2           4                           2  4
     + 1/144 x  y  + 1/36 x  y - 1/36 x  y, COEFF(-1, -1) = - 1/9 x  y

              3         4  3        2  2         3  4          2        2
     - 1/9 x y  - 1/36 x  y  + 4/9 x  y  - 1/36 x  y  - 4/9 x y  - 4/9 x  y

            4          3  2         3  3        4  2          4         4  4
     + 1/9 x  y + 1/9 x  y  + 1/36 x  y  - 1/9 x  y  + 1/9 x y  + 1/36 x  y

              3                  2  3                         2  3        4
     - 1/9 y x  + 4/9 x y + 1/9 x  y , COEFF(0, -1) = - 5/24 x  y  - 1/6 x  y

            2        2  2         2  4         4  4        3         4  3
     + 2/3 y  - 5/6 x  y  + 5/24 x  y  - 1/24 x  y  + 1/6 y  + 1/24 x  y

            2          4  2                4                        2
     + 5/6 x  y + 1/6 x  y  - 2/3 y - 1/6 y , COEFF(1, -1) = - 4/9 x  y

                        4        4            3        4  2         4  4
     - 4/9 x y - 1/9 x y  + 1/9 x  y + 1/9 y x  - 1/9 x  y  + 1/36 x  y

            2  4         4  3        3  2         3  3          3         3  4
     - 1/9 x  y  - 1/36 x  y  - 1/9 x  y  - 1/36 x  y  + 1/9 x y  + 1/36 x  y

            2  2        2  3          2                           3
     + 4/9 x  y  + 1/9 x  y  + 4/9 x y , COEFF(2, -1) = - 1/72 x y

             2  2          2  4         3  4           4          4  4
     - 1/36 x  y  + 1/144 x  y  - 1/72 x  y  + 1/72 x y  - 1/144 x  y

             3  2         2                        3          4  3           2
     + 1/18 x  y  + 1/36 x  y + 1/18 x y - 1/18 y x  + 1/144 x  y  - 1/18 x y

             3  3         4           4  2          2  3
     + 1/72 x  y  - 1/36 x  y + 1/36 x  y  - 1/144 x  y , COEFF(-2, 0) =

            4  2         2  4         3  2         2  2         4         3  4
    - 5/96 x  y  - 1/96 x  y  + 5/48 x  y  + 5/96 x  y  + 1/24 x  - 1/48 x  y

                        4         2         4  4         3           2
     + 1/12 x + 1/48 x y  - 1/24 x  + 1/96 x  y  - 1/12 x  - 5/48 x y ,

                         4  2          2         3  4          4        2  4
    COEFF(-1, 0) = 5/24 x  y  + 5/6 x y  + 1/24 x  y  - 1/6 x y  + 1/6 x  y

             3  2                4        3        2         4  4        2  2
     - 5/24 x  y  - 2/3 x - 1/6 x  + 1/6 x  + 2/3 x  - 1/24 x  y  - 5/6 x  y ,

                  25  2  2        4        4        2         4  4
    COEFF(0, 0) = -- x  y  + 1/4 x  + 1/4 y  - 5/4 y  + 1/16 x  y  + 1
                  16

             2  4        2         4  2                       4
     - 5/16 x  y  - 5/4 x  - 5/16 x  y , COEFF(1, 0) = - 1/6 x  + 2/3 x

             3  2        3          2          4        2  2        2  4
     + 5/24 x  y  - 1/6 x  - 5/6 x y  + 1/6 x y  - 5/6 x  y  + 1/6 x  y

             4  4        2         3  4         4  2                      3  4
     - 1/24 x  y  + 2/3 x  - 1/24 x  y  + 5/24 x  y , COEFF(2, 0) = 1/48 x  y

               4         3  2                  2  2         2         4  2
     - 1/48 x y  - 5/48 x  y  - 1/12 x + 5/96 x  y  - 1/24 x  - 5/96 x  y

             2  4         4         4  4         3           2
     - 1/96 x  y  + 1/24 x  + 1/96 x  y  + 1/12 x  + 5/48 x y , COEFF(-2, 1) =

             4  3         3  2           2          2  4         3  4
    - 1/144 x  y  - 1/18 x  y  + 1/18 x y  + 1/144 x  y  + 1/72 x  y

               4         2  2          4  4         4  2         2
     - 1/72 x y  - 1/36 x  y  - 1/144 x  y  + 1/36 x  y  - 1/36 x  y + 1/18 x y

               3         4            2  3           3         3  3
     - 1/18 y x  + 1/36 x  y + 1/144 x  y  - 1/72 x y  + 1/72 x  y ,

                          3        2  2         4  3        4          4  2
    COEFF(-1, 1) = 1/9 x y  + 4/9 x  y  + 1/36 x  y  - 1/9 x  y - 1/9 x  y

             3  4          4                  2  3        2  4        2
     - 1/36 x  y  + 1/9 x y  - 4/9 x y - 1/9 x  y  - 1/9 x  y  + 4/9 x  y

              2          3         4  4        3  2         3  3
     - 4/9 x y  + 1/9 y x  + 1/36 x  y  + 1/9 x  y  - 1/36 x  y , COEFF(0, 1)

             2  3         2  4        4           4  4        4  2
     = 5/24 x  y  + 5/24 x  y  + 1/6 x  y - 1/24 x  y  + 1/6 x  y  + 2/3 y

            2         4  3        2  2        2          4        3
     + 2/3 y  - 1/24 x  y  - 5/6 x  y  - 5/6 x  y - 1/6 y  - 1/6 y ,

                         2        2  3          3         4  3          4
    COEFF(1, 1) = 4/9 x y  - 1/9 x  y  - 1/9 y x  + 1/36 x  y  - 1/9 x y

            2  4                  4          2          2  2          3
     - 1/9 x  y  + 4/9 x y - 1/9 x  y + 4/9 x  y + 4/9 x  y  - 1/9 x y

            3  2         3  4        4  2         4  4         3  3
     - 1/9 x  y  + 1/36 x  y  - 1/9 x  y  + 1/36 x  y  + 1/36 x  y ,

                            2         2           2  2         3  4           3
    COEFF(2, 1) = - 1/18 x y  - 1/36 x  y - 1/36 x  y  - 1/72 x  y  + 1/72 x y

              2  3          2  4          4  4                      3
     + 1/144 x  y  + 1/144 x  y  - 1/144 x  y  - 1/18 x y + 1/18 y x

             4            4  3         4  2           4         3  2
     + 1/36 x  y - 1/144 x  y  + 1/36 x  y  + 1/72 x y  + 1/18 x  y

             3  3                          2  3          3  2          2
     - 1/72 x  y , COEFF(-2, 2) = - 1/288 x  y  + 1/288 x  y  + 1/288 x  y

              4  2          4  3          2  2          3  3            2
     - 1/576 x  y  + 1/288 x  y  + 1/576 x  y  - 1/144 x  y  - 1/288 x y

                4            3          4  4          2  4          3  4
     + 1/288 x y  + 1/144 x y  + 1/576 x  y  - 1/576 x  y  - 1/288 x  y

                            3          4                         2  3
     - 1/144 x y + 1/144 y x  - 1/288 x  y, COEFF(-1, 2) = 1/18 x  y

               2         2           2  4          3  2         4
     + 1/36 x y  - 1/18 x  y + 1/36 x  y  - 1/144 x  y  + 1/72 x  y + 1/18 x y

               4         3  3          4  4         2  2          4  2
     - 1/36 x y  + 1/72 x  y  - 1/144 x  y  - 1/36 x  y  + 1/144 x  y

              3  4         4  3           3           3
     + 1/144 x  y  - 1/72 x  y  - 1/72 y x  - 1/18 x y , COEFF(0, 2) =

            2         2           4  3         2  4         2  3         4
    - 1/24 y  + 5/48 x  y + 1/48 x  y  - 5/96 x  y  - 5/48 x  y  - 1/48 x  y

             2  2         4         4  2         4  4                  3
     + 5/96 x  y  + 1/24 y  - 1/96 x  y  + 1/96 x  y  - 1/12 y + 1/12 y ,

                            2         2           3  3         4  3
    COEFF(1, 2) = - 1/36 x y  - 1/18 x  y - 1/72 x  y  - 1/72 x  y

             2  3           3          3  2         4           2  4
     + 1/18 x  y  + 1/72 y x  + 1/144 x  y  + 1/72 x  y + 1/36 x  y

             2  2          4  2           4                     4  4
     - 1/36 x  y  + 1/144 x  y  + 1/36 x y  - 1/18 x y - 1/144 x  y

               3          3  4                         2
     + 1/18 x y  - 1/144 x  y , COEFF(2, 2) = 1/288 x y  + 1/144 x y

              2              3          3  3          4  3          2  3
     + 1/288 x  y - 1/144 x y  + 1/144 x  y  + 1/288 x  y  - 1/288 x  y

                3          3  2          4            2  4          2  2
     - 1/144 y x  - 1/288 x  y  - 1/288 x  y - 1/576 x  y  + 1/576 x  y

              4  2            4          4  4          3  4
     - 1/576 x  y  - 1/288 x y  + 1/576 x  y  + 1/288 x  y ]

> print_coeffs__lc_of_data(%, "coeffs_I->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order4.smooth0/coeffs-I.compute.c");
bytes used=114101652, alloc=2162292, time=9.53
bytes used=115101832, alloc=2162292, time=9.61
bytes used=116102056, alloc=2162292, time=9.69
bytes used=117102244, alloc=2162292, time=9.78
bytes used=118131284, alloc=2227816, time=9.83
bytes used=119154420, alloc=2227816, time=9.90
bytes used=120164760, alloc=2227816, time=9.97
bytes used=121164952, alloc=2227816, time=10.06
bytes used=122175640, alloc=2227816, time=10.13
bytes used=123176060, alloc=2227816, time=10.21
bytes used=124176236, alloc=2227816, time=10.29
bytes used=125176400, alloc=2227816, time=10.50
bytes used=126176560, alloc=2227816, time=10.57
bytes used=127176800, alloc=2227816, time=10.63
bytes used=128177176, alloc=2227816, time=10.70
bytes used=129177356, alloc=2227816, time=10.77
bytes used=130177716, alloc=2227816, time=10.84
bytes used=131178028, alloc=2227816, time=10.93
bytes used=132178292, alloc=2227816, time=11.04
bytes used=133185136, alloc=2227816, time=11.13
bytes used=134190992, alloc=2227816, time=11.23
bytes used=135191144, alloc=2227816, time=11.34
bytes used=136191488, alloc=2227816, time=11.43
bytes used=137193928, alloc=2227816, time=11.65
bytes used=138194092, alloc=2227816, time=11.82
bytes used=139194244, alloc=2227816, time=11.90
bytes used=140195388, alloc=2227816, time=11.98
bytes used=141195552, alloc=2227816, time=12.11
bytes used=142206928, alloc=2227816, time=12.22
bytes used=143211972, alloc=2227816, time=12.45
bytes used=144212152, alloc=2227816, time=12.64
bytes used=145212704, alloc=2227816, time=12.71
bytes used=146212940, alloc=2227816, time=12.79
bytes used=147213192, alloc=2293340, time=12.92
bytes used=148214044, alloc=2293340, time=13.15
bytes used=149214284, alloc=2293340, time=13.28
bytes used=150214448, alloc=2293340, time=13.35
bytes used=151214644, alloc=2293340, time=13.46
bytes used=152214864, alloc=2293340, time=13.72
bytes used=153215032, alloc=2293340, time=13.83
> 
# d/dx
> simplify( diff(interp_2d_cube_order4_smooth0,x) );
bytes used=154215192, alloc=2293340, time=13.99
bytes used=155215412, alloc=2358864, time=14.05
bytes used=156215588, alloc=2358864, time=14.12
bytes used=157216804, alloc=2358864, time=14.19
bytes used=158217188, alloc=2424388, time=14.26
bytes used=159217368, alloc=2555436, time=14.33
- 1/12 DATA(2, 0) + 2/3 DATA(1, 0) + 1/12 DATA(-2, 0) - 2/3 DATA(-1, 0)

     - 8/9 x y DATA(1, -1) + 1/9 x y DATA(1, -2) - 1/18 x y DATA(-2, 1)

     + 1/18 x y DATA(-2, -1) - 1/144 x y DATA(2, -2) + 1/144 x y DATA(-2, 2)

                                    2  4
     - 8/9 x y DATA(-1, -1) + 1/16 x  y  DATA(2, 0) - 1/18 x y DATA(2, 1)

     + 1/144 x y DATA(2, 2) + 5/3 x y DATA(0, -1) + 8/9 x y DATA(-1, 1)

     + 1/18 x y DATA(2, -1) - 1/9 x y DATA(1, 2) + 5/24 x y DATA(0, 2)

     + 1/18 y DATA(-2, 1) - 1/18 y DATA(-2, -1) - 1/144 y DATA(2, -2)

     - 1/144 y DATA(-2, 2) + 4/9 y DATA(-1, -1) - 4/9 y DATA(1, -1)

                                                      2  4
     - 4/9 y DATA(-1, 1) + 1/18 y DATA(2, -1) - 1/48 x  y  DATA(1, -2)

             2  4                     2  4
     + 1/24 x  y  DATA(-2, 1) - 1/16 x  y  DATA(-2, 0)

             2  4                      2  4
     + 1/24 x  y  DATA(-2, -1) + 1/96 x  y  DATA(2, -2)

             2  4
     - 1/96 x  y  DATA(-2, 2) - 1/9 x y DATA(-1, 2) + 4/9 y DATA(1, 1)

             2  4                    2  4                     2  4
     - 1/48 x  y  DATA(1, 2) + 1/48 x  y  DATA(-1, 2) - 1/24 x  y  DATA(2, 1)

             2  4                     2                      2
     + 1/96 x  y  DATA(2, 2) - 5/3 x y  DATA(0, 1) + 5/48 x y  DATA(0, -2)

              2                       2                      2
     - 5/3 x y  DATA(0, -1) + 5/48 x y  DATA(0, 2) + 25/8 x y  DATA(0, 0)

                                   2                     2
     - 1/18 y DATA(-1, -2) - 1/18 y  DATA(2, -1) - 1/36 y  DATA(1, 2)

             2                     2
     + 1/36 y  DATA(-1, 2) - 1/18 y  DATA(2, 1) + 1/18 y DATA(-1, 2)

     - 1/18 y DATA(2, 1) - 1/18 y DATA(1, 2) + 1/144 y DATA(-2, -2)

                                   2                    2
     + 1/18 y DATA(1, -2) + 1/288 y  DATA(2, -2) - 4/9 y  DATA(-1, -1)

            2                    2                    2
     + 4/9 y  DATA(1, -1) + 5/6 y  DATA(-1, 0) - 4/9 y  DATA(-1, 1)

              2                    2                    2
     - 1/288 y  DATA(-2, 2) - 5/6 y  DATA(1, 0) + 1/36 y  DATA(-1, -2)

              2                      2                     2
     - 1/288 y  DATA(-2, -2) - 1/36 y  DATA(1, -2) + 1/18 y  DATA(-2, 1)

             2                     2                     2
     - 5/48 y  DATA(-2, 0) + 1/18 y  DATA(-2, -1) + 4/9 y  DATA(1, 1)

            3                     3                      2
     + 1/9 y  DATA(1, -1) - 1/72 y  DATA(2, -1) + 1/288 y  DATA(2, 2)

             2                                        3
     + 5/48 y  DATA(2, 0) + 1/144 y DATA(2, 2) + 1/9 y  DATA(-1, 1)

            3                    3                       3
     - 1/9 y  DATA(1, 1) + 1/18 y  DATA(-1, -2) - 1/144 y  DATA(-2, -2)

             3                     3                     3
     - 1/18 y  DATA(1, -2) - 1/72 y  DATA(-2, 1) + 1/72 y  DATA(-2, -1)

              3                      3                    3
     + 1/144 y  DATA(2, -2) + 1/144 y  DATA(-2, 2) - 1/9 y  DATA(-1, -1)

             2  4                        2                      2
     - 1/12 x  y  DATA(-1, -1) - 1/18 x y  DATA(1, 2) - 1/18 x y  DATA(2, 1)

                2                    2  4                    2  4
     + 1/288 x y  DATA(2, 2) + 1/12 x  y  DATA(1, -1) + 1/8 x  y  DATA(-1, 0)

             2  4                     2  4                      2
     - 1/12 x  y  DATA(-1, 1) - 1/24 x  y  DATA(2, -1) - 5/3 x y  DATA(-1, 0)

              2                       2                       2
     + 8/9 x y  DATA(-1, 1) - 1/18 x y  DATA(2, -1) + 5/48 x y  DATA(2, 0)

              2                     2                      2
     - 5/3 x y  DATA(1, 0) + 8/9 x y  DATA(1, 1) - 1/18 x y  DATA(-1, -2)

                2                        2                       2
     + 1/288 x y  DATA(-2, -2) - 1/18 x y  DATA(1, -2) - 1/18 x y  DATA(-2, 1)

               2                      2                       2
     + 5/48 x y  DATA(-2, 0) + 8/9 x y  DATA(-1, -1) + 8/9 x y  DATA(1, -1)

              3                       2                         2
     - 1/9 x y  DATA(1, -2) - 1/18 x y  DATA(-2, -1) + 1/288 x y  DATA(2, -2)

                2                       2                      3
     + 1/288 x y  DATA(-2, 2) - 1/18 x y  DATA(-1, 2) - 2/9 x y  DATA(1, 1)

              3                        3                        3
     - 1/9 x y  DATA(-1, -2) + 5/24 x y  DATA(0, -2) + 1/144 x y  DATA(-2, -2)

              3                        3                      3
     + 2/9 x y  DATA(-1, -1) - 5/12 x y  DATA(0, -1) + 2/9 x y  DATA(1, -1)

               3                        3                      3
     - 1/72 x y  DATA(-2, -1) + 5/12 x y  DATA(0, 1) - 5/24 x y  DATA(0, 2)

              3                       3                      3
     + 1/9 x y  DATA(-1, 2) + 1/72 x y  DATA(2, 1) + 1/72 x y  DATA(-2, 1)

                3                        3                     3
     + 1/144 x y  DATA(2, -2) - 1/144 x y  DATA(-2, 2) + 1/18 y  DATA(1, 2)

             2  3                     2  3                     2  3
     - 1/12 x  y  DATA(1, -1) - 1/12 x  y  DATA(-1, 1) + 1/24 x  y  DATA(2, -1)

             2  3                    2  3                         3
     - 1/24 x  y  DATA(1, 2) + 1/12 x  y  DATA(-1, -1) - 1/144 x y  DATA(2, 2)

             2  3                    2  3
     + 1/12 x  y  DATA(1, 1) - 1/24 x  y  DATA(-1, -2)

             2  3                      2  3
     + 1/48 x  y  DATA(-2, -2) + 1/24 x  y  DATA(1, -2)

             2  3                     2  3
     + 1/24 x  y  DATA(-2, 1) - 1/24 x  y  DATA(-2, -1)

             2  3                      3                       3
     - 1/48 x  y  DATA(2, -2) - 2/9 x y  DATA(-1, 1) - 1/72 x y  DATA(2, -1)

              3                    3                    2  3
     + 1/9 x y  DATA(1, 2) + 1/72 y  DATA(2, 1) + 1/24 x  y  DATA(-1, 2)

             2  3                   2  2                   2  2
     + 1/48 x  y  DATA(2, 2) + 5/8 x  y  DATA(1, 0) - 1/3 x  y  DATA(1, 1)

             2  3                     2  3                    2  2
     - 1/48 x  y  DATA(-2, 2) - 1/24 x  y  DATA(2, 1) - 1/96 x  y  DATA(2, -2)

             2  2                    2  2                     2  2
     + 1/96 x  y  DATA(-2, 2) + 1/3 x  y  DATA(-1, -1) - 1/3 x  y  DATA(1, -1)

            2  2                    2  2                     2  2
     - 5/8 x  y  DATA(-1, 0) + 1/3 x  y  DATA(-1, 1) - 5/16 x  y  DATA(2, 0)

             2                       2  2                    2  2
     + 1/48 x  y DATA(-2, 2) + 1/48 x  y  DATA(1, 2) - 1/48 x  y  DATA(-1, -2)

             2  2                      2  2                    2  2
     + 1/96 x  y  DATA(-2, -2) + 1/48 x  y  DATA(1, -2) - 1/6 x  y  DATA(-2, 1)

             2  2                    2  2                       3
     + 5/16 x  y  DATA(-2, 0) - 1/6 x  y  DATA(-2, -1) - 1/144 y  DATA(2, 2)

             2                      2                      2
     - 1/24 x  y DATA(1, -2) - 1/6 x  y DATA(-2, 1) + 1/6 x  y DATA(-2, -1)

             2                      4                   4
     + 1/48 x  y DATA(2, -2) + 1/6 y  DATA(1, 0) - 1/9 y  DATA(1, 1)

             4                       4                      4
     - 1/36 y  DATA(-1, -2) + 1/288 y  DATA(-2, -2) + 1/36 y  DATA(1, -2)

             4                     4                     4
     - 1/72 y  DATA(-2, 1) + 1/48 y  DATA(-2, 0) - 1/72 y  DATA(-2, -1)

              4                     3                    2
     - 1/288 y  DATA(2, -2) - 1/18 y  DATA(-1, 2) - 1/3 x  y DATA(-1, -1)

            2                      2                      2
     + 1/3 x  y DATA(1, -1) + 1/3 x  y DATA(-1, 1) - 1/6 x  y DATA(2, -1)

            2  2                     2  2                    2  2
     + 1/6 x  y  DATA(2, -1) - 1/48 x  y  DATA(-1, 2) + 1/6 x  y  DATA(2, 1)

             2  2                   2                      2
     - 1/96 x  y  DATA(2, 2) - 1/3 x  y DATA(1, 1) + 1/24 x  y DATA(-1, -2)

             2                       4                     4
     - 1/48 x  y DATA(-2, -2) - 1/6 y  DATA(-1, 0) + 1/36 y  DATA(1, 2)

             4                     4                   4
     - 1/36 y  DATA(-1, 2) + 1/72 y  DATA(2, 1) + 1/9 y  DATA(-1, 1)

             4                    4                      4
     - 1/48 y  DATA(2, 0) + 1/72 y  DATA(2, -1) - 2/9 x y  DATA(-1, -1)

             2                     2                      2
     + 1/24 x  y DATA(1, 2) + 1/6 x  y DATA(2, 1) - 1/48 x  y DATA(2, 2)

             2                         4                      4
     - 1/24 x  y DATA(-1, 2) + 1/18 x y  DATA(-1, 2) + 1/3 x y  DATA(-1, 0)

              4                       4                       4
     - 2/9 x y  DATA(-1, 1) + 1/72 x y  DATA(2, -1) - 1/48 x y  DATA(2, 0)

               4                      4                       4
     + 5/12 x y  DATA(0, 1) - 5/48 x y  DATA(0, -2) + 5/12 x y  DATA(0, -1)

               4                     4                     4
     - 5/48 x y  DATA(0, 2) - 5/8 x y  DATA(0, 0) - 1/288 y  DATA(2, 2)

               4                       4                         4
     - 1/48 x y  DATA(-2, 0) + 1/72 x y  DATA(-2, -1) - 1/288 x y  DATA(2, -2)

                4                    3  4                    3  4
     - 1/288 x y  DATA(-2, 2) - 1/6 x  y  DATA(0, 1) + 1/24 x  y  DATA(0, -2)

            3  4                      4                       4
     - 1/6 x  y  DATA(0, -1) - 2/9 x y  DATA(1, -1) + 1/18 x y  DATA(1, 2)

               4                       4                    3  4
     + 1/72 x y  DATA(2, 1) - 1/288 x y  DATA(2, 2) + 1/24 x  y  DATA(2, 0)

            3  4                   3  4                     4
     - 1/6 x  y  DATA(1, 0) + 1/9 x  y  DATA(1, 1) + 1/3 x y  DATA(1, 0)

              4                      4                         4
     - 2/9 x y  DATA(1, 1) + 1/18 x y  DATA(-1, -2) - 1/288 x y  DATA(-2, -2)

               4                       4                     3  4
     + 1/18 x y  DATA(1, -2) + 1/72 x y  DATA(-2, 1) - 1/36 x  y  DATA(-2, 1)

             3  4                   3  4                   3  4
     + 1/24 x  y  DATA(0, 2) + 1/4 x  y  DATA(0, 0) + 1/9 x  y  DATA(-1, -1)

            3  4                     3  4                    3  4
     + 1/9 x  y  DATA(1, -1) - 1/36 x  y  DATA(1, 2) - 1/36 x  y  DATA(2, 1)

              3  4                    3  4                    3  4
     + 1/144 x  y  DATA(2, 2) - 1/36 x  y  DATA(-1, 2) - 1/6 x  y  DATA(-1, 0)

            3  4                     3  4                     3  3
     + 1/9 x  y  DATA(-1, 1) - 1/36 x  y  DATA(2, -1) + 1/18 x  y  DATA(-1, -2)

             3  3                     3  4
     - 1/12 x  y  DATA(0, -2) - 1/36 x  y  DATA(-1, -2)

              3  4                      3  4
     + 1/144 x  y  DATA(-2, -2) - 1/36 x  y  DATA(1, -2)

             3  4                      3  4
     + 1/24 x  y  DATA(-2, 0) + 1/144 x  y  DATA(2, -2)

              3  4                    3  3                   3  3
     + 1/144 x  y  DATA(-2, 2) - 1/6 x  y  DATA(0, 1) + 1/9 x  y  DATA(1, 1)

             3  4                      3  3
     - 1/36 x  y  DATA(-2, -1) + 1/18 x  y  DATA(1, -2)

             3  3                      3  3
     + 1/36 x  y  DATA(-2, -1) - 1/72 x  y  DATA(2, -2)

             3  3                    3  3                     3  3
     + 1/72 x  y  DATA(-2, 2) - 1/9 x  y  DATA(-1, -1) + 1/6 x  y  DATA(0, -1)

            3  3                     3  3                    3  3
     - 1/9 x  y  DATA(1, -1) - 1/36 x  y  DATA(-2, 1) + 1/9 x  y  DATA(-1, 1)

             3  3                    3  3                    3  3
     - 1/18 x  y  DATA(1, 2) + 1/12 x  y  DATA(0, 2) - 1/18 x  y  DATA(-1, 2)

             3  3                    3  3                    3  2
     - 1/36 x  y  DATA(2, 1) + 1/72 x  y  DATA(2, 2) - 1/24 x  y  DATA(0, -2)

            3  2                     3  2                   3  2
     + 2/3 x  y  DATA(0, -1) - 1/24 x  y  DATA(0, 2) - 5/4 x  y  DATA(0, 0)

            3  2                     3  2                     3  3
     - 4/9 x  y  DATA(-1, -1) - 4/9 x  y  DATA(1, -1) - 1/72 x  y  DATA(-2, -2)

             3  3                     3  2                    3  2
     + 1/36 x  y  DATA(2, -1) - 5/24 x  y  DATA(-2, 0) + 1/9 x  y  DATA(-2, -1)

              3  2                      3  2
     - 1/144 x  y  DATA(2, -2) - 1/144 x  y  DATA(-2, 2)

             3  2                     3  2                    3  2
     + 1/36 x  y  DATA(1, 2) - 1/144 x  y  DATA(2, 2) + 1/36 x  y  DATA(-1, 2)

            3  2                    3  2                    3  2
     + 5/6 x  y  DATA(-1, 0) - 4/9 x  y  DATA(-1, 1) + 1/9 x  y  DATA(2, 1)

            3  2                      3                       3
     + 2/3 x  y  DATA(0, 1) + 1/72 y x  DATA(2, -2) - 1/72 y x  DATA(-2, 2)

              3                   3  2                     3  2
     - 4/9 y x  DATA(1, 1) + 1/9 x  y  DATA(2, -1) - 5/24 x  y  DATA(2, 0)

            3  2                   3  2                    3  2
     + 5/6 x  y  DATA(1, 0) - 4/9 x  y  DATA(1, 1) + 1/36 x  y  DATA(-1, -2)

              3  2                      3  2
     - 1/144 x  y  DATA(-2, -2) + 1/36 x  y  DATA(1, -2)

            3  2                       3                     3
     + 1/9 x  y  DATA(-2, 1) - 1/12 y x  DATA(0, 2) + 1/9 y x  DATA(2, 1)

              3                      3                        3
     + 2/3 y x  DATA(0, 1) - 1/18 y x  DATA(-1, -2) + 1/12 y x  DATA(0, -2)

               3                        3                      3
     + 1/72 y x  DATA(-2, -2) - 1/18 y x  DATA(1, -2) + 1/9 y x  DATA(-2, 1)

              3                        3                      3
     - 1/9 y x  DATA(-2, -1) + 1/18 y x  DATA(-1, 2) + 4/9 y x  DATA(1, -1)

              3                      3                       3
     - 4/9 y x  DATA(-1, 1) - 1/9 y x  DATA(2, -1) + 1/18 y x  DATA(1, 2)

            2                    3               3
     + 1/2 x  DATA(-1, 0) + 1/6 x  DATA(2, 0) + x  DATA(0, 0)

            3                    2  4                    2  4
     - 2/3 x  DATA(1, 0) + 1/12 x  y  DATA(1, 1) + 1/48 x  y  DATA(-1, -2)

             2  4                     2  4
     - 1/96 x  y  DATA(-2, -2) - 1/8 x  y  DATA(1, 0) - 5/3 x y DATA(0, 1)

               3
     - 1/72 y x  DATA(2, 2) + 8/9 x y DATA(1, 1) + 1/9 x y DATA(-1, -2)

                                                              3
     - 5/24 x y DATA(0, -2) - 1/144 x y DATA(-2, -2) + 4/9 y x  DATA(-1, -1)

              3                    3
     - 2/3 y x  DATA(0, -1) - 2/3 x  DATA(-1, 0) - 1/12 x DATA(2, 0)

     + 4/3 x DATA(1, 0) - 1/12 x DATA(-2, 0) + 4/3 x DATA(-1, 0)

            2                   2                   2
     + 1/4 x  DATA(2, 0) - 1/2 x  DATA(1, 0) - 1/4 x  DATA(-2, 0)

                                 4                    4
     - 5/2 x DATA(0, 0) + 1/288 y  DATA(-2, 2) + 1/9 y  DATA(-1, -1)

            4                    3
     - 1/9 y  DATA(1, -1) + 1/6 x  DATA(-2, 0)

> coeffs_as_lc_of_data(%, posn_list_2d_size5);
bytes used=160217692, alloc=2555436, time=14.40
bytes used=161220340, alloc=2555436, time=14.46
                        4          2         2  2                        4
[COEFF(-2, -2) = 1/288 y  - 1/288 y  + 1/96 x  y  - 1/144 x y - 1/288 x y

             2  3            2                     3         3  3         2  4
     + 1/48 x  y  + 1/288 x y  + 1/144 y + 1/72 y x  - 1/72 x  y  - 1/96 x  y

                3          3  4          3         2            3  2
     + 1/144 x y  + 1/144 x  y  - 1/144 y  - 1/48 x  y - 1/144 x  y ,

                              3          3           2         2  2         2
    COEFF(-1, -2) = - 1/18 y x  - 1/9 x y  - 1/18 x y  - 1/48 x  y  + 1/24 x  y

             3  4         3         2  3         3  2                   3  3
     - 1/36 x  y  + 1/18 y  - 1/24 x  y  + 1/36 x  y  + 1/9 x y + 1/18 x  y

             2  4         2           4                  4
     + 1/48 x  y  + 1/36 y  + 1/18 x y  - 1/18 y - 1/36 y , COEFF(0, -2) =

                       3  2         3  4           2         3  3           4
    - 5/24 x y - 1/24 x  y  + 1/24 x  y  + 5/48 x y  - 1/12 x  y  - 5/48 x y

               3           3                       3  2         2
     + 5/24 x y  + 1/12 y x , COEFF(1, -2) = 1/36 x  y  - 1/24 x  y + 1/9 x y

               2         4         3         2         2  3         3  3
     - 1/18 x y  + 1/36 y  - 1/18 y  - 1/36 y  + 1/24 x  y  + 1/18 x  y

             2  4         2  2           4                   3           3
     - 1/48 x  y  + 1/48 x  y  + 1/18 x y  + 1/18 y - 1/9 x y  - 1/18 y x

             3  4                         2  2          2            2
     - 1/36 x  y , COEFF(2, -2) = - 1/96 x  y  + 1/288 y  + 1/288 x y

                         2            3  4            3         2  4          4
     - 1/144 x y + 1/48 x  y + 1/144 x  y  + 1/144 x y  + 1/96 x  y  - 1/288 y

             3  3          3           3                    3  2            4
     - 1/72 x  y  + 1/144 y  + 1/72 y x  - 1/144 y - 1/144 x  y  - 1/288 x y

             2  3                            3         2  4         2
     - 1/48 x  y , COEFF(-2, -1) = - 1/72 x y  + 1/24 x  y  + 1/18 y

            2  2           4         3  4        3  2         3         4
     - 1/6 x  y  + 1/72 x y  - 1/36 x  y  + 1/9 x  y  + 1/72 y  - 1/72 y

              3                      2                  2  3        2
     - 1/9 y x  + 1/18 x y - 1/18 x y  - 1/18 y - 1/24 x  y  + 1/6 x  y

             3  3                        2  3                  3        2
     + 1/36 x  y , COEFF(-1, -1) = 1/12 x  y  - 8/9 x y - 1/9 y  - 4/9 y

              2          3        3  3          3        3  4         2  4
     + 8/9 x y  + 2/9 x y  - 1/9 x  y  + 4/9 y x  + 1/9 x  y  - 1/12 x  y

            2          2  2        4        3  2          4
     - 1/3 x  y + 1/3 x  y  + 1/9 y  - 4/9 x  y  - 2/9 x y  + 4/9 y,

                             3        3  3                  3  2        3  4
    COEFF(0, -1) = - 5/12 x y  + 1/6 x  y  + 5/3 x y + 2/3 x  y  - 1/6 x  y

              3          2           4                      3          3
     - 2/3 y x  - 5/3 x y  + 5/12 x y , COEFF(1, -1) = 1/9 y  + 4/9 y x

              2        3  3        4        2                    3  2
     + 8/9 x y  - 1/9 x  y  - 1/9 y  + 1/3 x  y - 8/9 x y - 4/9 x  y

            2  2        2         2  3          3                  4
     - 1/3 x  y  + 4/9 y  - 1/12 x  y  + 2/9 x y  - 4/9 y - 2/9 x y

            3  4         2  4                       3  3         3  4
     + 1/9 x  y  + 1/12 x  y , COEFF(2, -1) = 1/36 x  y  - 1/36 x  y

            2          3  2         4          3                  2  3
     - 1/6 x  y + 1/9 x  y  + 1/72 y  - 1/9 y x  + 1/18 y + 1/24 x  y

             2           3           2         3           4         2  4
     - 1/18 y  - 1/72 x y  - 1/18 x y  - 1/72 y  + 1/72 x y  - 1/24 x  y

            2  2                                  4         3  2         2  2
     + 1/6 x  y  + 1/18 x y, COEFF(-2, 0) = 1/48 y  - 5/24 x  y  + 5/16 x  y

             3  4                 3                2        2         2  4
     + 1/24 x  y  - 1/12 x + 1/6 x  + 1/12 - 5/48 y  - 1/4 x  - 1/16 x  y

               4           2                        3        2        2
     - 1/48 x y  + 5/48 x y , COEFF(-1, 0) = - 2/3 x  + 1/2 x  + 5/6 y  - 2/3

            3  4        4          2        3  2        2  2                  4
     - 1/6 x  y  - 1/6 y  - 5/3 x y  + 5/6 x  y  - 5/8 x  y  + 4/3 x + 1/3 x y

            2  4
     + 1/8 x  y ,

                       3  4        3  2                  4    3           2
    COEFF(0, 0) = 1/4 x  y  - 5/4 x  y  - 5/2 x - 5/8 x y  + x  + 25/8 x y ,

                             3  4                2  4        2        3  2
    COEFF(1, 0) = 2/3 - 1/6 x  y  + 4/3 x - 1/8 x  y  - 1/2 x  + 5/6 x  y

              2        4        2        3        2  2          4
     - 5/3 x y  + 1/6 y  - 5/6 y  - 2/3 x  + 5/8 x  y  + 1/3 x y , COEFF(2, 0)

            2                2         2  4        3           2         3  2
     = 1/4 x  - 1/12 + 5/48 y  + 1/16 x  y  + 1/6 x  + 5/48 x y  - 5/24 x  y

             2  2           4                  3  4         4
     - 5/16 x  y  - 1/48 x y  - 1/12 x + 1/24 x  y  - 1/48 y , COEFF(-2, 1) =

         3  2         3           3           4         3  3          3
    1/9 x  y  - 1/72 y  + 1/72 x y  + 1/72 x y  - 1/36 x  y  + 1/9 y x

                          2         4        2           3  4         2  3
     - 1/18 x y - 1/18 x y  - 1/72 y  - 1/6 x  y - 1/36 x  y  + 1/24 x  y

             2  4        2  2         2                               3  4
     + 1/24 x  y  - 1/6 x  y  + 1/18 y  + 1/18 y, COEFF(-1, 1) = 1/9 x  y

             2  3          3          4        3         2  4          2
     - 1/12 x  y  - 2/9 x y  - 2/9 x y  + 1/9 y  - 1/12 x  y  + 8/9 x y

            3  2        2                3  3        4          3        2  2
     - 4/9 x  y  - 4/9 y  - 4/9 y + 1/9 x  y  + 1/9 y  - 4/9 y x  + 1/3 x  y

            2                                 3  2        3  4          3
     + 1/3 x  y + 8/9 x y, COEFF(0, 1) = 2/3 x  y  - 1/6 x  y  + 2/3 y x

               4                     3        3  3          2
     + 5/12 x y  - 5/3 x y + 5/12 x y  - 1/6 x  y  - 5/3 x y , COEFF(1, 1) =

         3  4          3          3         2  4         2  3        2
    1/9 x  y  - 4/9 y x  - 2/9 x y  + 1/12 x  y  + 1/12 x  y  - 1/3 x  y

            2          4        3  2        4                  2  2          2
     + 4/9 y  - 2/9 x y  - 4/9 x  y  - 1/9 y  + 8/9 x y - 1/3 x  y  + 8/9 x y

            3  3                3                          2         3  4
     + 1/9 x  y  + 4/9 y - 1/9 y , COEFF(2, 1) = - 1/18 x y  - 1/36 x  y

             4                   2  2        3  2           4         2  4
     + 1/72 y  - 1/18 x y + 1/6 x  y  + 1/9 x  y  + 1/72 x y  - 1/24 x  y

             2  3         3         3  3           3         2        2
     - 1/24 x  y  + 1/72 y  - 1/36 x  y  + 1/72 x y  - 1/18 y  + 1/6 x  y

                       3                        3  4                        4
     - 1/18 y + 1/9 y x , COEFF(-2, 2) = 1/144 x  y  + 1/144 x y - 1/288 x y

              3           3         2  2            3          3  2          4
     + 1/144 y  - 1/72 y x  + 1/96 x  y  - 1/144 x y  - 1/144 x  y  + 1/288 y

              2         2  3         2              2         3  3         2  4
     - 1/288 y  - 1/48 x  y  + 1/48 x  y + 1/288 x y  + 1/72 x  y  - 1/96 x  y

                                     2  3           4         2  2
     - 1/144 y, COEFF(-1, 2) = 1/24 x  y  + 1/18 x y  - 1/48 x  y  - 1/9 x y

             3  2         2            3           3         3  4         3  3
     + 1/36 x  y  - 1/24 x  y + 1/9 x y  + 1/18 y x  - 1/36 x  y  - 1/18 x  y

             4         2  4           2         3         2
     - 1/36 y  + 1/48 x  y  - 1/18 x y  - 1/18 y  + 1/36 y  + 1/18 y,

                          2           3           3         3  3           4
    COEFF(0, 2) = 5/48 x y  - 5/24 x y  - 1/12 y x  + 1/12 x  y  - 5/48 x y

                        3  2         3  4                        2  3
     + 5/24 x y - 1/24 x  y  + 1/24 x  y , COEFF(1, 2) = - 1/24 x  y

             2           2  4           4         2         3  3           2
     + 1/24 x  y - 1/48 x  y  + 1/18 x y  - 1/36 y  - 1/18 x  y  - 1/18 x y

             3  4          3         2  2         3  2         4           3
     - 1/36 x  y  + 1/9 x y  + 1/48 x  y  + 1/36 x  y  + 1/36 y  + 1/18 y x

                       3                                            3
     - 1/9 x y + 1/18 y  - 1/18 y, COEFF(2, 2) = 1/144 x y - 1/144 y

             2  3         2              3            2         2  2
     + 1/48 x  y  - 1/48 x  y - 1/144 x y  + 1/288 x y  - 1/96 x  y

             2  4          4            4          3  4          3  2
     + 1/96 x  y  - 1/288 y  - 1/288 x y  + 1/144 x  y  - 1/144 x  y

               3          2                   3  3
     - 1/72 y x  + 1/288 y  + 1/144 y + 1/72 x  y ]

> print_coeffs__lc_of_data(%, "coeffs_dx->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order4.smooth0/coeffs-dx.compute.c");
bytes used=162221044, alloc=2555436, time=14.53
bytes used=163221308, alloc=2555436, time=14.59
bytes used=164221544, alloc=2555436, time=14.67
bytes used=165221800, alloc=2555436, time=14.73
bytes used=166239580, alloc=2555436, time=14.80
bytes used=167242068, alloc=2555436, time=14.88
bytes used=168245660, alloc=2555436, time=14.97
bytes used=169245812, alloc=2555436, time=15.05
bytes used=170246364, alloc=2555436, time=15.12
bytes used=171246540, alloc=2555436, time=15.43
bytes used=172246700, alloc=2555436, time=15.49
bytes used=173246972, alloc=2555436, time=15.56
bytes used=174247380, alloc=2555436, time=15.62
bytes used=175247548, alloc=2555436, time=15.70
bytes used=176247780, alloc=2555436, time=15.79
bytes used=177248000, alloc=2555436, time=15.88
bytes used=178248256, alloc=2555436, time=15.97
bytes used=179248500, alloc=2555436, time=16.05
bytes used=180249440, alloc=2555436, time=16.14
bytes used=181255164, alloc=2555436, time=16.41
bytes used=182255372, alloc=2555436, time=16.60
bytes used=183255564, alloc=2555436, time=16.67
bytes used=184258252, alloc=2555436, time=16.77
bytes used=185258424, alloc=2555436, time=16.90
bytes used=186259692, alloc=2555436, time=16.99
bytes used=187270388, alloc=2555436, time=17.33
bytes used=188270712, alloc=2555436, time=17.49
bytes used=189271040, alloc=2555436, time=17.56
bytes used=190271220, alloc=2555436, time=17.66
bytes used=191271392, alloc=2555436, time=17.78
bytes used=192271608, alloc=2555436, time=18.02
bytes used=193271764, alloc=2555436, time=18.23
bytes used=194272008, alloc=2555436, time=18.31
bytes used=195273172, alloc=2555436, time=18.43
bytes used=196273428, alloc=2555436, time=18.64
bytes used=197273660, alloc=2555436, time=18.85
bytes used=198273816, alloc=2555436, time=18.92
bytes used=199274044, alloc=2555436, time=19.04
bytes used=200274212, alloc=2555436, time=19.33
bytes used=201274688, alloc=2555436, time=19.50
> 
# d/dy
> simplify( diff(interp_2d_cube_order4_smooth0,y) );
bytes used=202274936, alloc=2555436, time=19.61
bytes used=203275132, alloc=2555436, time=19.68
bytes used=204275340, alloc=2555436, time=19.75
bytes used=205276096, alloc=2555436, time=19.82
                      3  3                     2
2/3 DATA(0, 1) + 1/6 x  y  DATA(-1, 0) - 1/18 x  DATA(1, 2)

            2                      2                    2  2
     - 5/3 x  y DATA(1, 0) + 5/48 x  DATA(0, 2) + 5/16 x  y  DATA(0, -2)

             2                     2  2                    2  2
     + 5/48 x  y DATA(2, 0) - 5/8 x  y  DATA(0, -1) + 5/8 x  y  DATA(0, 1)

             2  2                      3                      3
     - 5/16 x  y  DATA(0, 2) - 5/24 y x  DATA(2, 0) + 5/12 y x  DATA(1, 0)

               3                       3                    3
     - 5/12 y x  DATA(-1, 0) + 5/24 y x  DATA(-2, 0) - 1/9 x  DATA(-1, -1)

            3                     3                     3
     + 1/9 x  DATA(-1, 1) - 1/18 x  DATA(2, -1) + 1/72 x  DATA(1, 2)

             3                     3                    3
     - 1/72 x  DATA(-1, 2) + 1/18 x  DATA(2, 1) + 1/72 x  DATA(-1, -2)

              3                     3                   3
     - 1/144 x  DATA(-2, -2) - 1/9 x  DATA(1, 1) + 1/9 x  DATA(1, -1)

               3                       3                     3
     + 1/12 x y  DATA(-2, 0) - 1/12 x y  DATA(2, 0) + 2/3 x y  DATA(1, 0)

             2  3                   2  3                      3
     - 5/24 x  y  DATA(0, 2) + 2/3 x  y  DATA(-1, 0) - 2/3 x y  DATA(-1, 0)

             2  3                    2  3                   2  3
     - 1/24 x  y  DATA(-2, 0) - 5/4 x  y  DATA(0, 0) + 5/6 x  y  DATA(0, 1)

             2  3                    2  3                     4  3
     - 5/24 x  y  DATA(0, -2) + 5/6 x  y  DATA(0, -1) - 1/36 x  y  DATA(2, 1)

              4  3                   4  3                    4  3
     + 1/144 x  y  DATA(2, 2) - 1/6 x  y  DATA(0, 1) + 1/24 x  y  DATA(0, -2)

            4  3                     4  3                   4  3
     - 1/6 x  y  DATA(0, -1) + 1/24 x  y  DATA(0, 2) - 1/6 x  y  DATA(-1, 0)

            4  3                     4  3                     4  3
     + 1/9 x  y  DATA(-1, 1) - 1/36 x  y  DATA(2, -1) - 1/36 x  y  DATA(1, 2)

             2  3                   2  3                   4  3
     - 1/24 x  y  DATA(2, 0) + 2/3 x  y  DATA(1, 0) + 1/9 x  y  DATA(-1, -1)

            4  3                      4  3                    4  3
     + 1/9 x  y  DATA(1, -1) + 1/144 x  y  DATA(-2, 2) + 1/4 x  y  DATA(0, 0)

             4  2                     4  2                     4  3
     + 1/24 x  y  DATA(1, -2) - 1/48 x  y  DATA(-2, 1) - 1/36 x  y  DATA(-1, 2)

              4  3                    4  3
     + 1/144 x  y  DATA(2, -2) + 1/9 x  y  DATA(1, 1)

              4  3                      4  2
     + 1/144 x  y  DATA(-2, -2) + 1/24 x  y  DATA(-1, -2)

             4  2                     4  2
     - 1/16 x  y  DATA(0, -2) - 1/96 x  y  DATA(-2, -2)

             4  3                      4  2
     - 1/36 x  y  DATA(-1, -2) - 1/12 x  y  DATA(-1, -1)

             4  2                     4  2                     4  2
     - 1/12 x  y  DATA(1, -1) + 1/12 x  y  DATA(-1, 1) + 1/48 x  y  DATA(2, -1)

             4  2                    4  2                   4  2
     - 1/24 x  y  DATA(1, 2) + 1/16 x  y  DATA(0, 2) - 1/8 x  y  DATA(0, 1)

             4  2                    4  3                     4  3
     + 1/12 x  y  DATA(1, 1) - 1/36 x  y  DATA(1, -2) - 1/36 x  y  DATA(-2, 1)

             4  3                     4  3                      4  3
     + 1/24 x  y  DATA(-2, 0) - 1/36 x  y  DATA(-2, -1) + 1/24 x  y  DATA(2, 0)

            4  3                   4  2                     4  2
     - 1/6 x  y  DATA(1, 0) + 1/8 x  y  DATA(0, -1) + 1/96 x  y  DATA(2, 2)

             4  2                      4  2
     + 1/48 x  y  DATA(-2, -1) - 1/96 x  y  DATA(2, -2)

             4  2                    4                     3
     + 1/96 x  y  DATA(-2, 2) + 1/9 x  DATA(1, -1) - 1/72 x  DATA(1, -2)

             3                     3                       3
     - 1/18 x  DATA(-2, 1) + 1/18 x  DATA(-2, -1) + 1/144 x  DATA(2, -2)

              3                      3                    4
     + 1/144 x  DATA(-2, 2) - 1/144 x  DATA(2, 2) - 1/72 x  DATA(1, -2)

             4                       4                      4
     - 1/36 x  DATA(-2, -1) + 1/288 x  DATA(2, -2) - 1/288 x  DATA(-2, 2)

            4                     4                     4
     + 1/9 x  DATA(-1, -1) - 1/6 x  DATA(0, -1) + 1/36 x  DATA(-2, 1)

             4                       4                      4
     + 1/18 x  y DATA(2, -1) + 1/72 x  y DATA(1, 2) + 1/72 x  y DATA(-1, 2)

              4                      4                       4
     - 1/288 x  y DATA(2, -2) - 2/9 x  y DATA(-1, -1) - 2/9 x  y DATA(1, -1)

              4                       4                       4
     - 1/288 x  y DATA(-2, 2) - 1/48 x  y DATA(0, -2) - 1/48 x  y DATA(0, 2)

             4                      4                      4
     + 5/12 x  y DATA(-1, 0) - 2/9 x  y DATA(-1, 1) + 1/3 x  y DATA(0, -1)

             4                     4                      4
     + 5/12 x  y DATA(1, 0) - 2/9 x  y DATA(1, 1) - 5/48 x  y DATA(-2, 0)

             4                       4                     4
     + 1/18 x  y DATA(2, 1) - 1/288 x  y DATA(2, 2) + 1/3 x  y DATA(0, 1)

            4                    4                   4
     + 1/6 x  DATA(0, 1) + 1/36 x  DATA(2, 1) - 1/9 x  DATA(1, 1)

             4                      4                      4
     - 1/72 x  DATA(-1, -2) + 1/48 x  DATA(0, -2) + 1/288 x  DATA(-2, -2)

             4                    3                   4
     - 1/36 x  DATA(2, -1) - 2/3 y  DATA(0, 1) - 1/9 x  DATA(-1, 1)

             4                    4                    4
     + 1/72 x  DATA(1, 2) - 1/48 x  DATA(0, 2) + 1/72 x  DATA(-1, 2)

             4
     + 1/72 x  y DATA(-1, -2) + 4/3 y DATA(0, -1) - 1/12 y DATA(0, 2)

            2                   2                    2
     - 1/2 y  DATA(0, 1) - 1/4 y  DATA(0, -2) + 1/2 y  DATA(0, -1)

            2               3                     4
     + 1/4 y  DATA(0, 2) + y  DATA(0, 0) - 1/288 x  y DATA(-2, -2)

             4                       4                        4
     + 1/18 x  y DATA(-2, 1) + 1/18 x  y DATA(-2, -1) - 5/48 x  y DATA(2, 0)

                                                        3  3
     + 5/24 x y DATA(2, 0) - 5/3 x y DATA(1, 0) - 1/12 x  y  DATA(-2, 0)

             3  3                   3  3                   3
     + 1/12 x  y  DATA(2, 0) - 1/6 x  y  DATA(1, 0) + 1/6 y  DATA(0, -2)

            3                   2                    2
     + 1/6 y  DATA(0, 2) + 4/9 x  DATA(1, 1) + 1/18 x  DATA(-1, -2)

            3                    2                     4
     - 2/3 y  DATA(0, -1) - 5/6 x  DATA(0, 1) - 1/288 x  DATA(2, 2)

     + 4/3 y DATA(0, 1) - 1/12 y DATA(0, -2) + 1/18 x DATA(1, -2)

     + 1/144 x DATA(2, 2) - 1/18 x DATA(2, 1) + 1/18 x DATA(-1, 2)

     - 1/18 x DATA(1, 2) + 1/18 x DATA(2, -1) - 4/9 x DATA(-1, 1)

     - 4/9 x DATA(1, -1) - 1/144 x DATA(-2, 2) - 1/144 x DATA(2, -2)

     - 1/18 x DATA(-2, -1) + 1/18 x DATA(-2, 1) + 4/9 x DATA(-1, -1)

             2                     2                     2
     - 1/18 x  DATA(-1, 2) - 1/36 x  DATA(2, 1) + 1/288 x  DATA(2, 2)

             2                      2                      2
     - 5/48 x  DATA(0, -2) - 1/288 x  DATA(-2, -2) + 1/18 x  DATA(1, -2)

             2                     2                       2
     - 1/36 x  DATA(-2, 1) + 1/36 x  DATA(-2, -1) - 1/288 x  DATA(2, -2)

              2                    2                     2
     + 1/288 x  DATA(-2, 2) - 4/9 x  DATA(-1, -1) + 5/6 x  DATA(0, -1)

            2                    2
     - 4/9 x  DATA(1, -1) + 4/9 x  DATA(-1, 1) + 1/144 x DATA(-2, -2)

     - 1/18 x DATA(-1, -2) + 4/9 x DATA(1, 1) - 5/24 x y DATA(-2, 0)

                                   2                    2
     + 5/3 x y DATA(-1, 0) + 1/36 x  DATA(2, -1) - 5/3 x  y DATA(0, -1)

             2                     2                       2
     + 5/48 x  y DATA(0, 2) - 5/3 x  y DATA(-1, 0) + 25/8 x  y DATA(0, 0)

             4                      4                      4  2
     + 1/72 x  y DATA(1, -2) - 5/8 x  y DATA(0, 0) - 1/24 x  y  DATA(-1, 2)

             4  2                    2                      2
     - 1/48 x  y  DATA(2, 1) + 5/48 x  y DATA(-2, 0) - 5/3 x  y DATA(0, 1)

             2
     + 5/48 x  y DATA(0, -2) + 1/12 DATA(0, -2) - 2/3 DATA(0, -1)

     - 1/12 DATA(0, 2) + 8/9 x y DATA(1, -1) - 1/18 x y DATA(1, -2)

     + 1/9 x y DATA(-2, 1) + 1/9 x y DATA(-2, -1) + 1/144 x y DATA(2, -2)

     - 1/144 x y DATA(-2, 2) - 8/9 x y DATA(-1, -1) - 1/9 x y DATA(2, 1)

     + 1/144 x y DATA(2, 2) - 8/9 x y DATA(-1, 1) - 1/9 x y DATA(2, -1)

                                                           2
     - 1/18 x y DATA(1, 2) + 1/18 x y DATA(-1, 2) + 1/6 x y  DATA(1, 2)

               2                      2                     2
     + 1/24 x y  DATA(2, 1) - 1/48 x y  DATA(2, 2) + 1/3 x y  DATA(-1, 1)

               2                      2                     2
     - 1/24 x y  DATA(2, -1) - 1/3 x y  DATA(1, 1) + 1/6 x y  DATA(-1, -2)

               2                       2                       2
     - 1/48 x y  DATA(-2, -2) - 1/6 x y  DATA(1, -2) - 1/24 x y  DATA(-2, 1)

              2                       2                      3
     - 1/3 x y  DATA(-1, -1) + 1/3 x y  DATA(1, -1) + 1/9 x y  DATA(1, -2)

               2                        2                       2
     + 1/24 x y  DATA(-2, -1) + 1/48 x y  DATA(2, -2) + 1/48 x y  DATA(-2, 2)

              2                      3                     3
     - 1/6 x y  DATA(-1, 2) - 4/9 x y  DATA(1, 1) - 1/9 x y  DATA(-1, -2)

               3                       3                       3
     + 1/72 x y  DATA(-2, -2) + 4/9 x y  DATA(-1, -1) - 4/9 x y  DATA(1, -1)

               3                       3                       3
     - 1/18 x y  DATA(-2, -1) - 1/9 x y  DATA(-1, 2) + 1/18 x y  DATA(2, 1)

               3                       3                       3
     - 1/18 x y  DATA(-2, 1) - 1/72 x y  DATA(2, -2) + 1/72 x y  DATA(-2, 2)

            2  3                    2  3                     2  3
     - 4/9 x  y  DATA(1, -1) - 4/9 x  y  DATA(-1, 1) + 1/36 x  y  DATA(2, -1)

            2  3                   2  3                        3
     + 1/9 x  y  DATA(1, 2) - 4/9 x  y  DATA(-1, -1) - 1/72 x y  DATA(2, 2)

            2  3                   2  3                       2  3
     - 4/9 x  y  DATA(1, 1) + 1/9 x  y  DATA(-1, -2) - 1/144 x  y  DATA(-2, -2)

            2  3                     2  3                     2  3
     + 1/9 x  y  DATA(1, -2) + 1/36 x  y  DATA(-2, 1) + 1/36 x  y  DATA(-2, -1)

              2  3                      3                       3
     - 1/144 x  y  DATA(2, -2) + 4/9 x y  DATA(-1, 1) + 1/18 x y  DATA(2, -1)

              3                   2  3                      2  3
     + 1/9 x y  DATA(1, 2) + 1/9 x  y  DATA(-1, 2) - 1/144 x  y  DATA(2, 2)

            2  2                     2  3                     2  3
     - 1/3 x  y  DATA(1, 1) - 1/144 x  y  DATA(-2, 2) + 1/36 x  y  DATA(2, 1)

             2  2                     2  2                    2  2
     + 1/96 x  y  DATA(2, -2) - 1/96 x  y  DATA(-2, 2) + 1/3 x  y  DATA(-1, -1)

            2  2                    2  2                      2
     + 1/3 x  y  DATA(1, -1) - 1/3 x  y  DATA(-1, 1) + 1/288 x  y DATA(-2, 2)

            2  2                   2  2                      2  2
     + 1/6 x  y  DATA(1, 2) - 1/6 x  y  DATA(-1, -2) + 1/96 x  y  DATA(-2, -2)

            2  2                     2  2                     2  2
     - 1/6 x  y  DATA(1, -2) + 1/48 x  y  DATA(-2, 1) - 1/48 x  y  DATA(-2, -1)

             2                       2                       2
     - 1/18 x  y DATA(1, -2) - 1/18 x  y DATA(-2, 1) - 1/18 x  y DATA(-2, -1)

              2                      2                       2
     + 1/288 x  y DATA(2, -2) + 8/9 x  y DATA(-1, -1) + 8/9 x  y DATA(1, -1)

            2                       2                       2  2
     + 8/9 x  y DATA(-1, 1) - 1/18 x  y DATA(2, -1) - 1/48 x  y  DATA(2, -1)

            2  2                     2  2                    2  2
     + 1/6 x  y  DATA(-1, 2) + 1/48 x  y  DATA(2, 1) - 1/96 x  y  DATA(2, 2)

            2                      2                         2
     + 8/9 x  y DATA(1, 1) - 1/18 x  y DATA(-1, -2) + 1/288 x  y DATA(-2, -2)

             2                      2                       2
     - 1/18 x  y DATA(1, 2) - 1/18 x  y DATA(2, 1) + 1/288 x  y DATA(2, 2)

             2                       3  3                     3  3
     - 1/18 x  y DATA(-1, 2) + 1/36 x  y  DATA(-1, -2) + 1/9 x  y  DATA(1, 1)

             3  3                     3  3
     - 1/36 x  y  DATA(1, -2) + 1/18 x  y  DATA(-2, -1)

             3  3                     3  3                    3  3
     + 1/72 x  y  DATA(2, -2) - 1/72 x  y  DATA(-2, 2) - 1/9 x  y  DATA(-1, -1)

            3  3                     3  3                    3  3
     + 1/9 x  y  DATA(1, -1) + 1/18 x  y  DATA(-2, 1) - 1/9 x  y  DATA(-1, 1)

             3  3                    3  3                     3  3
     - 1/36 x  y  DATA(1, 2) + 1/36 x  y  DATA(-1, 2) - 1/18 x  y  DATA(2, 1)

             3  3                    3  2                      3  2
     + 1/72 x  y  DATA(2, 2) + 1/12 x  y  DATA(-1, -1) - 1/12 x  y  DATA(1, -1)

             3  3                      3  3
     - 1/72 x  y  DATA(-2, -2) - 1/18 x  y  DATA(2, -1)

             3  2                      3  2
     - 1/24 x  y  DATA(-2, -1) - 1/48 x  y  DATA(2, -2)

             3  2                     3  2                    3  2
     - 1/48 x  y  DATA(-2, 2) - 1/24 x  y  DATA(1, 2) + 1/48 x  y  DATA(2, 2)

             3  2                     3  2                     3  2
     + 1/24 x  y  DATA(-1, 2) - 1/12 x  y  DATA(-1, 1) - 1/24 x  y  DATA(2, 1)

                3                        3                      3
     - 1/144 y x  DATA(2, -2) + 1/144 y x  DATA(-2, 2) - 2/9 y x  DATA(1, 1)

             3  2                     3  2                    3  2
     + 1/24 x  y  DATA(2, -1) + 1/12 x  y  DATA(1, 1) - 1/24 x  y  DATA(-1, -2)

             3  2                      3  2
     + 1/48 x  y  DATA(-2, -2) + 1/24 x  y  DATA(1, -2)

             3  2                      3                      3
     + 1/24 x  y  DATA(-2, 1) + 1/9 y x  DATA(2, 1) - 1/72 y x  DATA(-1, -2)

                3                        3                      3
     + 1/144 y x  DATA(-2, -2) + 1/72 y x  DATA(1, -2) - 1/9 y x  DATA(-2, 1)

              3                        3                      3
     - 1/9 y x  DATA(-2, -1) - 1/72 y x  DATA(-1, 2) - 2/9 y x  DATA(1, -1)

              3                      3                       3
     + 2/9 y x  DATA(-1, 1) + 1/9 y x  DATA(2, -1) + 1/72 y x  DATA(1, 2)

                3
     - 1/144 y x  DATA(2, 2) + 8/9 x y DATA(1, 1) + 1/18 x y DATA(-1, -2)

                                       3
     - 1/144 x y DATA(-2, -2) + 2/9 y x  DATA(-1, -1) - 5/2 y DATA(0, 0)

> coeffs_as_lc_of_data(%, posn_list_2d_size5);
bytes used=206300816, alloc=2752008, time=19.89
bytes used=207303556, alloc=2752008, time=19.96
                       2  2          3           3          4          2
[COEFF(-2, -2) = 1/96 x  y  - 1/144 x  + 1/72 x y  + 1/288 x  + 1/288 x  y

              2  3                   3  3         4  2          4  3
     - 1/144 x  y  + 1/144 x - 1/72 x  y  - 1/96 x  y  + 1/144 x  y

             3  2          4            2           2                        3
     + 1/48 x  y  - 1/288 x  y - 1/288 x  - 1/48 x y  - 1/144 x y + 1/144 y x ,

                          4            2         2         4  2         4  3
    COEFF(-1, -2) = 1/72 x  y + 1/6 x y  + 1/18 x  + 1/24 x  y  - 1/36 x  y

             3                   3         2           3  3         4
     + 1/72 x  - 1/18 x - 1/9 x y  - 1/18 x  y + 1/36 x  y  - 1/72 x

               3         3  2        2  2                   2  3
     - 1/72 y x  - 1/24 x  y  - 1/6 x  y  + 1/18 x y + 1/9 x  y , COEFF(0, -2)

               4  2         4           2         4        3         2  2
     = - 1/16 x  y  - 1/48 x  y - 5/48 x  + 1/48 x  + 1/6 y  + 5/16 x  y

             2                    4  3                2  3        2
     + 5/48 x  y - 1/12 y + 1/24 x  y  + 1/12 - 5/24 x  y  - 1/4 y ,

                                  3         4  2          2          3
    COEFF(1, -2) = 1/18 x - 1/72 x  + 1/24 x  y  - 1/6 x y  + 1/9 x y

               3        2  2        2  3         4           2           2
     + 1/72 y x  - 1/6 x  y  + 1/9 x  y  + 1/72 x  y - 1/18 x  y + 1/18 x

             4                    3  3         4  3         3  2
     - 1/72 x  - 1/18 x y - 1/36 x  y  - 1/36 x  y  + 1/24 x  y , COEFF(2, -2)

             2  2         4  2           2         3  3          4  3
     = 1/96 x  y  - 1/96 x  y  + 1/48 x y  + 1/72 x  y  + 1/144 x  y

              3                      2  3          4         3  2          2
     + 1/144 x  + 1/144 x y - 1/144 x  y  + 1/288 x  - 1/48 x  y  - 1/288 x

               3            3          4                      2
     - 1/72 x y  - 1/144 y x  - 1/288 x  y - 1/144 x + 1/288 x  y,

                            4         4  2                   4  3           3
    COEFF(-2, -1) = - 1/36 x  + 1/48 x  y  + 1/9 x y - 1/36 x  y  - 1/18 x y

             3  3         2         2  2         3         2           3  2
     + 1/18 x  y  + 1/36 x  - 1/48 x  y  + 1/18 x  - 1/18 x  y - 1/24 x  y

              3           2         2  3                  4
     - 1/9 y x  + 1/24 x y  + 1/36 x  y  - 1/18 x + 1/18 x  y, COEFF(-1, -1) =

           2  3          3                2        4         3  2        2  2
    - 4/9 x  y  + 4/9 x y  + 4/9 x - 4/9 x  + 1/9 x  + 1/12 x  y  + 1/3 x  y

            4          4  3        2          3  3         4  2        3
     - 2/9 x  y + 1/9 x  y  + 8/9 x  y - 1/9 x  y  - 1/12 x  y  - 1/9 x

                        2          3                        4  3        2
     - 8/9 x y - 1/3 x y  + 2/9 y x , COEFF(0, -1) = - 1/6 x  y  + 5/6 x

            4          2          2        4                2  3        2  2
     + 1/3 x  y - 5/3 x  y + 1/2 y  - 1/6 x  + 4/3 y + 5/6 x  y  - 5/8 x  y

            3              4  2                      3  3         4  2
     - 2/3 y  - 2/3 + 1/8 x  y , COEFF(1, -1) = 1/9 x  y  - 1/12 x  y

             3  2        4          2  3        4  3                    3
     - 1/12 x  y  - 2/9 x  y - 4/9 x  y  + 1/9 x  y  + 8/9 x y - 4/9 x y

              2        2          3        2  2        4        2
     + 1/3 x y  - 4/9 x  - 2/9 y x  + 1/3 x  y  + 1/9 x  + 8/9 x  y - 4/9 x

            3                       4           2  2         3
     + 1/9 x , COEFF(2, -1) = 1/18 x  y - 1/48 x  y  - 1/18 x  - 1/9 x y

               2         3  2         2  3         2             3         3  3
     - 1/24 x y  + 1/24 x  y  + 1/36 x  y  - 1/18 x  y + 1/18 x y  - 1/18 x  y

             4         2          3         4  3         4  2
     - 1/36 x  + 1/36 x  + 1/9 y x  - 1/36 x  y  + 1/48 x  y  + 1/18 x,

                           4             3         4  3         2  3
    COEFF(-2, 0) = - 5/48 x  y + 1/12 x y  + 1/24 x  y  - 1/24 x  y

             2             3                    3  3                       4
     + 5/48 x  y + 5/24 y x  - 5/24 x y - 1/12 x  y , COEFF(-1, 0) = 5/12 x  y

               3        2          4  3        2  3          3        3  3
     - 5/12 y x  - 5/3 x  y - 1/6 x  y  + 2/3 x  y  - 2/3 x y  + 1/6 x  y

     + 5/3 x y,

                         2  3        4                   2          4  3    3
    COEFF(0, 0) = - 5/4 x  y  - 5/8 x  y - 5/2 y + 25/8 x  y + 1/4 x  y  + y ,

                         3  3          3                     3        2
    COEFF(1, 0) = - 1/6 x  y  + 2/3 x y  - 5/3 x y + 5/12 y x  - 5/3 x  y

             4          4  3        2  3                      2           3  3
     + 5/12 x  y - 1/6 x  y  + 2/3 x  y , COEFF(2, 0) = 5/48 x  y + 1/12 x  y

             2  3                    4  3           3           3         4
     - 1/24 x  y  + 5/24 x y + 1/24 x  y  - 5/24 y x  - 1/12 x y  - 5/48 x  y,

                         2  3         2  2                   2           2
    COEFF(-2, 1) = 1/36 x  y  + 1/48 x  y  + 1/9 x y - 1/18 x  y - 1/36 x

             4           3  3         4         3  2           2          3
     + 1/18 x  y + 1/18 x  y  + 1/36 x  + 1/24 x  y  - 1/24 x y  - 1/9 y x

             4  3         4  2                  3           3
     - 1/36 x  y  - 1/48 x  y  + 1/18 x - 1/18 x  - 1/18 x y , COEFF(-1, 1) =

                     4          2          3                 4  2        2
    - 8/9 x y - 2/9 x  y + 8/9 x  y + 1/9 x  - 4/9 x + 1/12 x  y  + 4/9 x

            4        2  2         3  2        2  3        4  3          3
     - 1/9 x  - 1/3 x  y  - 1/12 x  y  - 4/9 x  y  + 1/9 x  y  + 2/9 y x

            3  3          3          2                             2  3
     - 1/9 x  y  + 4/9 x y  + 1/3 x y , COEFF(0, 1) = 4/3 y + 5/6 x  y

            4        3              4  3        4          2        2  2
     + 1/6 x  - 2/3 y  + 2/3 - 1/6 x  y  + 1/3 x  y - 1/2 y  + 5/8 x  y

            4  2        2          2                         2        4  3
     - 1/8 x  y  - 5/3 x  y - 5/6 x , COEFF(1, 1) = - 1/3 x y  + 1/9 x  y

            3  3                2  3        2          3        2  2        4
     + 1/9 x  y  + 4/9 x - 4/9 x  y  + 8/9 x  y - 1/9 x  - 1/3 x  y  - 2/9 x  y

              3         3  2        4        2          3         4  2
     - 2/9 y x  + 1/12 x  y  - 1/9 x  + 4/9 x  - 4/9 x y  + 1/12 x  y

                                    3           3         4  2           2
     + 8/9 x y, COEFF(2, 1) = 1/18 x  + 1/18 x y  - 1/48 x  y  + 1/24 x y

             3  3         2                   2  2         4  3
     - 1/18 x  y  - 1/36 x  - 1/9 x y + 1/48 x  y  - 1/36 x  y  - 1/18 x

             4           2  3          3         4         3  2         2
     + 1/18 x  y + 1/36 x  y  + 1/9 y x  + 1/36 x  - 1/24 x  y  - 1/18 x  y,

                            4          2  3          3           2         3  3
    COEFF(-2, 2) = - 1/288 x  - 1/144 x  y  + 1/144 x  + 1/48 x y  - 1/72 x  y

              2             3                   3  2         2  2
     + 1/288 x  y + 1/72 x y  - 1/144 x - 1/48 x  y  - 1/96 x  y  - 1/144 x y

             4  2            3          4  3          2          4
     + 1/96 x  y  + 1/144 y x  + 1/144 x  y  + 1/288 x  - 1/288 x  y,

                                   3        2  3         3         4  3
    COEFF(-1, 2) = 1/18 x - 1/9 x y  + 1/9 x  y  - 1/72 x  - 1/36 x  y

                        2            2         3  3         2         4
     + 1/18 x y - 1/18 x  y - 1/6 x y  + 1/36 x  y  - 1/18 x  + 1/72 x  y

             4         3  2           3         4  2        2  2
     + 1/72 x  + 1/24 x  y  - 1/72 y x  - 1/24 x  y  + 1/6 x  y , COEFF(0, 2)

             4  3        2         4  2                4          3         2
     = 1/24 x  y  + 1/4 y  + 1/16 x  y  - 1/12 - 1/48 x  y + 1/6 y  + 5/48 x  y

             4                  2         2  2         2  3
     - 1/48 x  - 1/12 y + 5/48 x  - 5/16 x  y  - 5/24 x  y , COEFF(1, 2) =

                     4  2         2         4  3          3         3
    - 1/18 x - 1/24 x  y  - 1/18 x  - 1/36 x  y  + 1/9 x y  + 1/72 x

            2  2                    2           4           3  3         4
     + 1/6 x  y  - 1/18 x y - 1/18 x  y + 1/72 x  y - 1/36 x  y  + 1/72 x

             3  2          2           3        2  3
     - 1/24 x  y  + 1/6 x y  + 1/72 y x  + 1/9 x  y , COEFF(2, 2) =

             4            4  3           3         3  2           2          3
    - 1/288 x  y + 1/144 x  y  - 1/72 x y  + 1/48 x  y  - 1/48 x y  - 1/144 x

              2          4                    2  3                     4  2
     + 1/288 x  - 1/288 x  + 1/144 x - 1/144 x  y  + 1/144 x y + 1/96 x  y

              2              3         2  2         3  3
     + 1/288 x  y - 1/144 y x  - 1/96 x  y  + 1/72 x  y ]

> print_coeffs__lc_of_data(%, "coeffs_dy->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order4.smooth0/coeffs-dy.compute.c");
bytes used=208304200, alloc=2752008, time=20.03
bytes used=209304472, alloc=2752008, time=20.11
bytes used=210304736, alloc=2752008, time=20.20
bytes used=211305864, alloc=2752008, time=20.26
bytes used=212308508, alloc=2752008, time=20.33
bytes used=213313600, alloc=2752008, time=20.40
bytes used=214317564, alloc=2752008, time=20.49
bytes used=215326952, alloc=2752008, time=20.58
bytes used=216327120, alloc=2752008, time=20.66
bytes used=217327304, alloc=2752008, time=21.01
bytes used=218327712, alloc=2752008, time=21.15
bytes used=219328024, alloc=2752008, time=21.22
bytes used=220328384, alloc=2752008, time=21.30
bytes used=221328632, alloc=2752008, time=21.37
bytes used=222328852, alloc=2752008, time=21.48
bytes used=223336580, alloc=2752008, time=21.58
bytes used=224336836, alloc=2752008, time=21.68
bytes used=225337056, alloc=2752008, time=21.79
bytes used=226339888, alloc=2752008, time=21.87
bytes used=227345684, alloc=2752008, time=22.20
bytes used=228345840, alloc=2752008, time=22.41
bytes used=229346116, alloc=2752008, time=22.49
bytes used=230355500, alloc=2752008, time=22.59
bytes used=231355656, alloc=2752008, time=22.72
bytes used=232356164, alloc=2752008, time=23.07
bytes used=233356336, alloc=2752008, time=23.24
bytes used=234356620, alloc=2752008, time=23.32
bytes used=235356804, alloc=2752008, time=23.40
bytes used=236356976, alloc=2752008, time=23.52
bytes used=237357136, alloc=2752008, time=23.62
bytes used=238357296, alloc=2752008, time=24.05
bytes used=239357464, alloc=2752008, time=24.11
bytes used=240360828, alloc=2752008, time=24.23
bytes used=241361104, alloc=2752008, time=24.52
bytes used=242361368, alloc=2752008, time=24.77
bytes used=243361584, alloc=2752008, time=24.85
bytes used=244361856, alloc=2752008, time=24.96
bytes used=245362020, alloc=2752008, time=25.36
bytes used=246362292, alloc=2752008, time=25.47
> 
# d^2/dx^2
> simplify( diff(interp_2d_cube_order4_smooth0,x,x) );
bytes used=247363000, alloc=2752008, time=25.59
bytes used=248363176, alloc=2752008, time=25.66
bytes used=249363344, alloc=2752008, time=25.74
                                                              4
- 1/12 DATA(2, 0) - 5/2 DATA(0, 0) + 4/3 DATA(1, 0) - 1/12 x y  DATA(2, -1)

               4                     4                     4
     - 1/24 x y  DATA(1, 2) + 1/8 x y  DATA(2, 0) - 1/4 x y  DATA(1, 0)

              4                      4                        4
     + 1/6 x y  DATA(1, 1) + 1/24 x y  DATA(-1, -2) - 1/48 x y  DATA(-2, -2)

               4                       4                      4
     - 1/24 x y  DATA(1, -2) + 1/12 x y  DATA(-2, 1) - 1/8 x y  DATA(-2, 0)

               4                        4                       4
     + 1/12 x y  DATA(-2, -1) + 1/48 x y  DATA(2, -2) - 1/48 x y  DATA(-2, 2)

              4                       4                      4
     - 1/6 x y  DATA(-1, -1) + 1/6 x y  DATA(1, -1) + 1/4 x y  DATA(-1, 0)

              4                    2  2                  2  2
     - 1/6 x y  DATA(-1, 1) - 1/8 x  y  DATA(0, -2) + 2 x  y  DATA(0, -1)

          2  2                   2  2                     2
     + 2 x  y  DATA(0, 1) - 1/8 x  y  DATA(0, 2) + 5/8 x y  DATA(-2, 0)

            2  3                   2  3                   2  3
     + 1/4 x  y  DATA(0, 2) - 1/2 x  y  DATA(0, 1) - 1/4 x  y  DATA(0, -2)

            2  3                      2                     3
     + 1/2 x  y  DATA(0, -1) - 5/4 x y  DATA(-1, 0) + 5/12 y  DATA(0, 1)

                                                    2
     + 5/3 y DATA(0, -1) + 5/24 y DATA(0, 2) - 5/3 y  DATA(0, 1)

             2                    2                     2
     + 5/48 y  DATA(0, -2) - 5/3 y  DATA(0, -1) + 5/48 y  DATA(0, 2)

             3                     3                    3
     + 5/24 y  DATA(0, -2) - 5/24 y  DATA(0, 2) - 5/12 y  DATA(0, -1)

                                                      2
     - 5/3 y DATA(0, 1) - 5/24 y DATA(0, -2) - 5/8 x y  DATA(2, 0)

              2                 2                      2
     + 5/4 x y  DATA(1, 0) - 2 x  y DATA(0, -1) - 1/4 x  y DATA(0, 2)

          2                     2                      2  4
     + 2 x  y DATA(0, 1) + 1/4 x  y DATA(0, -2) - 1/2 x  y  DATA(0, 1)

             2  4                     2  4                    2  4
     - 1/12 x  y  DATA(1, -2) - 1/12 x  y  DATA(2, -1) + 1/3 x  y  DATA(-1, 1)

             2  4                      4                      4
     - 1/12 x  y  DATA(1, 2) - 1/12 x y  DATA(2, 1) + 1/48 x y  DATA(2, 2)

             2  4                      2  4
     - 1/12 x  y  DATA(-2, -1) - 1/12 x  y  DATA(-1, -2)

             2  4                     2  4                   2  4
     + 1/48 x  y  DATA(-2, -2) + 1/8 x  y  DATA(2, 0) + 1/8 x  y  DATA(0, 2)

            2  4                    2  4                    2  4
     + 1/8 x  y  DATA(0, -2) - 1/2 x  y  DATA(0, -1) + 3/4 x  y  DATA(0, 0)

             2  4                    2  4                   2  4
     - 1/12 x  y  DATA(2, 1) + 1/48 x  y  DATA(2, 2) + 1/8 x  y  DATA(-2, 0)

             2  4                     2  4                     2  4
     + 1/48 x  y  DATA(2, -2) + 1/48 x  y  DATA(-2, 2) - 1/12 x  y  DATA(-2, 1)

            2  4                    2  4                     2  4
     - 1/2 x  y  DATA(-1, 0) + 1/3 x  y  DATA(-1, -1) + 1/3 x  y  DATA(1, -1)

                                2  4                    2  2
     - 1/12 DATA(-2, 0) - 1/12 x  y  DATA(-1, 2) + 5/2 x  y  DATA(-1, 0)

                              2  2                    2  2
     + 4/3 DATA(-1, 0) - 5/8 x  y  DATA(2, 0) - 15/4 x  y  DATA(0, 0)

            2  2
     - 5/8 x  y  DATA(-2, 0) + 2/3 x y DATA(1, -1) - 1/12 x y DATA(1, -2)

     - 1/3 x y DATA(-2, 1) + 1/3 x y DATA(-2, -1) + 1/24 x y DATA(2, -2)

     + 1/24 x y DATA(-2, 2) - 2/3 x y DATA(-1, -1) + 1/3 x y DATA(2, 1)

     - 1/24 x y DATA(2, 2) + 2/3 x y DATA(-1, 1) - 1/3 x y DATA(2, -1)

                                                            2
     + 1/12 x y DATA(1, 2) - 1/12 x y DATA(-1, 2) + 1/24 x y  DATA(1, 2)

              2                      2                     2
     + 1/3 x y  DATA(2, 1) - 1/48 x y  DATA(2, 2) + 2/3 x y  DATA(-1, 1)

              2                      2                      2
     + 1/3 x y  DATA(2, -1) - 2/3 x y  DATA(1, 1) - 1/24 x y  DATA(-1, -2)

               2                        2                      2
     + 1/48 x y  DATA(-2, -2) + 1/24 x y  DATA(1, -2) - 1/3 x y  DATA(-2, 1)

              2                       2                       3
     + 2/3 x y  DATA(-1, -1) - 2/3 x y  DATA(1, -1) + 1/12 x y  DATA(1, -2)

              2                        2                       2
     - 1/3 x y  DATA(-2, -1) - 1/48 x y  DATA(2, -2) + 1/48 x y  DATA(-2, 2)

               2                      3                      3
     - 1/24 x y  DATA(-1, 2) + 1/6 x y  DATA(1, 1) - 1/12 x y  DATA(-1, -2)

               3                       3                       3
     + 1/24 x y  DATA(-2, -2) + 1/6 x y  DATA(-1, -1) - 1/6 x y  DATA(1, -1)

               3                        3                       3
     - 1/12 x y  DATA(-2, -1) + 1/12 x y  DATA(-1, 2) - 1/12 x y  DATA(2, 1)

               3                       3                       3
     + 1/12 x y  DATA(-2, 1) - 1/24 x y  DATA(2, -2) - 1/24 x y  DATA(-2, 2)

            2  3                    2  3                     2  3
     - 1/3 x  y  DATA(1, -1) + 1/3 x  y  DATA(-1, 1) + 1/12 x  y  DATA(2, -1)

            2  3                   2  3                        3
     - 1/6 x  y  DATA(1, 2) - 1/3 x  y  DATA(-1, -1) + 1/24 x y  DATA(2, 2)

            2  3                   2  3                      2  3
     + 1/3 x  y  DATA(1, 1) + 1/6 x  y  DATA(-1, -2) - 1/24 x  y  DATA(-2, -2)

            2  3                     2  3                     2  3
     + 1/6 x  y  DATA(1, -2) - 1/12 x  y  DATA(-2, 1) + 1/12 x  y  DATA(-2, -1)

             2  3                      3                       3
     - 1/24 x  y  DATA(2, -2) - 1/6 x y  DATA(-1, 1) + 1/12 x y  DATA(2, -1)

               3                   2  3                     2  3
     - 1/12 x y  DATA(1, 2) - 1/6 x  y  DATA(-1, 2) + 1/24 x  y  DATA(2, 2)

            2  2                    2  3                     2  3
     - 4/3 x  y  DATA(1, 1) + 1/24 x  y  DATA(-2, 2) - 1/12 x  y  DATA(2, 1)

             2  2                     2  2                    2  2
     - 1/48 x  y  DATA(2, -2) - 1/48 x  y  DATA(-2, 2) - 4/3 x  y  DATA(-1, -1)

            2  2                    2  2                     2
     - 4/3 x  y  DATA(1, -1) - 4/3 x  y  DATA(-1, 1) - 1/24 x  y DATA(-2, 2)

             2  2                    2  2
     + 1/12 x  y  DATA(1, 2) + 1/12 x  y  DATA(-1, -2)

             2  2                      2  2                    2  2
     - 1/48 x  y  DATA(-2, -2) + 1/12 x  y  DATA(1, -2) + 1/3 x  y  DATA(-2, 1)

            2  2                     2                      2
     + 1/3 x  y  DATA(-2, -1) - 1/6 x  y DATA(1, -2) + 1/3 x  y DATA(-2, 1)

            2                        2                      2
     - 1/3 x  y DATA(-2, -1) + 1/24 x  y DATA(2, -2) + 4/3 x  y DATA(-1, -1)

            2                      2                      2
     + 4/3 x  y DATA(1, -1) - 4/3 x  y DATA(-1, 1) - 1/3 x  y DATA(2, -1)

            2  2                     2  2                    2  2
     + 1/3 x  y  DATA(2, -1) + 1/12 x  y  DATA(-1, 2) + 1/3 x  y  DATA(2, 1)

             2  2                   2                     2
     - 1/48 x  y  DATA(2, 2) - 4/3 x  y DATA(1, 1) - 1/6 x  y DATA(-1, -2)

             2                       2                     2
     + 1/24 x  y DATA(-2, -2) + 1/6 x  y DATA(1, 2) + 1/3 x  y DATA(2, 1)

             2                     2
     - 1/24 x  y DATA(2, 2) + 1/6 x  y DATA(-1, 2) - 2/3 x y DATA(1, 1)

                                                            3
     + 1/12 x y DATA(-1, -2) - 1/24 x y DATA(-2, -2) - 2/9 y  DATA(1, 1)

            3                        4                      2
     - 1/9 y  DATA(-1, -2) + 1/24 x y  DATA(-1, 2) + 1/288 y  DATA(-2, -2)

             2                    2                    2
     + 5/48 y  DATA(2, 0) + 25/8 y  DATA(0, 0) - 1/18 y  DATA(2, 1)

              2                    2                     2
     + 1/288 y  DATA(2, 2) - 1/18 y  DATA(1, -2) - 1/18 y  DATA(2, -1)

            2                     2                    2
     + 8/9 y  DATA(-1, 1) - 1/18 y  DATA(1, 2) - 1/18 y  DATA(-1, 2)

            2                    2                     2
     - 5/3 y  DATA(-1, 0) + 8/9 y  DATA(-1, -1) + 8/9 y  DATA(1, -1)

             3                     3                   2
     + 1/72 y  DATA(2, 1) - 1/144 y  DATA(2, 2) + 8/9 y  DATA(1, 1)

             2                      2                      2
     + 5/48 y  DATA(-2, 0) + 1/288 y  DATA(2, -2) + 1/288 y  DATA(-2, 2)

             2                     2                      2
     - 1/18 y  DATA(-2, 1) - 1/18 y  DATA(-2, -1) - 1/18 y  DATA(-1, -2)

            4                    4                     4
     + 1/3 y  DATA(-1, 0) - 2/9 y  DATA(1, -1) + 1/18 y  DATA(-1, 2)

            2  4                    4                     3
     - 1/2 x  y  DATA(1, 0) + 1/18 y  DATA(1, 2) + 1/144 y  DATA(2, -2)

            2                    3                     3
     - 5/3 y  DATA(1, 0) - 1/72 y  DATA(-2, -1) - 1/9 y  DATA(1, -2)

             3                      3                       3
     + 1/72 y  DATA(-2, 1) + 1/144 y  DATA(-2, -2) - 1/144 y  DATA(-2, 2)

            3                     3                    3
     + 2/9 y  DATA(-1, -1) + 2/9 y  DATA(1, -1) - 2/9 y  DATA(-1, 1)

             3                    3                   3
     - 1/72 y  DATA(2, -1) + 1/9 y  DATA(1, 2) + 1/9 y  DATA(-1, 2)

     + 1/18 y DATA(2, -1) - 8/9 y DATA(-1, -1) - 1/18 y DATA(2, 1)

                                                      4
     - 1/9 y DATA(-1, 2) + 1/144 y DATA(-2, 2) + 1/3 y  DATA(1, 0)

            4                    4                     4
     - 2/9 y  DATA(1, 1) - 5/48 y  DATA(0, -2) - 5/48 y  DATA(0, 2)

              4                     4                     4
     - 1/288 y  DATA(2, -2) + 1/72 y  DATA(-2, 1) + 1/72 y  DATA(-2, -1)

             4                       4                      4
     + 1/18 y  DATA(-1, -2) - 1/288 y  DATA(-2, -2) + 5/12 y  DATA(0, -1)

             4                     4                    4
     - 1/48 y  DATA(2, 0) - 1/288 y  DATA(2, 2) + 1/72 y  DATA(2, 1)

            4                   2  4                    4
     - 5/8 y  DATA(0, 0) + 1/3 x  y  DATA(1, 1) + 1/18 y  DATA(1, -2)

             4                    4                    4
     + 5/12 y  DATA(0, 1) + 1/72 y  DATA(2, -1) - 2/9 y  DATA(-1, 1)

            4
     - 2/9 y  DATA(-1, -1) + 8/9 y DATA(1, 1) - 1/2 x DATA(-2, 0)

                                                                 2
     + 1/144 y DATA(2, 2) - x DATA(1, 0) + 1/2 x DATA(2, 0) + 3 x  DATA(0, 0)

            2                 2                 2
     + 1/2 x  DATA(2, 0) - 2 x  DATA(1, 0) - 2 x  DATA(-1, 0)

            2
     + 1/2 x  DATA(-2, 0) + 1/9 y DATA(-1, -2) - 1/144 y DATA(-2, -2)

                                                       4
     - 1/18 y DATA(-2, 1) + 1/9 y DATA(1, -2) - 1/288 y  DATA(-2, 2)

             4
     - 1/48 y  DATA(-2, 0) - 1/144 y DATA(2, -2) + x DATA(-1, 0)

                                                      2  2
     + 1/18 y DATA(-2, -1) - 8/9 y DATA(1, -1) + 5/2 x  y  DATA(1, 0)

     - 1/9 y DATA(1, 2) + 8/9 y DATA(-1, 1)

> coeffs_as_lc_of_data(%, posn_list_2d_size5);
bytes used=250387568, alloc=2752008, time=25.82
bytes used=251395452, alloc=2752008, time=25.90
                                    2            3           3         2  4
[COEFF(-2, -2) = - 1/24 x y + 1/24 x  y + 1/144 y  + 1/24 x y  + 1/48 x  y

             2  2          2                     4         2  3          4
     - 1/48 x  y  + 1/288 y  - 1/144 y - 1/48 x y  - 1/24 x  y  - 1/288 y

               2                            3         2                2
     + 1/48 x y , COEFF(-1, -2) = - 1/12 x y  - 1/18 y  + 1/9 y - 1/6 x  y

               2         2  4                    4        2  3         2  2
     - 1/24 x y  - 1/12 x  y  + 1/12 x y + 1/18 y  + 1/6 x  y  + 1/12 x  y

            3           4                       2        2  2
     - 1/9 y  + 1/24 x y , COEFF(0, -2) = 5/48 y  - 1/8 x  y  - 5/24 y

            2  3         4        2  4         3        2
     - 1/4 x  y  - 5/48 y  + 1/8 x  y  + 5/24 y  + 1/4 x  y, COEFF(1, -2) =

            2        2          3           3        2  3         4           4
    - 1/18 y  - 1/6 x  y - 1/9 y  + 1/12 x y  + 1/6 x  y  + 1/18 y  - 1/24 x y

                       2         2  4                    2  2
     + 1/9 y + 1/24 x y  - 1/12 x  y  - 1/12 x y + 1/12 x  y , COEFF(2, -2) =

           3                     4         2             2         2  4
    1/144 y  - 1/144 y + 1/48 x y  + 1/24 x  y - 1/48 x y  + 1/48 x  y

             2  3          2           3          4                    2  2
     - 1/24 x  y  + 1/288 y  - 1/24 x y  - 1/288 y  + 1/24 x y - 1/48 x  y ,

                            2  4           3        2                     4
    COEFF(-2, -1) = - 1/12 x  y  - 1/12 x y  - 1/3 x  y + 1/3 x y + 1/72 y

               4        2  2          2         3         2  3         2
     + 1/12 x y  + 1/3 x  y  - 1/3 x y  - 1/72 y  + 1/12 x  y  - 1/18 y

                                      2  2          4          2          3
     + 1/18 y, COEFF(-1, -1) = - 4/3 x  y  - 1/6 x y  + 2/3 x y  + 1/6 x y

            3                  4        2  4        2        2  3        2
     + 2/9 y  - 2/3 x y - 2/9 y  + 1/3 x  y  + 8/9 y  - 1/3 x  y  + 4/3 x  y

                                   4         3        2        2  3        2  4
     - 8/9 y, COEFF(0, -1) = 5/12 y  - 5/12 y  - 5/3 y  + 1/2 x  y  - 1/2 x  y

                  2  2      2                                  2  3        3
     + 5/3 y + 2 x  y  - 2 x  y, COEFF(1, -1) = - 8/9 y - 1/3 x  y  + 2/9 y

            4        2            3          2        2  2        2  4        2
     - 2/9 y  + 4/3 x  y - 1/6 x y  - 2/3 x y  - 4/3 x  y  + 1/3 x  y  + 8/9 y

                        4                       4           4         2  4
     + 2/3 x y + 1/6 x y , COEFF(2, -1) = 1/72 y  - 1/12 x y  - 1/12 x  y

             3                   2  3          2        2          2  2
     - 1/72 y  - 1/3 x y + 1/12 x  y  + 1/3 x y  - 1/3 x  y + 1/3 x  y

               3                  2                       2        2  4
     + 1/12 x y  + 1/18 y - 1/18 y , COEFF(-2, 0) = 5/48 y  + 1/8 x  y  - 1/12

              2                  4         4        2  2        2
     + 5/8 x y  - 1/2 x - 1/8 x y  - 1/48 y  - 5/8 x  y  + 1/2 x , COEFF(-1, 0)

            4      2        2                  2  2          4        2  4
     = 1/3 y  - 2 x  - 5/3 y  + x + 4/3 + 5/2 x  y  + 1/4 x y  - 1/2 x  y

              2
     - 5/4 x y ,

                        2              2  4        4         2  2      2
    COEFF(0, 0) = 25/8 y  - 5/2 + 3/4 x  y  - 5/8 y  - 15/4 x  y  + 3 x ,

                      2        2  4          4        4              2
    COEFF(1, 0) = -2 x  - 1/2 x  y  - 1/4 x y  + 1/3 y  - x + 5/4 x y  + 4/3

            2  2        2                       4         4                2
     + 5/2 x  y  - 5/3 y , COEFF(2, 0) = 1/8 x y  - 1/48 y  - 1/12 + 5/48 y

            2        2  4          2        2  2
     + 1/2 x  + 1/8 x  y  - 5/8 x y  - 5/8 x  y  + 1/2 x, COEFF(-2, 1) =

         2          2  2         2           4           3         2  3
    1/3 x  y + 1/3 x  y  - 1/18 y  + 1/12 x y  + 1/12 x y  - 1/12 x  y

             4          2                   2  4         3
     + 1/72 y  - 1/3 x y  - 1/3 x y - 1/12 x  y  + 1/72 y  - 1/18 y,

                          2  2          4        2        2  3        4
    COEFF(-1, 1) = - 4/3 x  y  - 1/6 x y  + 8/9 y  + 1/3 x  y  - 2/9 y

              3        3          2        2  4        2
     - 1/6 x y  - 2/9 y  + 2/3 x y  + 1/3 x  y  - 4/3 x  y + 2/3 x y + 8/9 y,

                        4      2          2         3      2  2        2  4
    COEFF(0, 1) = 5/12 y  + 2 x  y - 5/3 y  + 5/12 y  + 2 x  y  - 1/2 x  y

                    2  3                     2  4        3          3
     - 5/3 y - 1/2 x  y , COEFF(1, 1) = 1/3 x  y  - 2/9 y  + 1/6 x y

            2  2          2        2          4        4        2  3
     - 4/3 x  y  - 2/3 x y  + 8/9 y  + 1/6 x y  - 2/9 y  + 1/3 x  y  - 2/3 x y

            2                                3         2           4
     - 4/3 x  y + 8/9 y, COEFF(2, 1) = 1/72 y  - 1/18 y  - 1/12 x y

            2  2          2                    3         2  4         2  3
     + 1/3 x  y  + 1/3 x y  - 1/18 y - 1/12 x y  - 1/12 x  y  - 1/12 x  y

            2           4                                   2             3
     + 1/3 x  y + 1/72 y  + 1/3 x y, COEFF(-2, 2) = - 1/24 x  y - 1/24 x y

             2  2           4                     3           2          4
     - 1/48 x  y  - 1/48 x y  + 1/24 x y - 1/144 y  + 1/48 x y  - 1/288 y

             2  3         2  4                    2                      3
     + 1/24 x  y  + 1/48 x  y  + 1/144 y + 1/288 y , COEFF(-1, 2) = 1/9 y

               2                 2  2         4                   2
     - 1/24 x y  - 1/9 y + 1/12 x  y  + 1/18 y  - 1/12 x y + 1/6 x  y

               4           3        2  3         2  4         2
     + 1/24 x y  + 1/12 x y  - 1/6 x  y  - 1/12 x  y  - 1/18 y , COEFF(0, 2) =

            4        2  2        2  3         3         2        2  4
    - 5/48 y  - 1/8 x  y  + 1/4 x  y  - 5/24 y  + 5/48 y  + 1/8 x  y

            2                                   2  4        3
     - 1/4 x  y + 5/24 y, COEFF(1, 2) = - 1/12 x  y  + 1/9 y  + 1/12 x y

               2           4         2        2           4           3
     + 1/24 x y  - 1/24 x y  - 1/18 y  + 1/6 x  y + 1/18 y  - 1/12 x y

             2  2        2  3                               2
     + 1/12 x  y  - 1/6 x  y  - 1/9 y, COEFF(2, 2) = 1/288 y  + 1/144 y

               4          3         2  2         2            4         2  3
     + 1/48 x y  - 1/144 y  - 1/48 x  y  - 1/24 x  y - 1/288 y  + 1/24 x  y

             2  4           3                      2
     + 1/48 x  y  + 1/24 x y  - 1/24 x y - 1/48 x y ]

> print_coeffs__lc_of_data(%, "coeffs_dxx->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order4.smooth0/coeffs-dxx.compute.c");
bytes used=252395612, alloc=2752008, time=25.98
bytes used=253395900, alloc=2752008, time=26.06
bytes used=254403412, alloc=2752008, time=26.13
bytes used=255404308, alloc=2752008, time=26.20
bytes used=256408316, alloc=2752008, time=26.29
bytes used=257409484, alloc=2752008, time=26.37
bytes used=258409648, alloc=2752008, time=26.76
bytes used=259409900, alloc=2752008, time=26.84
bytes used=260410072, alloc=2752008, time=26.91
bytes used=261410300, alloc=2752008, time=26.99
bytes used=262415908, alloc=2752008, time=27.10
bytes used=263416152, alloc=2752008, time=27.20
bytes used=264416592, alloc=2752008, time=27.29
bytes used=265416784, alloc=2752008, time=27.63
bytes used=266417212, alloc=2752008, time=27.81
bytes used=267417408, alloc=2752008, time=27.90
bytes used=268417580, alloc=2752008, time=28.01
bytes used=269417864, alloc=2752008, time=28.32
bytes used=270418024, alloc=2752008, time=28.58
bytes used=271418256, alloc=2752008, time=28.66
bytes used=272418496, alloc=2752008, time=28.79
bytes used=273418668, alloc=2752008, time=29.18
bytes used=274418848, alloc=2752008, time=29.29
bytes used=275419020, alloc=2752008, time=29.40
bytes used=276419644, alloc=2752008, time=29.81
bytes used=277419840, alloc=2752008, time=29.90
> 
# d^2/dxdy
> simplify( diff(interp_2d_cube_order4_smooth0,x,y) );
bytes used=278420084, alloc=2752008, time=30.01
bytes used=279420444, alloc=2752008, time=30.09
bytes used=280420608, alloc=2752008, time=30.16
4/9 DATA(1, 1) - 1/18 DATA(-1, -2) + 1/144 DATA(-2, -2) + 1/18 DATA(1, -2)

     + 1/18 DATA(-2, 1) - 1/18 DATA(-2, -1) - 1/144 DATA(2, -2)

     - 1/144 DATA(-2, 2) + 4/9 DATA(-1, -1) - 4/9 DATA(1, -1) - 4/9 DATA(-1, 1)

     + 1/18 DATA(2, -1) - 1/18 DATA(1, 2) + 1/18 DATA(-1, 2) - 1/18 DATA(2, 1)

     + 1/144 DATA(2, 2) + 16/9 x y DATA(1, -1) - 1/9 x y DATA(1, -2)

     - 1/9 x y DATA(-2, 1) - 1/9 x y DATA(-2, -1) + 1/144 x y DATA(2, -2)

     + 1/144 x y DATA(-2, 2) + 16/9 x y DATA(-1, -1) - 1/9 x y DATA(2, 1)

     + 1/144 x y DATA(2, 2) + 16/9 x y DATA(-1, 1) - 1/9 x y DATA(2, -1)

                                                         2
     - 1/9 x y DATA(1, 2) - 1/9 x y DATA(-1, 2) + 1/3 x y  DATA(1, 2)

               2                      2                     2
     + 1/24 x y  DATA(2, 1) - 1/48 x y  DATA(2, 2) - 2/3 x y  DATA(-1, 1)

               2                      2                     2
     - 1/24 x y  DATA(2, -1) - 2/3 x y  DATA(1, 1) - 1/3 x y  DATA(-1, -2)

               2                       2                       2
     + 1/48 x y  DATA(-2, -2) - 1/3 x y  DATA(1, -2) + 1/24 x y  DATA(-2, 1)

              2                       2                      3
     + 2/3 x y  DATA(-1, -1) + 2/3 x y  DATA(1, -1) + 2/9 x y  DATA(1, -2)

               2                        2                       2
     - 1/24 x y  DATA(-2, -1) + 1/48 x y  DATA(2, -2) - 1/48 x y  DATA(-2, 2)

              2                      3                     3
     + 1/3 x y  DATA(-1, 2) - 8/9 x y  DATA(1, 1) + 2/9 x y  DATA(-1, -2)

               3                       3                       3
     - 1/72 x y  DATA(-2, -2) - 8/9 x y  DATA(-1, -1) - 8/9 x y  DATA(1, -1)

               3                       3                       3
     + 1/18 x y  DATA(-2, -1) + 2/9 x y  DATA(-1, 2) + 1/18 x y  DATA(2, 1)

               3                       3                       3
     + 1/18 x y  DATA(-2, 1) - 1/72 x y  DATA(2, -2) - 1/72 x y  DATA(-2, 2)

            2  3                    2  3                    2  3
     + 1/3 x  y  DATA(1, -1) - 1/3 x  y  DATA(-1, 1) - 1/6 x  y  DATA(2, -1)

             2  3                   2  3                        3
     - 1/12 x  y  DATA(1, 2) - 1/3 x  y  DATA(-1, -1) - 1/72 x y  DATA(2, 2)

            2  3                    2  3                      2  3
     + 1/3 x  y  DATA(1, 1) + 1/12 x  y  DATA(-1, -2) - 1/24 x  y  DATA(-2, -2)

             2  3                    2  3                    2  3
     - 1/12 x  y  DATA(1, -2) + 1/6 x  y  DATA(-2, 1) + 1/6 x  y  DATA(-2, -1)

             2  3                      3                       3
     + 1/24 x  y  DATA(2, -2) - 8/9 x y  DATA(-1, 1) + 1/18 x y  DATA(2, -1)

              3                    2  3                     2  3
     + 2/9 x y  DATA(1, 2) + 1/12 x  y  DATA(-1, 2) + 1/24 x  y  DATA(2, 2)

            2  2                    2  3                    2  3
     + 1/4 x  y  DATA(1, 1) - 1/24 x  y  DATA(-2, 2) - 1/6 x  y  DATA(2, 1)

             2  2                     2  2                    2  2
     - 1/16 x  y  DATA(2, -2) - 1/16 x  y  DATA(-2, 2) + 1/4 x  y  DATA(-1, -1)

            2  2                    2  2                     2
     - 1/4 x  y  DATA(1, -1) - 1/4 x  y  DATA(-1, 1) + 1/48 x  y DATA(-2, 2)

            2  2                   2  2                      2  2
     - 1/8 x  y  DATA(1, 2) - 1/8 x  y  DATA(-1, -2) + 1/16 x  y  DATA(-2, -2)

            2  2                    2  2                    2  2
     + 1/8 x  y  DATA(1, -2) + 1/8 x  y  DATA(-2, 1) - 1/8 x  y  DATA(-2, -1)

             2                      2                      2
     + 1/24 x  y DATA(1, -2) - 1/3 x  y DATA(-2, 1) - 1/3 x  y DATA(-2, -1)

             2                      2                       2
     - 1/48 x  y DATA(2, -2) + 2/3 x  y DATA(-1, -1) - 2/3 x  y DATA(1, -1)

            2                      2                      2  2
     + 2/3 x  y DATA(-1, 1) + 1/3 x  y DATA(2, -1) + 1/8 x  y  DATA(2, -1)

            2  2                    2  2                    2  2
     + 1/8 x  y  DATA(-1, 2) - 1/8 x  y  DATA(2, 1) + 1/16 x  y  DATA(2, 2)

            2                      2                        2
     - 2/3 x  y DATA(1, 1) - 1/24 x  y DATA(-1, -2) + 1/48 x  y DATA(-2, -2)

             2                     2                      2
     + 1/24 x  y DATA(1, 2) + 1/3 x  y DATA(2, 1) - 1/48 x  y DATA(2, 2)

             2
     - 1/24 x  y DATA(-1, 2) + 16/9 x y DATA(1, 1) - 1/9 x y DATA(-1, -2)

                                      3                    3
     + 1/144 x y DATA(-2, -2) + 1/18 x  DATA(1, 2) - 1/12 x  DATA(0, 2)

             3                    3                    3
     + 1/18 x  DATA(-1, 2) + 1/9 x  DATA(2, 1) - 1/72 x  DATA(2, 2)

            3  3                   3  3                   3  3
     - 2/3 x  y  DATA(0, 1) + 4/9 x  y  DATA(1, 1) - 1/9 x  y  DATA(-1, -2)

            3  3                    3  3                    3
     + 1/6 x  y  DATA(0, -2) - 2/3 x  y  DATA(0, -1) - 4/9 y  DATA(1, 1)

            3                        3                     3
     - 1/9 y  DATA(-1, -2) - 1/12 x y  DATA(2, 0) - 5/2 x y  DATA(0, 0)

              3                      3                      3
     + 4/3 x y  DATA(1, 0) - 1/12 x y  DATA(-2, 0) + 4/3 x y  DATA(-1, 0)

              3                    2                     2
     + 5/3 x y  DATA(0, -1) - 5/8 x  y DATA(2, 0) + 5/4 x  y DATA(1, 0)

            2                         3                   2
     + 5/8 x  y DATA(-2, 0) - 5/12 x y  DATA(0, 2) - 5/4 x  y DATA(-1, 0)

              3                      3                     2
     + 5/3 x y  DATA(0, 1) - 5/12 x y  DATA(0, -2) + 1/24 x  DATA(-1, -2)

             2                      2                    2
     - 1/48 x  DATA(-2, -2) - 1/24 x  DATA(1, -2) - 1/6 x  DATA(-2, 1)

            2
     + 1/6 x  DATA(-2, -1) + 5/3 y DATA(-1, 0) + 5/24 y DATA(2, 0)

                               3                     3
     - 5/3 y DATA(1, 0) - 2/3 y  DATA(-1, 0) - 1/12 y  DATA(2, 0)

            3                    3
     + 2/3 y  DATA(1, 0) + 1/12 y  DATA(-2, 0) - 5/24 y DATA(-2, 0)

              2                     2                      2
     + 5/4 x y  DATA(0, 1) + 5/8 x y  DATA(0, -2) - 5/4 x y  DATA(0, -1)

              2
     - 5/8 x y  DATA(0, 2) + 5/24 x y DATA(-2, 0) - 10/3 x y DATA(-1, 0)

     - 10/3 x y DATA(0, -1) + 5/24 x y DATA(0, 2) + 5/24 x y DATA(2, 0)

     + 25/4 x y DATA(0, 0) - 10/3 x y DATA(1, 0) + 5/24 x y DATA(0, -2)

            2  3                   2  3
     + 1/4 x  y  DATA(2, 0) - 1/2 x  y  DATA(1, 0) - 10/3 x y DATA(0, 1)

            2  3
     - 1/4 x  y  DATA(-2, 0) - 1/9 x DATA(-1, 2) - 1/18 x DATA(2, 1)

                                  2                     2
     + 1/144 x DATA(2, 2) + 1/48 x  DATA(2, -2) + 1/48 x  DATA(-2, 2)

            2                     2                    2
     - 1/3 x  DATA(-1, -1) + 1/3 x  DATA(1, -1) + 1/3 x  DATA(-1, 1)

            2                     2                    2
     - 1/6 x  DATA(2, -1) + 1/24 x  DATA(1, 2) - 1/24 x  DATA(-1, 2)

            2                    2                   2
     + 1/6 x  DATA(2, 1) - 1/48 x  DATA(2, 2) - 1/3 x  DATA(1, 1)

     + 1/18 x DATA(-2, -1) - 1/144 x DATA(2, -2) + 1/144 x DATA(-2, 2)

     - 8/9 x DATA(-1, -1) + 5/3 x DATA(0, -1) - 8/9 x DATA(1, -1)

     + 8/9 x DATA(-1, 1) + 1/18 x DATA(2, -1) - 1/9 x DATA(1, 2)

                                3                    3
     + 5/24 x DATA(0, 2) + 2/3 x  DATA(0, 1) - 1/18 x  DATA(-1, -2)

             3                     3                      3
     + 1/12 x  DATA(0, -2) + 1/72 x  DATA(-2, -2) - 1/18 x  DATA(1, -2)

            3
     + 1/9 x  DATA(-2, 1) - 5/3 x DATA(0, 1) + 8/9 x DATA(1, 1)

     + 1/9 x DATA(-1, -2) - 5/24 x DATA(0, -2) - 1/144 x DATA(-2, -2)

                                                     3
     + 1/9 x DATA(1, -2) - 1/18 x DATA(-2, 1) - 4/9 x  DATA(1, 1)

            3                      3                    3
     - 1/9 x  DATA(-2, -1) - 1/72 x  DATA(-2, 2) + 4/9 x  DATA(-1, -1)

            3                    3                    3
     - 2/3 x  DATA(0, -1) + 4/9 x  DATA(1, -1) - 4/9 x  DATA(-1, 1)

             3                      3                      3
     + 1/72 x  DATA(2, -2) + 2/9 y x  DATA(-2, 1) + 2/9 y x  DATA(-2, -1)

               3                       3                     3
     - 1/72 y x  DATA(2, -2) - 5/12 y x  DATA(2, 0) - 5/2 y x  DATA(0, 0)

              3                      3                      3
     + 5/3 y x  DATA(1, 0) - 5/12 y x  DATA(-2, 0) + 5/3 y x  DATA(-1, 0)

              3                    2  3                      3
     + 4/3 y x  DATA(0, -1) + 1/2 x  y  DATA(-1, 0) + 2/9 y x  DATA(2, 1)

               3                      3                        3
     - 1/72 y x  DATA(2, 2) - 1/72 y x  DATA(-2, -2) + 1/18 y x  DATA(1, -2)

               3                       3                      3
     + 1/18 y x  DATA(-1, -2) - 8/9 y x  DATA(-1, 1) + 2/9 y x  DATA(2, -1)

              3                       3                      3
     - 8/9 y x  DATA(1, -1) + 1/18 y x  DATA(1, 2) - 1/12 y x  DATA(0, 2)

               3                       3                    3  2
     + 1/18 y x  DATA(-1, 2) - 1/12 y x  DATA(0, -2) + 1/6 x  y  DATA(-1, -2)

            3  2                     3  2                     3  2
     - 1/4 x  y  DATA(0, -2) - 1/24 x  y  DATA(-2, -2) + 1/6 x  y  DATA(1, -2)

               3                      3                       3
     - 1/72 y x  DATA(-2, 2) - 8/9 y x  DATA(-1, -1) + 4/3 y x  DATA(0, 1)

              3                    3  2                     3  2
     - 8/9 y x  DATA(1, 1) - 1/12 x  y  DATA(-2, 1) + 1/12 x  y  DATA(-2, -1)

             3  2                     3  2                    3  2
     - 1/24 x  y  DATA(2, -2) + 1/24 x  y  DATA(-2, 2) - 1/2 x  y  DATA(0, 1)

            3  2                   3  3                    3  2
     + 1/3 x  y  DATA(1, 1) + 1/6 x  y  DATA(-2, 0) - 1/3 x  y  DATA(-1, -1)

            3  2                    3  2                     3  2
     - 1/3 x  y  DATA(1, -1) + 1/3 x  y  DATA(-1, 1) + 1/12 x  y  DATA(2, -1)

            3  2                   3  2                   3  2
     - 1/6 x  y  DATA(1, 2) + 1/4 x  y  DATA(0, 2) - 1/6 x  y  DATA(-1, 2)

             3  2                   3  2                    3  3
     - 1/12 x  y  DATA(2, 1) + 1/2 x  y  DATA(0, -1) - 2/3 x  y  DATA(-1, 0)

            3                     2                      2
     - 1/9 x  DATA(2, -1) - 1/48 y  DATA(-2, -2) + 1/24 y  DATA(2, 1)

             2                   2                     2
     - 1/48 y  DATA(2, 2) - 1/6 y  DATA(1, -2) - 1/24 y  DATA(2, -1)

            2                    2                   2
     + 1/3 y  DATA(-1, 1) + 1/6 y  DATA(1, 2) - 1/6 y  DATA(-1, 2)

            2                     2                     3
     - 1/3 y  DATA(-1, -1) + 1/3 y  DATA(1, -1) + 1/18 y  DATA(2, 1)

             3                   2                    2
     - 1/72 y  DATA(2, 2) - 1/3 y  DATA(1, 1) + 1/48 y  DATA(2, -2)

             2                     2                     2
     + 1/48 y  DATA(-2, 2) - 1/24 y  DATA(-2, 1) + 1/24 y  DATA(-2, -1)

            2                     3  3                    3  3
     + 1/6 y  DATA(-1, -2) + 4/9 x  y  DATA(-1, 1) - 1/9 x  y  DATA(2, -1)

            3  3                    3  3                    3
     + 4/9 x  y  DATA(1, -1) - 1/9 x  y  DATA(1, 2) - 1/72 y  DATA(2, -2)

             3                     3                     3
     - 1/18 y  DATA(-2, -1) + 1/9 y  DATA(1, -2) - 1/18 y  DATA(-2, 1)

             3                      3                    3
     + 1/72 y  DATA(-2, -2) + 1/72 y  DATA(-2, 2) + 4/9 y  DATA(-1, -1)

            3                    3                     3
     - 4/9 y  DATA(1, -1) + 4/9 y  DATA(-1, 1) + 1/18 y  DATA(2, -1)

            3                   3
     + 1/9 y  DATA(1, 2) - 1/9 y  DATA(-1, 2) - 1/9 y DATA(2, -1)

     - 8/9 y DATA(-1, -1) - 1/9 y DATA(2, 1) + 1/18 y DATA(-1, 2)

     - 1/144 y DATA(-2, 2) + 8/9 y DATA(1, 1) + 1/144 y DATA(2, 2)

     + 1/18 y DATA(-1, -2) - 1/144 y DATA(-2, -2) + 1/9 y DATA(-2, 1)

     - 1/18 y DATA(1, -2) + 1/144 y DATA(2, -2) + 1/9 y DATA(-2, -1)

     + 8/9 y DATA(1, -1) - 1/18 y DATA(1, 2) - 8/9 y DATA(-1, 1)

            3  3                   3  3                    3  3
     + 1/6 x  y  DATA(0, 2) - 1/9 x  y  DATA(-1, 2) - 1/9 x  y  DATA(2, 1)

             3  3                    3  3                     3  3
     + 1/36 x  y  DATA(2, 2) + 1/36 x  y  DATA(-2, -2) - 1/9 x  y  DATA(1, -2)

            3  3                    3  3                      3  3
     - 1/9 x  y  DATA(-2, 1) - 1/9 x  y  DATA(-2, -1) + 1/36 x  y  DATA(2, -2)

             3  3                    3  3                     3  3
     + 1/36 x  y  DATA(-2, 2) + 4/9 x  y  DATA(-1, -1) + 1/6 x  y  DATA(2, 0)

             3  2               3  3                   3  3
     + 1/24 x  y  DATA(2, 2) + x  y  DATA(0, 0) - 2/3 x  y  DATA(1, 0)

> coeffs_as_lc_of_data(%, posn_list_2d_size5);
bytes used=281438888, alloc=2752008, time=30.24
bytes used=282443316, alloc=2752008, time=30.31
                       3         2         2                       2  2
[COEFF(-2, -2) = 1/72 x  - 1/48 x  + 1/48 x  y + 1/144 x y + 1/16 x  y

             2  3           2         3  2                   3           3
     - 1/24 x  y  + 1/48 x y  - 1/24 x  y  - 1/144 y + 1/72 y  - 1/72 x y

                                 3         2         3  3
     - 1/144 x + 1/144 - 1/72 y x  - 1/48 y  + 1/36 x  y , COEFF(-1, -2) =

           2  2          2        3  2          3        3         3
    - 1/8 x  y  - 1/3 x y  + 1/6 x  y  + 2/9 x y  - 1/9 y  - 1/18 x

               3                                   2  3         2          3  3
     + 1/18 y x  - 1/18 + 1/18 y - 1/9 x y + 1/12 x  y  - 1/24 x  y - 1/9 x  y

                     2        2                      3  3          2         3
     + 1/9 x + 1/24 x  + 1/6 y , COEFF(0, -2) = 1/6 x  y  + 5/8 x y  + 1/12 x

                        3           3        3  2
     - 5/24 x - 5/12 x y  - 1/12 y x  - 1/4 x  y  + 5/24 x y, COEFF(1, -2) =

                 2        2           3                    3        3
    1/18 - 1/24 x  - 1/6 y  + 1/18 y x  - 1/9 x y + 2/9 x y  + 1/9 y

            3  2                 2                     2        3  3
     + 1/6 x  y  + 1/9 x + 1/24 x  y - 1/18 y - 1/3 x y  - 1/9 x  y

             2  3         3        2  2
     - 1/12 x  y  - 1/18 x  + 1/8 x  y , COEFF(2, -2) = - 1/144 x + 1/144 x y

             3  2         2  2                   3         3         2  3
     - 1/24 x  y  - 1/16 x  y  - 1/144 - 1/72 y x  + 1/72 x  + 1/24 x  y

               3         2         3                   3  3           2
     - 1/72 x y  + 1/48 x  - 1/72 y  + 1/144 y + 1/36 x  y  + 1/48 x y

             2           2                        2        2          3  3
     - 1/48 x  y + 1/48 y , COEFF(-2, -1) = 1/24 y  - 1/3 x  y - 1/9 x  y

               3                   3  2                 2  2         3
     + 1/18 x y  - 1/9 x y + 1/12 x  y  + 1/18 x - 1/8 x  y  - 1/18 y

               2          3                       2        3        2  3
     - 1/24 x y  + 2/9 y x  - 1/18 + 1/9 y + 1/6 x  - 1/9 x  + 1/6 x  y ,

                             3        3          3        2  2
    COEFF(-1, -1) = - 8/9 y x  + 4/9 x  - 8/9 x y  + 1/4 x  y  + 16/9 x y

              2                2                3  3                2        3
     + 2/3 x y  - 8/9 y + 2/3 x  y + 4/9 + 4/9 x  y  - 8/9 x - 1/3 y  + 4/9 y

            2        3  2        2  3                        3  3          3
     - 1/3 x  - 1/3 x  y  - 1/3 x  y , COEFF(0, -1) = - 2/3 x  y  + 4/3 y x

            3  2          2                   3          3
     + 1/2 x  y  - 5/4 x y  - 10/3 x y - 2/3 x  + 5/3 x y  + 5/3 x,

                                  2        3  3        2  3        2  2
    COEFF(1, -1) = - 8/9 x + 1/3 x  + 4/9 x  y  + 1/3 x  y  - 1/4 x  y

                       2        2            3          2        3
     + 16/9 x y + 1/3 y  - 2/3 x  y - 8/9 y x  + 2/3 x y  + 4/9 x  - 4/9

              3                3        3  2
     - 8/9 x y  + 8/9 y - 4/9 y  - 1/3 x  y , COEFF(2, -1) = 1/18 + 1/18 x

               3        3        3  3        2  2        2          2  3
     + 1/18 x y  - 1/9 x  - 1/9 x  y  + 1/8 x  y  + 1/3 x  y - 1/6 x  y

             3         2         3  2                  3                  2
     + 1/18 y  - 1/24 y  + 1/12 x  y  - 1/9 y + 2/9 y x  - 1/9 x y - 1/6 x

               2                                 2           3        2  3
     - 1/24 x y , COEFF(-2, 0) = 5/24 x y + 5/8 x  y + 1/12 y  - 1/4 x  y

               3        3  3                    3                        3
     - 1/12 x y  + 1/6 x  y  - 5/24 y - 5/12 y x , COEFF(-1, 0) = 4/3 x y

                       2          3  3        3          3        2  3
     - 10/3 x y - 5/4 x  y - 2/3 x  y  - 2/3 y  + 5/3 y x  + 1/2 x  y  + 5/3 y,

                           3                     3    3  3
    COEFF(0, 0) = - 5/2 x y  + 25/4 x y - 5/2 y x  + x  y , COEFF(1, 0) =

                              2  3        3          3        2            3
    - 10/3 x y - 5/3 y - 1/2 x  y  + 2/3 y  + 4/3 x y  + 5/4 x  y + 5/3 y x

            3  3                     3  3                               3
     - 2/3 x  y , COEFF(2, 0) = 1/6 x  y  + 5/24 y + 5/24 x y - 1/12 x y

            2           3           3        2  3                      2  3
     - 5/8 x  y - 1/12 y  - 5/12 y x  + 1/4 x  y , COEFF(-2, 1) = 1/6 x  y

               3                  3                   3  2        3  3
     + 1/18 x y  - 1/18 x - 1/18 y  - 1/9 x y - 1/12 x  y  - 1/9 x  y

            2  2        2                    2        2        3
     + 1/8 x  y  - 1/3 x  y + 1/18 + 1/24 x y  - 1/6 x  + 1/9 x  + 1/9 y

              3         2                              2  3        2
     + 2/9 y x  - 1/24 y , COEFF(-1, 1) = - 4/9 - 1/3 x  y  + 2/3 x  y

              3          3          2        3        2        3        3  2
     - 8/9 y x  - 8/9 x y  - 2/3 x y  + 4/9 y  + 1/3 x  - 4/9 x  + 1/3 x  y

                    2        2  2                   3  3
     + 8/9 x + 1/3 y  - 1/4 x  y  + 16/9 x y + 4/9 x  y  - 8/9 y, COEFF(0, 1)

              2          3                   3  3          3        3
     = 5/4 x y  + 5/3 x y  - 10/3 x y - 2/3 x  y  + 4/3 y x  + 2/3 x  - 5/3 x

            3  2                     3  3                   3  2        3
     - 1/2 x  y , COEFF(1, 1) = 4/9 x  y  + 16/9 x y + 1/3 x  y  - 4/9 x

            2  3        2          2          2                2  2        3
     + 1/3 x  y  - 2/3 x  y - 1/3 y  - 2/3 x y  + 8/9 x + 1/4 x  y  - 4/9 y

            2          3                        3                        3
     - 1/3 x  - 8/9 x y  + 8/9 y + 4/9 - 8/9 y x , COEFF(2, 1) = 1/18 x y

              3         3  2        2  2        2           3           2
     + 2/9 y x  - 1/12 x  y  - 1/8 x  y  + 1/3 x  y + 1/18 y  + 1/24 x y

            2  3        2        3  3        3
     - 1/6 x  y  + 1/6 x  - 1/9 x  y  + 1/9 x  - 1/9 x y - 1/18 - 1/18 x

             2                                           2         2         3
     + 1/24 y  - 1/9 y, COEFF(-2, 2) = - 1/144 - 1/48 x y  + 1/48 x  - 1/72 x

             2             3                   3  3         2         3
     + 1/48 x  y - 1/72 x y  + 1/144 x + 1/36 x  y  + 1/48 y  + 1/72 y

                         2  3         2  2                     3         3  2
     + 1/144 x y - 1/24 x  y  - 1/16 x  y  - 1/144 y - 1/72 y x  + 1/24 x  y ,

                           2        3  3          3         2            2
    COEFF(-1, 2) = - 1/24 x  - 1/9 x  y  + 2/9 x y  - 1/24 x  y + 1/3 x y

             2  3           3                2  2        2
     + 1/12 x  y  + 1/18 y x  - 1/9 x + 1/8 x  y  - 1/6 y  - 1/9 x y + 1/18

            3                  3        3  2                         2
     - 1/9 y  + 1/18 y + 1/18 x  - 1/6 x  y , COEFF(0, 2) = - 5/8 x y

               3           3         3                 3  2
     - 5/12 x y  - 1/12 y x  - 1/12 x  + 5/24 x + 1/4 x  y  + 5/24 x y

            3  3                                2        3  3          3
     + 1/6 x  y , COEFF(1, 2) = - 1/18 + 1/3 x y  - 1/9 x  y  + 2/9 x y

             2  3        3  2         2           3        2  2           3
     - 1/12 x  y  - 1/6 x  y  + 1/24 x  y + 1/18 x  - 1/8 x  y  + 1/18 y x

                      2         2        3
     - 1/9 x y + 1/6 y  + 1/24 x  + 1/9 y  - 1/9 x - 1/18 y, COEFF(2, 2) =

            3                     2         2           3         2
    - 1/72 x  + 1/144 x - 1/48 x y  - 1/48 x  - 1/72 x y  - 1/48 y  + 1/144

             3  2         2  2                   3  3         3
     + 1/24 x  y  + 1/16 x  y  + 1/144 y + 1/36 x  y  - 1/72 y  + 1/144 x y

             2  3           3         2
     + 1/24 x  y  - 1/72 y x  - 1/48 x  y]

> print_coeffs__lc_of_data(%, "coeffs_dxy->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order4.smooth0/coeffs-dxy.compute.c");
bytes used=283443680, alloc=2752008, time=30.40
bytes used=284443888, alloc=2752008, time=30.48
bytes used=285444044, alloc=2752008, time=30.56
bytes used=286446612, alloc=2752008, time=30.64
bytes used=287463008, alloc=2752008, time=30.71
bytes used=288473552, alloc=2752008, time=30.81
bytes used=289473776, alloc=2752008, time=30.91
bytes used=290474400, alloc=2752008, time=30.99
bytes used=291474552, alloc=2752008, time=31.43
bytes used=292474964, alloc=2752008, time=31.51
bytes used=293475132, alloc=2752008, time=31.58
bytes used=294476316, alloc=2752008, time=31.67
bytes used=295476512, alloc=2752008, time=31.78
bytes used=296476752, alloc=2752008, time=31.87
bytes used=297477148, alloc=2752008, time=31.98
bytes used=298483116, alloc=2752008, time=32.42
bytes used=299483296, alloc=2752008, time=32.65
bytes used=300483540, alloc=2752008, time=32.72
bytes used=301483760, alloc=2752008, time=32.85
bytes used=302483980, alloc=2752008, time=33.02
bytes used=303484724, alloc=2752008, time=33.36
bytes used=304484976, alloc=2752008, time=33.55
bytes used=305485220, alloc=2752008, time=33.62
bytes used=306485452, alloc=2752008, time=33.75
bytes used=307486748, alloc=2752008, time=33.84
bytes used=308486968, alloc=2752008, time=34.25
bytes used=309487124, alloc=2752008, time=34.33
bytes used=310487328, alloc=2752008, time=34.43
bytes used=311487520, alloc=2752008, time=34.84
bytes used=312487920, alloc=2752008, time=35.03
bytes used=313488080, alloc=2752008, time=35.11
bytes used=314488284, alloc=2752008, time=35.34
bytes used=315488740, alloc=2752008, time=35.63
bytes used=316489112, alloc=2752008, time=35.76
> 
# d^2/dy^2
> simplify( diff(interp_2d_cube_order4_smooth0,y,y) );
bytes used=317490284, alloc=2752008, time=35.86
bytes used=318490452, alloc=2752008, time=35.93
bytes used=319490640, alloc=2752008, time=36.01
                                                            2
- 5/2 DATA(0, 0) + 4/3 DATA(0, 1) - 1/12 DATA(0, -2) - 5/3 x  DATA(0, 1)

             2                    3  2                     2
     + 5/48 x  DATA(-2, 0) + 1/2 x  y  DATA(-1, 0) + 5/48 x  DATA(0, -2)

            2                    2                     2
     - 5/3 x  DATA(0, -1) - 5/3 x  DATA(-1, 0) + 5/48 x  DATA(0, 2)

             2                                           4
     + 25/8 x  DATA(0, 0) - 5/24 x DATA(-2, 0) - 1/12 y x  DATA(1, 2)

              4                   3  2                   3  2
     + 1/8 y x  DATA(0, 2) - 1/2 x  y  DATA(1, 0) + 1/4 x  y  DATA(2, 0)

            3  2                    2  2                   2  2
     - 1/4 x  y  DATA(-2, 0) + 5/2 x  y  DATA(0, 1) - 1/8 x  y  DATA(-2, 0)

              4                       4                     2  4
     + 1/6 y x  DATA(-1, 1) + 1/24 y x  DATA(2, -1) - 1/12 y  x  DATA(1, 2)

             2  4                  2  2                    2  2
     - 1/12 y  x  DATA(-1, 2) + 2 x  y  DATA(-1, 0) - 1/8 x  y  DATA(2, 0)

          2  2                   2  4                    2  4
     + 2 x  y  DATA(1, 0) + 1/8 y  x  DATA(0, -2) + 1/8 y  x  DATA(0, 2)

            2  4                    2  4                     2  4
     + 1/3 y  x  DATA(1, -1) + 1/3 y  x  DATA(-1, 1) - 1/12 y  x  DATA(2, -1)

            2  4                    2  4                   2  4
     - 1/2 y  x  DATA(-1, 0) - 1/2 y  x  DATA(0, 1) - 1/2 y  x  DATA(0, -1)

            2  4                    2  4                       4
     + 3/4 y  x  DATA(0, 0) - 1/12 y  x  DATA(-2, 1) + 1/12 y x  DATA(1, -2)

              4                    2  4                     2  4
     - 1/4 y x  DATA(0, 1) - 1/12 y  x  DATA(1, -2) - 1/12 y  x  DATA(-1, -2)

            2  4                   2  4                   2  4
     + 1/8 y  x  DATA(2, 0) - 1/2 y  x  DATA(1, 0) + 1/8 y  x  DATA(-2, 0)

             2  4                     2  4                    2  4
     + 1/48 y  x  DATA(2, -2) + 1/48 y  x  DATA(-2, 2) + 1/3 y  x  DATA(-1, -1)

            2  4                    2  4                      2  4
     + 1/3 y  x  DATA(1, 1) + 1/48 y  x  DATA(-2, -2) - 1/12 y  x  DATA(-2, -1)

             2  4                    2  4                   4
     - 1/12 y  x  DATA(2, 1) + 1/48 y  x  DATA(2, 2) - 5/8 x  DATA(0, 0)

             4
     - 1/48 x  DATA(0, -2) - 5/3 x DATA(1, 0) + 5/24 x DATA(2, 0)

                                  4                      4
     + 5/3 x DATA(-1, 0) + 1/6 y x  DATA(1, 1) - 1/48 y x  DATA(2, -2)

               4                      4                       4
     + 1/48 y x  DATA(-2, 2) - 1/6 y x  DATA(-1, -1) + 1/4 y x  DATA(0, -1)

              4                       4                       4
     - 1/6 y x  DATA(1, -1) + 1/12 y x  DATA(-1, -2) - 1/8 y x  DATA(0, -2)

               4                      4                    4
     - 1/48 y x  DATA(-2, -2) + 1/72 x  DATA(1, 2) + 1/18 x  DATA(2, 1)

              4                   4                    4
     - 1/288 x  DATA(2, 2) + 1/3 x  DATA(0, 1) + 1/18 x  DATA(-2, 1)

             4                     4                       4
     - 5/48 x  DATA(-2, 0) + 1/18 x  DATA(-2, -1) - 1/288 x  DATA(2, -2)

              4                    4                     4
     - 1/288 x  DATA(-2, 2) - 2/9 x  DATA(-1, -1) - 2/9 x  DATA(1, 1)

              4                     4                     4
     - 1/288 x  DATA(-2, -2) + 1/3 x  DATA(0, -1) + 1/72 x  DATA(-1, 2)

          2                    4                   4
     + 3 y  DATA(0, 0) - 1/48 x  DATA(0, 2) - 2/9 x  DATA(1, -1)

            4                     4                     4
     - 2/9 x  DATA(-1, 1) + 1/18 x  DATA(2, -1) + 5/12 x  DATA(-1, 0)

             4                     4                      4
     + 1/72 x  DATA(1, -2) + 1/72 x  DATA(-1, -2) - 5/48 x  DATA(2, 0)

             4
     + 5/12 x  DATA(1, 0) - y DATA(0, 1) - 1/2 y DATA(0, -2) + y DATA(0, -1)

                                  4                       4
     + 1/2 y DATA(0, 2) - 1/12 y x  DATA(-1, 2) - 1/24 y x  DATA(2, 1)

               4                      4                       4
     + 1/48 y x  DATA(2, 2) - 1/24 y x  DATA(-2, 1) + 1/24 y x  DATA(-2, -1)

            2                      2                     2
     + 5/8 x  y DATA(0, -2) + 5/4 x  y DATA(0, 1) - 5/8 x  y DATA(0, 2)

            2                       3                    3
     - 5/4 x  y DATA(0, -1) - 5/24 x  DATA(2, 0) + 5/12 x  DATA(1, 0)

             2                   2                 2
     + 5/48 x  DATA(2, 0) - 5/3 x  DATA(1, 0) - 2 y  DATA(0, 1)

            2                  2                    2
     + 1/2 y  DATA(0, -2) - 2 y  DATA(0, -1) + 1/2 y  DATA(0, 2)

             3                     3                     2  2
     - 5/12 x  DATA(-1, 0) + 5/24 x  DATA(-2, 0) - 15/4 x  y  DATA(0, 0)

            2  2                    2  2                   2  2
     - 5/8 x  y  DATA(0, -2) - 5/8 x  y  DATA(0, 2) + 5/2 x  y  DATA(0, -1)

     + 4/3 DATA(0, -1) - 1/12 DATA(0, 2) + 2/3 x y DATA(1, -1)

     - 1/3 x y DATA(1, -2) - 1/12 x y DATA(-2, 1) + 1/12 x y DATA(-2, -1)

     + 1/24 x y DATA(2, -2) + 1/24 x y DATA(-2, 2) - 2/3 x y DATA(-1, -1)

     + 1/12 x y DATA(2, 1) - 1/24 x y DATA(2, 2) + 2/3 x y DATA(-1, 1)

     - 1/12 x y DATA(2, -1) + 1/3 x y DATA(1, 2) - 1/3 x y DATA(-1, 2)

              2                     2                      2
     + 1/3 x y  DATA(1, 2) + 1/6 x y  DATA(2, 1) - 1/24 x y  DATA(2, 2)

              2                      2                      2
     + 4/3 x y  DATA(-1, 1) + 1/6 x y  DATA(2, -1) - 4/3 x y  DATA(1, 1)

              2                        2                       2
     - 1/3 x y  DATA(-1, -2) + 1/24 x y  DATA(-2, -2) + 1/3 x y  DATA(1, -2)

              2                      2                       2
     - 1/6 x y  DATA(-2, 1) + 4/3 x y  DATA(-1, -1) - 4/3 x y  DATA(1, -1)

              2                        2                       2
     - 1/6 x y  DATA(-2, -1) - 1/24 x y  DATA(2, -2) + 1/24 x y  DATA(-2, 2)

              2                    2  2                    2  2
     - 1/3 x y  DATA(-1, 2) - 4/3 x  y  DATA(1, 1) - 1/48 x  y  DATA(2, -2)

             2  2                    2  2                     2  2
     - 1/48 x  y  DATA(-2, 2) - 4/3 x  y  DATA(-1, -1) - 4/3 x  y  DATA(1, -1)

            2  2                     2                      2  2
     - 4/3 x  y  DATA(-1, 1) - 1/48 x  y DATA(-2, 2) + 1/3 x  y  DATA(1, 2)

            2  2                      2  2                     2  2
     + 1/3 x  y  DATA(-1, -2) - 1/48 x  y  DATA(-2, -2) + 1/3 x  y  DATA(1, -2)

             2  2                     2  2                     2
     + 1/12 x  y  DATA(-2, 1) + 1/12 x  y  DATA(-2, -1) - 1/3 x  y DATA(1, -2)

             2                       2                        2
     + 1/24 x  y DATA(-2, 1) - 1/24 x  y DATA(-2, -1) + 1/48 x  y DATA(2, -2)

            2                       2                      2
     + 2/3 x  y DATA(-1, -1) + 2/3 x  y DATA(1, -1) - 2/3 x  y DATA(-1, 1)

             2                       2  2                    2  2
     - 1/24 x  y DATA(2, -1) + 1/12 x  y  DATA(2, -1) + 1/3 x  y  DATA(-1, 2)

             2  2                    2  2                   2
     + 1/12 x  y  DATA(2, 1) - 1/48 x  y  DATA(2, 2) - 2/3 x  y DATA(1, 1)

            2                        2                       2
     - 1/3 x  y DATA(-1, -2) + 1/48 x  y DATA(-2, -2) + 1/3 x  y DATA(1, 2)

             2                      2                     2
     + 1/24 x  y DATA(2, 1) - 1/48 x  y DATA(2, 2) + 1/3 x  y DATA(-1, 2)

     - 2/3 x y DATA(1, 1) + 1/3 x y DATA(-1, -2) - 1/24 x y DATA(-2, -2)

             3                    3                    3
     + 1/72 x  DATA(1, 2) - 1/72 x  DATA(-1, 2) + 1/9 x  DATA(2, 1)

              3                    2                       2
     - 1/144 x  DATA(2, 2) - 1/18 x  DATA(-1, -2) + 1/288 x  DATA(-2, -2)

             2                     2                     2
     - 1/18 x  DATA(1, -2) - 1/18 x  DATA(-2, 1) - 1/18 x  DATA(-2, -1)

     + 1/18 x DATA(-1, 2) - 1/9 x DATA(2, 1) + 1/144 x DATA(2, 2)

              2                      2                    2
     + 1/288 x  DATA(2, -2) + 1/288 x  DATA(-2, 2) + 8/9 x  DATA(-1, -1)

            2                    2                     2
     + 8/9 x  DATA(1, -1) + 8/9 x  DATA(-1, 1) - 1/18 x  DATA(2, -1)

             2                    2                     2
     - 1/18 x  DATA(1, 2) - 1/18 x  DATA(-1, 2) - 1/18 x  DATA(2, 1)

              2                   2
     + 1/288 x  DATA(2, 2) + 8/9 x  DATA(1, 1) + 1/9 x DATA(-2, -1)

     + 1/144 x DATA(2, -2) - 1/144 x DATA(-2, 2) - 8/9 x DATA(-1, -1)

     + 8/9 x DATA(1, -1) - 8/9 x DATA(-1, 1) - 1/9 x DATA(2, -1)

                                 3                       3
     - 1/18 x DATA(1, 2) - 1/72 x  DATA(-1, -2) + 1/144 x  DATA(-2, -2)

             3                    3
     + 1/72 x  DATA(1, -2) - 1/9 x  DATA(-2, 1) + 8/9 x DATA(1, 1)

     + 1/18 x DATA(-1, -2) - 1/144 x DATA(-2, -2) - 1/18 x DATA(1, -2)

                                3                   3
     + 1/9 x DATA(-2, 1) - 2/9 x  DATA(1, 1) - 1/9 x  DATA(-2, -1)

              3                    3                     3
     + 1/144 x  DATA(-2, 2) + 2/9 x  DATA(-1, -1) - 2/9 x  DATA(1, -1)

            3                      3                       3
     + 2/9 x  DATA(-1, 1) - 1/144 x  DATA(2, -2) + 1/12 y x  DATA(-2, 1)

               3                        3                       3
     - 1/12 y x  DATA(-2, -1) - 1/24 y x  DATA(2, -2) - 1/12 y x  DATA(2, 1)

               3                      3                        3
     + 1/24 y x  DATA(2, 2) + 1/24 y x  DATA(-2, -2) + 1/12 y x  DATA(1, -2)

               3                       3                       3
     - 1/12 y x  DATA(-1, -2) - 1/6 y x  DATA(-1, 1) + 1/12 y x  DATA(2, -1)

              3                       3                      3
     - 1/6 y x  DATA(1, -1) - 1/12 y x  DATA(1, 2) + 1/12 y x  DATA(-1, 2)

             3  2                      3  2
     + 1/12 x  y  DATA(-1, -2) - 1/24 x  y  DATA(-2, -2)

             3  2                       3                      3
     - 1/12 x  y  DATA(1, -2) - 1/24 y x  DATA(-2, 2) + 1/6 y x  DATA(-1, -1)

              3                   3  2                    3  2
     + 1/6 y x  DATA(1, 1) + 1/6 x  y  DATA(-2, 1) + 1/6 x  y  DATA(-2, -1)

             3  2                     3  2                    3  2
     + 1/24 x  y  DATA(2, -2) - 1/24 x  y  DATA(-2, 2) + 1/3 x  y  DATA(1, 1)

            3  2                     3  2                    3  2
     - 1/3 x  y  DATA(-1, -1) + 1/3 x  y  DATA(1, -1) - 1/3 x  y  DATA(-1, 1)

            3  2                     3  2                    3  2
     - 1/6 x  y  DATA(2, -1) - 1/12 x  y  DATA(1, 2) + 1/12 x  y  DATA(-1, 2)

            3  2                   3                      2
     - 1/6 x  y  DATA(2, 1) + 1/9 x  DATA(2, -1) + 1/4 x y  DATA(-2, 0)

            2                      2                   2
     - 2 x y  DATA(-1, 0) - 1/4 x y  DATA(2, 0) + 2 x y  DATA(1, 0)

             3  2
     + 1/24 x  y  DATA(2, 2)

> coeffs_as_lc_of_data(%, posn_list_2d_size5);
bytes used=320495256, alloc=2752008, time=36.09
                         2         2  2                   2           2  4
[COEFF(-2, -2) = 1/24 x y  - 1/48 x  y  - 1/144 x + 1/48 x  y + 1/48 y  x

                          4           3          2          4          3
     - 1/24 x y - 1/48 y x  + 1/24 y x  + 1/288 x  - 1/288 x  + 1/144 x

             3  2                            3         2        2          2  2
     - 1/24 x  y , COEFF(-1, -2) = - 1/12 y x  - 1/18 x  - 1/3 x  y + 1/3 x  y

             3  2          2         2  4         4         3
     + 1/12 x  y  - 1/3 x y  - 1/12 y  x  + 1/72 x  - 1/72 x  + 1/3 x y

               4                                   4        2
     + 1/12 y x  + 1/18 x, COEFF(0, -2) = - 1/8 y x  + 5/8 x  y - 1/2 y - 1/12

             2        2        2  4        2  2         4
     + 5/48 x  + 1/2 y  + 1/8 y  x  - 5/8 x  y  - 1/48 x , COEFF(1, -2) =

          3        2  2           3          2         3  2         2  4
    1/72 x  + 1/3 x  y  + 1/12 y x  + 1/3 x y  - 1/12 x  y  - 1/12 y  x

             4                 2             4         2
     + 1/72 x  - 1/18 x - 1/3 x  y + 1/12 y x  - 1/18 x  - 1/3 x y,

                             3         2  2           4           2
    COEFF(2, -2) = - 1/24 y x  - 1/48 x  y  - 1/48 y x  - 1/24 x y  + 1/144 x

              4         2  4         3  2                    2            2
     - 1/288 x  + 1/48 y  x  + 1/24 x  y  + 1/24 x y + 1/48 x  y + 1/288 x

              3                          4                   3         2
     - 1/144 x , COEFF(-2, -1) = 1/24 y x  + 1/9 x - 1/12 y x  - 1/18 x

            3  2        3         4         2  4          2         2
     + 1/6 x  y  - 1/9 x  + 1/18 x  - 1/12 y  x  - 1/6 x y  - 1/24 x  y

                        2  2                       3          4        4
     + 1/12 x y + 1/12 x  y , COEFF(-1, -1) = 2/9 x  - 1/6 y x  - 2/9 x

            2            2                2  4          3                  2
     + 2/3 x  y + 4/3 x y  - 8/9 x + 1/3 y  x  + 1/6 y x  - 2/3 x y + 8/9 x

            3  2        2  2                        2        2          4
     - 1/3 x  y  - 4/3 x  y , COEFF(0, -1) = - 5/3 x  - 5/4 x  y + 1/3 x  + 4/3

            2  4      2        2  2              4
     - 1/2 y  x  - 2 y  + 5/2 x  y  + y + 1/4 y x , COEFF(1, -1) = 2/3 x y

              2                2  4        2          2          4        4
     - 4/3 x y  + 8/9 x + 1/3 y  x  + 2/3 x  y + 8/9 x  - 1/6 y x  - 2/9 x

              3        2  2        3  2        3                         2
     - 1/6 y x  - 4/3 x  y  + 1/3 x  y  - 2/9 x , COEFF(2, -1) = - 1/24 x  y

               3         2  4                      4         4        3  2
     + 1/12 y x  - 1/12 y  x  - 1/12 x y + 1/24 y x  + 1/18 x  - 1/6 x  y

            3          2         2  2         2
     + 1/9 x  + 1/6 x y  + 1/12 x  y  - 1/18 x  - 1/9 x, COEFF(-2, 0) =

         2  4        3  2                   2         2         4         3
    1/8 y  x  - 1/4 x  y  - 5/24 x + 1/4 x y  + 5/48 x  - 5/48 x  + 5/24 x

            2  2                      3  2         4      2  2        2
     - 1/8 x  y , COEFF(-1, 0) = 1/2 x  y  + 5/12 x  + 2 x  y  - 2 x y

             3        2  4        2
     - 5/12 x  - 1/2 y  x  - 5/3 x  + 5/3 x,

                        2      2        4        2  4               2  2
    COEFF(0, 0) = 25/8 x  + 3 y  - 5/8 x  + 3/4 y  x  - 5/2 - 15/4 x  y ,

                         2  4         3                2        3  2         4
    COEFF(1, 0) = - 1/2 y  x  + 5/12 x  - 5/3 x - 5/3 x  - 1/2 x  y  + 5/12 x

          2  2        2                     2  4                  3         2
     + 2 x  y  + 2 x y , COEFF(2, 0) = 1/8 y  x  + 5/24 x - 5/24 x  + 5/48 x

              2        2  2        3  2         4
     - 1/4 x y  - 1/8 x  y  + 1/4 x  y  - 5/48 x , COEFF(-2, 1) = - 1/12 x y

             4           3        3  2           4          2         2
     + 1/18 x  + 1/12 y x  + 1/6 x  y  - 1/24 y x  - 1/6 x y  - 1/18 x

            3         2  4                 2           2  2
     - 1/9 x  - 1/12 y  x  + 1/9 x + 1/24 x  y + 1/12 x  y , COEFF(-1, 1) =

                   2          2  4        2  2          3        4        3
    - 8/9 x - 2/3 x  y + 1/3 y  x  - 4/3 x  y  - 1/6 y x  - 2/9 x  + 2/9 x

            2        3  2          2                    4
     + 8/9 x  - 1/3 x  y  + 4/3 x y  + 2/3 x y + 1/6 y x , COEFF(0, 1) =

           2  4        2          4        2  2        2          2
    - 1/2 y  x  + 5/4 x  y + 1/3 x  + 5/2 x  y  - 5/3 x  - y - 2 y  + 4/3

              4                       4        2  4        4          3
     - 1/4 y x , COEFF(1, 1) = 1/6 y x  + 1/3 y  x  - 2/9 x  + 1/6 y x  + 8/9 x

                      2  2          2        2        3  2        2          3
     - 2/3 x y - 4/3 x  y  - 4/3 x y  + 8/9 x  + 1/3 x  y  - 2/3 x  y - 2/9 x ,

                        4           4          2        3                 2  4
    COEFF(2, 1) = 1/18 x  - 1/24 y x  + 1/6 x y  + 1/9 x  - 1/9 x - 1/12 y  x

             2        3  2           3         2  2                    2
     - 1/18 x  - 1/6 x  y  - 1/12 y x  + 1/12 x  y  + 1/12 x y + 1/24 x  y,

                          2         2                      2  4          4
    COEFF(-2, 2) = 1/288 x  - 1/48 x  y + 1/24 x y + 1/48 y  x  - 1/288 x

               3         2  2          3                     4         3  2
     - 1/24 y x  - 1/48 x  y  + 1/144 x  - 1/144 x + 1/48 y x  - 1/24 x  y

               2                         3         2  4                  4
     + 1/24 x y , COEFF(-1, 2) = - 1/72 x  - 1/12 y  x  + 1/18 x + 1/72 x

                         4        2             3         2         3  2
     - 1/3 x y - 1/12 y x  + 1/3 x  y + 1/12 y x  - 1/18 x  + 1/12 x  y

            2  2          2                     2          4        2  2
     + 1/3 x  y  - 1/3 x y , COEFF(0, 2) = 1/2 y  + 1/8 y x  - 5/8 x  y

             4                        2        2  4        2
     - 1/48 x  + 1/2 y - 1/12 + 5/48 x  + 1/8 y  x  - 5/8 x  y, COEFF(1, 2) =

          4                  2  4        2          2  2           3         2
    1/72 x  - 1/18 x - 1/12 y  x  + 1/3 x  y + 1/3 x  y  - 1/12 y x  - 1/18 x

              2                     4         3  2         3
     + 1/3 x y  + 1/3 x y - 1/12 y x  - 1/12 x  y  + 1/72 x , COEFF(2, 2) =

            3          4          2           4                     2
    1/24 y x  - 1/288 x  + 1/288 x  + 1/48 y x  + 1/144 x - 1/24 x y

             3  2          3                    2  4         2           2  2
     + 1/24 x  y  - 1/144 x  - 1/24 x y + 1/48 y  x  - 1/48 x  y - 1/48 x  y ]

> print_coeffs__lc_of_data(%, "coeffs_dyy->coeff_", "fp",
> 			 "2d.coeffs/2d.cube.order4.smooth0/coeffs-dyy.compute.c");
bytes used=321495712, alloc=2752008, time=36.17
bytes used=322495872, alloc=2752008, time=36.25
bytes used=323506604, alloc=2752008, time=36.34
bytes used=324513444, alloc=2752008, time=36.42
bytes used=325520708, alloc=2752008, time=36.50
bytes used=326521356, alloc=2752008, time=36.59
bytes used=327521540, alloc=2752008, time=36.98
bytes used=328521988, alloc=2752008, time=37.17
bytes used=329522156, alloc=2752008, time=37.24
bytes used=330524932, alloc=2752008, time=37.32
bytes used=331525124, alloc=2752008, time=37.42
bytes used=332525296, alloc=2752008, time=37.53
bytes used=333525948, alloc=2752008, time=37.63
bytes used=334527964, alloc=2752008, time=38.08
bytes used=335528192, alloc=2752008, time=38.27
bytes used=336528488, alloc=2752008, time=38.34
bytes used=337529240, alloc=2752008, time=38.46
bytes used=338529396, alloc=2752008, time=38.56
bytes used=339529652, alloc=2752008, time=39.02
bytes used=340529868, alloc=2752008, time=39.19
bytes used=341530120, alloc=2752008, time=39.29
bytes used=342530312, alloc=2752008, time=39.43
bytes used=343530564, alloc=2752008, time=39.86
bytes used=344531008, alloc=2752008, time=39.93
bytes used=345531164, alloc=2752008, time=40.16
bytes used=346531472, alloc=2752008, time=40.54
bytes used=347531632, alloc=2752008, time=40.63
bytes used=348531844, alloc=2752008, time=41.02
bytes used=349532448, alloc=2752008, time=41.23
> 
################################################################################
> quit
bytes used=350458728, alloc=2752008, time=41.36
