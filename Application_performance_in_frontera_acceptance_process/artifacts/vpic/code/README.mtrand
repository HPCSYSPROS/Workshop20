MTRAND: A high speed, highly portable library for generation of quality random
numbers on workstations

Kevin J. Bowers, Ph.D.
Plasma Physics Group (X-1)
Applied Physics Division
Los Alamos National Lab

Version 1 - February 13, 2003 
- Initial creation of library

Version 2 - August 2, 2003
- Major revision of the API. Functions now require a "mt_handle" so that
  multiple random number generators can be used simultaneously by a single
  process (tiered generators) and so that shared memory multithreaded
  applications have an efficient and reproducible means for generating
  parallel random number sequences across multiple processors simultaneously.
- A more optimal implementation of the MT19937_TWIST operation. The trinary
  compare was replaced with a two's complement based negation trick.
- "mtrand_test_seq.c", an overall test of the library against a reference
  sequence, has been added
- "mtrand_test_twos.c", a test to insure proper two's complement behavior, has
  been added
- "mtrand_test_ansi.c" was eliminated as ANSI-C and BSD4.3 drop-in replacement
  functions are no longer included. The new library is based around user
  initialized "mt_handle"s instead of a single internally stored state;
  it is not be hard to write wrappers around this library to make ANSI-C and/or
  BSD4.3 workalikes though.
- "mtrand_mis.c" and associated build complications are no longer necessary
  with the removal of ANSI-C drop-in replacements.
- Build complications for separate reentrant and non-reeentrant
  libraries are no longer relevant and have been deleted. Proper use of 
  "mt_handle"s renders the library naturally reentrant.
- Addition of many more specialty generators: log normal, Birnbaum-Saunders
  (fatigue-life), double exponential, Gumbel (extreme value type I minimum
  case), Weibull family (includes Rayleigh), Tukey-lambda family (includes
  logistic).
- Updated documentation

Version 2.1 - December 18, 2003
- Implemented an improved algorithm for "mt_randperm". The new algorithm is
  order N and needs no auxilliary storage.
- Added an array shuffler "mt_shuffle" and macro "MT_SHUFFLE" using the new
  "mt_randperm" algorithm.
- Gave "*_fill" and "mt_srand" functions an "int" return type to allow
  errors to be indicated.
- Added NULL mt_handle checks to all routines that take mt_handles and are
  capable of returning error codes.
- Fixed 2 latent bugs in "mt_setstate" (invalid k going into g->next/g->state
  extraction and invalid generator states with large n were not properly
  detected)
- Changed the method by which the bit shifts in the integer generators are
  computed at compile time.
- Minor code stylistic, code comment and library documentation updates.

Version 2.1.VPIC - March/April 2004
- Cosmetic changes to help integrate into VPIC. (Moved some tests into input
  deck test suite, renamed conv.h, use of INT32_TYPE defines.)

************
* Overview *
************

MTRAND is a library that generates pseudo random numbers of higher quality and
at higher speed than many commonly used random number generators (RNGs). The
underlying algorithm is described in:

M. Matsumoto and T. Nishimura. "Mersenne Twister: A 623-dimensionally
equidistributed uniform pseudo random number generator." ACM Transactions on
Modeling and Computer Simulation. Vol. 8. No. 1. pp. 3-30. Jan 1998.
http://www.math.keio.ac.jp/~matumoto/emt.html

Benchmarks place the functions equivalent to the standard C-library rand() over
4 times faster on some architectures. There are also mass production generators
which are faster still if you need to fill a large array with randomness.

MTRAND has a period of 2^19937-1 (a Mersenne prime), ~10^6002. To put this in
perspective, there are ~10^81 atoms in the universe and if every atom was
actually a random number generator capable of making one number every Planck
time (~10^43 numbers a second) operating from the Big Bang till now (~10^17
seconds), you would have only made ~10^141 random numbers, an infinitesimal
fraction of this generator's period. In short, the period exceeds most common
random number generators by several thousand orders of magnitude and period
exhaustion or sequence overlap is a non-issue.

MTRAND is equidistributed through 623 dimensions at 32-bit accuracy. This means
that the previous 623 numbers generated tell you nothing about the present
random number. This also beats most commonly used RNGs by several orders of
magnitude. See the above paper for comparisons.

The initial implementation was loosely based on the mt19937ar-cok.c source code
(BSD licensed) available at the web site above. However, after modifications
for greater efficiency, greater portability, reentrancy, support for multiple
generator states and the addition of many many many more generators, this
implementation is essentially a rewrite from scratch.

Generators for every standard character, integer and floating point datatype
are provided. Also, ANSI-C equivalents for "srand", "rand" and "RAND_MAX" are
given. 

MTRAND is _not_ cryptographically secure; it is designed for robust Monte-Carlo
simulation purposes. To explain: among other things, the internal state of a
secure generator should not be feasibily computable from the generator outputs.
MTRAND's internal state could be obtained by applying the inverse of the
tempering transformation to the previous 624 unsigned 32-bit integer random
numbers (see the above paper for an explanation of tempering). Note: in some
commonly used RNGs such as simple linear and multiplicative congruential
generators, the internal state _is_ the current random number. A secure RNG
could likely be made based on MTRAND by applying a secure hash function to
MTRAND's outputs.

*****************************
* Parallel and Tiered Usage *
*****************************

The only restriction on usage is that no processes/threads operating in a
shared memory space use the same mt_handle simultaneously. For example, this
is bad:

  main() {
    mt_handle generator = mt_new_generator(1);
    ...
    parallel_smp_execute(foo);
    mt_rand(generator);
    ...
  }
  void foo(void) {
    mt_rand(generator);
    ...
  }

Note:
- Message passing programs (MPI or PVM) running on SMP boxes do not operate in
  in a shared memory.
- Multithreaded programs on SMP boxes (pthreads) do operate in a shared memory.
- Sending a "mt_handle" to a process in a different memory space (MPI_Send)
  will not allow the recipient process to access the generator's internal
  state. If you need to send a generator's state to a process in a different
  memory space, use "mt_getsize", "mt_getstate" and  "mt_setstate".

***************
* Portability *
***************

These functions have been implemented in a very portable yet efficient manner
such that the code should work on any system (16-bit, 32-bit, 64-bit or even
odd-ball word sizes) with an ANSI-C compliant compiler. It only requires that
an "unsigned long int" is at least 32-bits (if not, change the "mt_uint32"
typedef in "mtrand.c" appropriately).

All the generators assume that signed integers are stored in two's complement
representation. I do not know of any general purpose microprocessor that does
not use two's complement. A test (mtrand_test_twos.c) is provided to verify
this.

The floating point generators require that the processor's floating point unit
is minimally compliant with the IEEE-754 standard for 32-bit single precision
and 64-bit double precision floating point arithmetic. Nearly all modern
processors implement IEEE-754 and a test (mtrand_test_conv.c) is provided to
verify the floating point generators will behave properly.

***********
* Testing *
***********

This implementation has been successfuly tested against the strigent "diehard"
set of statistical tests for randomness. "diehard" can be found at:

http://stat.fsu.edu/~geo/

It passes all tests. Output from a full diehard test suite is given in the file
"diehard_results". Other tests of the code involve the processor's
representation of integers (mtrand_test_twos.c), the behavior of the floating
point unit's rounding (mtrand_test_conv.c) and the random permutation generator
(mtrand_test_randperm.c). A test against a reference sequence is also provided
(mtrand_test_seq.c).

****************
* Installation *
****************

Linux and systems that provide "gcc" and "libtool" ****************************

The "build.gcc" script will make and install shared and static libraries of
this code. The destination directory for the libraries and the include files
are at the beginning of the build.gcc file. "clean.gcc" and "tests.gcc" are
complementary to "build.gcc". "build.gcc" has been tested on Linux systems
with gcc 2.96 and up and with libtool 1.4.2.

Other systems *****************************************************************

A Makefile template has been provided that will make a static version of the
library once appropriate compilers, linkers, etc are specified. However, shared
(DLL, if applicable) versions of the library are not made as the procedures
for this vary widely from operating system to operating system.

********************
* MTRAND Reference *
********************

Library datatypes *************************************************************

mt_handle

mt_handle's are used by nearly all routines in this library to reference an
instance of a random number generator. Note: Functions may seg-fault and/or
corrupt program data if passed a bad handle.

Library constants *************************************************************

mt_CRAND_MAX,  mt_SHRAND_MAX,  mt_RAND_MAX,  mt_LRAND_MAX
mt_UCRAND_MAX, mt_USHRAND_MAX, mt_URAND_MAX, mt_ULRAND_MAX

This gives the maximum random value attainable from the corresponding integer
generator (0 is the minimum value for all integer generators). Note:
"mt_RAND_MAX" is analogous to ANSI-C "RAND_MAX"

Constructors and destructors **************************************************

mt_handle mt_new_generator( unsigned int seed )
- Create a new random number generator. The generator will be seeded with the
  user provided integer. To avoid memory leaks, all calls to mt_new_generator
  should be paired with a call to mt_delete_generator (see below). If the
  generator could not be created, the returned handle will be NULL (usually 0).

void mt_delete_generator( mt_handle generator )
- Free all resources associated with a generator. After mt_delete_generator
  has been called on a handle, the handle is no longer valid and should not be
  used. It is safe to call mt_delete_generator on a NULL handle.

Seeding and related routines **************************************************

int mt_srand( mt_handle generator, unsigned int seed )
- Seed "generator" with "seed". Returns non-zero if an obviously invalid
  generator was passed and zero on success. If more complicated seeds are
  desired (for example, a long sequence of random characters from some
  physical source of randomness), see "mt_setstate" below.

size_t mt_getsize( mt_handle generator )
- Returns the number of bytes needed to store "generator"'s internal state

int mt_getstate( mt_handle generator, char *state, size_t len )
- Stores "generator"'s state in the byte array "state" of length "len". If
  "state" is not large enough, this routine returns the necessary size of the
  "state" array. If obviously bad parameters were passed for "generator",
  "state" or "len", a negative number is returned. On success, this routine
  returns 0. Note: "state" is machine indepedent on processors where
  1 char = 1 8-bit byte (almost always true). For example, you could save the
  state on a PowerPC architecture and use "mt_setstate" to initialize a
  random number generator to resume the same sequence on an Intel x86, DEC
  Alpha or Sun SPARC.

int mt_setstate( mt_handle generator, const char *state, size_t len )
- Seeds the "generator"'s with the byte array "state" of length "len". "state"
  can be provided by "mt_getstate" or with a random sequence provided by the
  user. A valid user provided "state" is at least 5 bytes long and has at least
  one non-zero byte among "state[4]" through
  "state[min(mt_getsize(generator),len)-1]". If there are extra chars in
  "state" (those beyond "state[mt_getsize(generator)-1]"), they are ignored. If
  the generator state is initialized successfully, this routine returns 0.
  A non-zero is returned if there was an error. "Generator"'s state is
  unaltered on an error.

Integer Generators ************************************************************

signed   char      mt_crand   ( mt_handle generator )
signed   short int mt_shrand  ( mt_handle generator )
signed         int mt_rand    ( mt_handle generator )
signed   long  int mt_lrand   ( mt_handle generator )
unsigned char      mt_ucrand  ( mt_handle generator )
unsigned short int mt_ushrand ( mt_handle generator )
unsigned       int mt_urand   ( mt_handle generator )
unsigned long  int mt_ulrand  ( mt_handle generator )
 
- Using "generator", return a uniform random number of the appropriate type
- The short and char generators are not very efficient as they are written for
  portability. (They throw out the least signicant bits of an unsigned 32-bit
  random to get a number of appropriate size for the architecture.)
- The range of the random numbers is the range of all non-negative integers
  representable in the corresponding return type of the generator, unless
  the type is larger than 32-bits in which the upper limit (inclusive) is
  2^32-1 (2^31-1 for signed types).

Mass Production Integer Generators ********************************************

int mt_crand_fill   ( mt_handle generator, signed   char      *x, size_t n )
int mt_shrand_fill  ( mt_handle generator, signed   short int *x, size_t n )
int mt_rand_fill    ( mt_handle generator, signed         int *x, size_t n )
int mt_lrand_fill   ( mt_handle generator, signed   long  int *x, size_t n )
int mt_ucrand_fill  ( mt_handle generator, unsigned char      *x, size_t n )
int mt_ushrand_fill ( mt_handle generator, unsigned short int *x, size_t n )
int mt_urand_fill   ( mt_handle generator, unsigned       int *x, size_t n )
int mt_ulrand_fill  ( mt_handle generator, unsigned long  int *x, size_t n )

- Using "generator", fill array "x" with "n" uniform random numbers
- If generator, x or n are obviously bad, this returns an error code.
  generator and the array x are unaltered on errors.
- These are identical to the single integer generators but they have no
  repeated function call overhead. Thus, they are faster.

Floating point generators *****************************************************

float  mt_frand         ( mt_handle generator )
float  mt_frand_c0      ( mt_handle generator )
float  mt_frand_c1      ( mt_handle generator )
float  mt_frand_c       ( mt_handle generator )
double mt_fast_drand    ( mt_handle generator )
double mt_fast_drand_c0 ( mt_handle generator )
double mt_fast_drand_c1 ( mt_handle generator )
double mt_fast_drand_c  ( mt_handle generator )
double mt_drand         ( mt_handle generator )
double mt_drand_c0      ( mt_handle generator )
double mt_drand_c1      ( mt_handle generator )
double mt_drand_c       ( mt_handle generator )

- No postfix ("open")        = Uniform random numbers on the interval (0,1)
- c0 postfix ("closed zero") = Uniform random numbers on the interval [0,1)
- c1 postfix ("closed one")  = Uniform random numbers on the interval (0,1]
- c  postfix ("closed")      = Uniform random numbers on the interval [0,1]
- The fast_drand routines run about twice as fast as the regular drand routines
but they only generate uniform rands with 32-bits of precision. The slower
routines generate uniform rands with 53-bits of precision.
- The integer to floating point conversions assume IEEE style floating point.
The program "mtrand_test_conv.c" will test for the appropriate behavior on
your processor.

Mass Production Floating Point Generators *************************************

All the floating point generators above have a mass production counterpart
(mt_drand_c0 has mt_drand_c0_fill, for example). The mass production
counterparts follow the same calling convention as the integer mass production
generators. For example,

double mt_drand_c0      ( mt_handle generator )
int    mt_drand_c0_fill ( mt_handle generator, double *x, size_t n )

Specialty Generators **********************************************************

double mt_normal_drand      ( mt_handle generator )
int    mt_normal_drand_fill ( mt_handle generator, double *x, size_t n )
- Generate normal distributed random numbers. PDF:
  f(x) = exp( -x^2/2) / sqrt(2*pi)
- Range is (-inf,inf)
- Calculation is based on the Box-Mueller transform applied to two 53-bit
  double open uniform rands (two normals are generated at a time, the mass
  production routine takes advantage of this but the single generator does
  not). 

double mt_lognormal_drand      ( mt_handle generator, double sigma )
int    mt_lognormal_drand_fill ( mt_handle generator, double sigma,
                                 double *x, size_t n )
- Generate log normal distributed random numbers. PDF:
  f(x) = normal(ln x / sigma)/x 
- Range is (0,inf)
- Calculation is based on the inverse distribution function transform applied 
  to a normal_drand (two normals are generated at a time, the mass production
  routine takes advantage of this but the single generator does not).

double mt_bs_drand      ( mt_handle generator, double gamma )
int    mt_bs_drand_fill ( mt_handle generator, double gamma,
                          double *x, size_t n )
- Generate Birnbaum-Saunders (fatigue-life) distributed random numbers. PDF:
  f(x) = ( ( sqrt(x) + sqrt(1/x) ) / ( 2 gamma x ) ) *
         normal( ( sqrt(x) - sqrt(1/x) ) / gamma )
- Range is (0,inf)
- Calculation is based on the inverse distribution function transform applied 
  to a normal drand (two normals are generated at a time, the mass production
  routine takes advantage of this but the single generator does not).

double mt_exp_drand      ( mt_handle generator )
int    mt_exp_drand_fill ( mt_handle generator, double *x, size_t n )
- Generate exponentally distributed random numbers. PDF:
  f(x) = exp(-x) for x>0, 0 otherwise
- Range is (0,inf)
- Calculation is based on the inverse distribution function transform applied
  to a 53-bit double open uniform rand.

double mt_dexp_drand      ( mt_handle generator )
int    mt_dexp_drand_fill ( mt_handle generator, double *x, size_t n )
- Generate double exponentally distributed random numbers. PDF:
  f(x) = 0.5 exp(-|x|) 
- Range is (-inf,inf)
- Calculation is based on the inverse distribution function transform applied
  to a 53-bit double open uniform rand.

double mt_gumbel_drand      ( mt_handle generator )
int    mt_gumbel_drand_fill ( mt_handle generator, double *x, size_t n )
- Generate Gumbel minimum case (Extreme value Type I) distributed random
  numbers. PDF:
  f(x) = exp(x) exp(-exp(x)) 
- Range is (-inf,inf)
- Calculation is based on the inverse distribution function transform applied
  to a 53-bit double open uniform rand.
- Note: maximum case can be obtained by negating the output of this routine

double mt_weibull_drand      ( mt_handle generator, double gamma )
int    mt_weibull_drand_fill ( mt_handle generator, double gamma, 
                               double *x, size_t n )
- Generate Weibull distributed random numbers. PDF:
  f(x) = gamma x^(gamma-1) exp(-x^gamma) 
- Range is (-inf,inf)
- Calculation is based on the inverse distribution function transform applied
  to a 53-bit double open uniform rand.
- Note: gamma = 2 is a rescaled Rayleigh distribution

double mt_cauchy_drand      ( mt_handle generator )
int    mt_cauchy_drand_fill ( mt_handle generator, double *x, size_t n )
- Generate a Cauchy distributed random number. PDF:
  f(x) = 1/(pi*(1+x^2))
- Range is (-inf,inf)
- Calculation is based on the inverse distribution function transform applied
  to a 53-bit double open uniform rand.

double mt_lambda_drand      ( mt_handle generator, double lambda )
int    mt_lambda_drand_fill ( mt_handle generator, double lambda,
                              double *x, size_t n )
- Generate a Tukey-lambda distributed random number. PDF has no simple closed
  form expression. However,
  lambda = -1   is approximately Cauchy
  lambda = 0    is exactly logistic
  lambda = 0.14 is approximately normal
  lambda = 0.5  is U-shaped
  lambda = 1    is exactly uniform (from -1 to +1)
- Range is (-inf,inf)
- Calculation is based on the inverse distribution function transform applied
  to a 53-bit double open uniform rand.

int mt_randperm ( mt_handle generator, int *x, int n )
- Using "generator", fill "x" with a random permutation of the numbers from 0
  to "n"-1
- Returns 0 on success, non-zero if obviously invalid parameters were passed.
- mt_randperm uses an O(n) algorithm in time and O(1) algorithm in space
- mt_randperm is works for 1 <= n <= min( 2^32, INT_MAX )

int mt_shuffle ( mt_handle generator, void *x, size_t n, size_t s )
- Shuffles the array "x" which has "n" members [0,"n"-1] of char size "s".
- Returns 0 on success, non-zero if obviously invalid parameters were passed.
- mt_shuffle is based off the same algorithm of mt_randperm
- mt_randperm is works for 1 <= n <= min( 2^32, size_t_MAX )
- A macro "MT_SHUFFLE" which is the same as mt_shuffle but does not require
  you to specify s (it is determined automatically. That is:
  mt_shuffle(h,x,n,s) <==> MT_SHUFFLE(h,x,n)

