################################################################################
# Autoconf build system README
################################################################################

# Bootstrap
To build the buildsystem run (from the top-level directory):

% config/bootstrap

This will run the appropriate programs to create the build system.

The bootstrap system now uses the files vpic_header_list, vpic_source_list, and
vpic_extra_source_list to create the Makefile.am input files for automake
whenever the build system is recreated.  This means that when new files are
added to the project, they must be added to the correct list in the config
directory or they will not be included in the build.

The vpic_extra_source_list can be used to specify files that are conditional.
These are then selected at configuration using the AM_CONDITIONAL macro.
Currently these are all cell specific.  Adding a more general capability is
possible, but will require some more investigation into the inner workings
of automake.

# Configuration
The autoconf buildsystem mimics the current Imake setup, allowing the user to
specify a machine file.  There are several examples in the machine directory.
To configure a standard, 64-bit VPIC build that uses SSE and basic optimization
try:

% ./configure --with-machine=standard_64

The build system supports out-of-tree builds.  This is convenient for making
several different configurations in separate directories.  As an example, try
something like:

(in top-level VPIC directory)
% mkdir -p build/standard_64
% cd build/standard_64
% ../../configure --with-machine=standard_64

# Build
Either of these configure options will produce some output, and will create
the files needed to build VPIC.  To compile, try:

(from wherever you ran configure)
% make

If you tried the out-of-tree build in the second example above, you should
have built libvpic.op.a in the current directory, build/standard_64.  The
build system automatically copies the samples directory into your build tree.
So, after building the library, try:

% cd sample/test
% ../../build.op pcomm
% mpirun -np 8 ./pcomm.op

# Supported Build Styles
To make it easier to select various combinations of build components, the
build system supports the notion of a build style.  The build style can be
specified in the machine file using BUILDSTYLE=buildstyle_choice or from the
command-line like: ./configure --with-buildstyle=buildstyle_choice.  The
Currently supported styles are:

standard
    (normal distributed memory VPIC, this is the default)

standard_cell
    (VPIC for IBM Cell with SPU pipelines enabled)

ompi_relay
    (VPIC with relay using openmpi for point-to-point communication)

ompi_relay_cell
    (VPIC for IBM Cell with SPU pipelines enabled and relay using openmpi
    for point-to-point communication)

ompi_relay_cell_ppe
    (VPIC for IBM Cell with SPU pipelines DISABLED and relay using openmpi
    for point-to-point communication)

ompi_relay_hybrid_cell
    (hybrid VPIC with Opteron relay using openmpi for point-to-point
    communication and IBM Cell main with SPU pipelines enabled)

ompi_relay_hybrid_cell_ppe
    (hybrid VPIC with Opteron relay using openmpi for point-to-point
    communication and IBM Cell main with SPU pipelines DISABLED)

dacs_relay_hybrid_cell
    (hybrid VPIC with Opteron relay using DaCS for point-to-point
    communication and IBM Cell main with SPU pipelines enabled)

Obviously, there are some logical combinations missing.  These will be added
as they can be tested.

If you wish to specify a compiler, then put this on the ./configure line as follows:

% ./configure --with-machine=[machine] CC=[path] CXX=[path]

