// Test the random number floating point converters.
//
// This input deck was written by:
//   Kevin J Bowers, Ph.D.
//   Plasma Physics Group (X-1)
//   Applied Physics Division
//   Los Alamos National Lab
// March/April 2004 - conversion of mtrand test code into an input deck

#include <float.h> /* Need FLT_EPSILON, DBL_EPSILON */
#include <mtrand_conv.h>

begin_globals {
};

begin_initialization {
  double d0, d1;
  uint32_t a0 = 0x00000000, b0 = 0x00000000;
  uint32_t a1 = 0xffffffff, b1 = 0xffffffff;
  int n_fail = 0;

# define TEST( conv, cond )                                       \
  d0 = (float)(conv(a0)); d1 = (float)(conv(a1));                 \
  if( cond ) printf( #conv ": pass (%.19e, %.19e)\n", d0, 1-d1 ); \
  else       printf( #conv ": FAIL (%.19e, %.19e)\n", d0, 1-d1 ), n_fail++
 
  TEST( frand24_o,  0<d0 && d0<2*FLT_EPSILON && (1-2*FLT_EPSILON)<d1 && d1<1 );
  TEST( frand24_c0, d0==0 && d1==1-0.5*FLT_EPSILON );
  TEST( frand24_c1, d0==0.5*FLT_EPSILON && d1==1 );
  TEST( frand24_c,  d0==0 && d1==1 );

# undef  TEST
# define TEST( conv, cond )                                       \
  d0 = conv(a0); d1 = conv(a1);                                   \
  if( cond ) printf( #conv ": pass (%.19e, %.19e)\n", d0, 1-d1 ); \
  else       printf( #conv ": FAIL (%.19e, %.19e)\n", d0, 1-d1 ), n_fail++

  TEST( drand32_o,  0<d0 && d0<FLT_EPSILON && (1-FLT_EPSILON)<d1 && d1<1 );
  TEST( drand32_c0, d0==0 && d1==1-0.25/(double)(1<<30) );
  TEST( drand32_c1, d0==0.25/(double)(1<<30) && d1==1 );
  TEST( drand32_c,  d0==0 && d1==1 );

# undef  TEST
# define TEST( conv, cond )                                       \
  d0 = conv(a0,b0); d1 = conv(a1,b1);                             \
  if( cond ) printf( #conv ": pass (%.19e, %.19e)\n", d0, 1-d1 ); \
  else       printf( #conv ": FAIL (%.19e, %.19e)\n", d0, 1-d1 ), n_fail++

  TEST( drand53_o,  0<d0 && d0<2*DBL_EPSILON && (1-2*DBL_EPSILON)<d1 && d1<1 );
  TEST( drand53_c0, d0==0 && d1==1-0.5*DBL_EPSILON );
  TEST( drand53_c1, d0==0.5*DBL_EPSILON && d1==1 );
  TEST( drand53_c,  d0==0 && d1==1 );

#undef TEST

  if( n_fail ) { sim_log( "FAIL" ); abort(1); }
  /**/           sim_log( "pass" ); exit(0);
}

begin_diagnostics {
}

begin_particle_injection {
}

begin_current_injection {
}

begin_field_injection {
}

begin_particle_collisions {
}


