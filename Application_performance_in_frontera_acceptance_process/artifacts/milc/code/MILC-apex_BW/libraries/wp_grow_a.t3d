; wp_grow_a.t3d: T3D assembler version of wp_grow_a.c 
        .ident wp_grow_a$c
        .psect  wp_grow_add@code,code
#include <mpp/asdef.h>
        CRI_REGISTER_NAMES      ; Use CRI defs for register names
	 XUP <- 0
	 YUP <- 1
	 ZUP <- 2
	 TUP <- 3
	 TDOWN <- 4
	 ZDOWN <- 5
	 YDOWN <- 6
	 XDOWN <- 7
	 PLUS <- +1
	 MINUS <- -1

; register names 
	 src <- a0	; address of source half_wilson_vector 
	 dest <- a1	; address of dest. wilson_vector 
	 dir <- a2	; direction 
	 sign <- a3	; sign: PLUS = +1, MINUS = -1 
	 color <- t1 ; loop over colors 
	 scratch <- t2	;scratch integer

wp_grow_add::
	bis zero,zero,color	; initialize color counter 
	; if (sign==-1) dir <- OPPDIR(dir) = 7-dir 
	bge	sign,SKIP1
	bis	zero,7,scratch
	subq	scratch,dir,dir
SKIP1:
	; switch(dir) 
	cmpeq	dir,0,scratch
	bne scratch,XUP_S
	cmpeq	dir,1,scratch
	bne scratch,YUP_S
	cmpeq	dir,2,scratch
	bne scratch,ZUP_S
	cmpeq	dir,3,scratch
	bne scratch,TUP_S
	cmpeq	dir,4,scratch
	bne scratch,TDOWN_S
	cmpeq	dir,5,scratch
	bne scratch,ZDOWN_S
	cmpeq	dir,6,scratch
	bne scratch,YDOWN_S
	cmpeq	dir,7,scratch
	bne scratch,XDOWN_S

XUP_S:
XUP_L:
	lds	ft0,0(src)	; src->h[0].c[i].real 
	lds	ft1,4(src)	; src->h[0].c[i].imag 
	lds	ft2,24(src)	; src->h[1].c[i].real 
	lds	ft3,28(src)	; src->h[1].c[i].imag 

	lds	ft4,0(dest)	; dest->d[*].c[i] 
	lds	ft5,4(dest)
	lds	ft6,24(dest)
	lds	ft7,28(dest)
	lds	ft8,48(dest)
	lds	ft9,52(dest)
	lds	ft10,72(dest)

	adds/d	ft4,ft0,ft4	; result component 0 
	lds	ft11,76(dest)
	adds/d	ft5,ft1,ft5	
	addq color,1,color
	adds/d	ft6,ft2,ft6	; result component 1 
	addq src,8,src		; next color 
	adds/d	ft7,ft3,ft7	
	cmplt color,3,scratch
	adds/d	ft8,ft3,ft8	; result component 2 += -i*h[1] 
	sts	ft4,0(dest)
	subs/d	ft9,ft2,ft9
	sts	ft5,4(dest)
	adds/d	ft10,ft1,ft10	; result component 3 += -i*h[0] 
	sts	ft6,24(dest)
	subs/d	ft11,ft0,ft11
	sts	ft7,28(dest)

	sts	ft8,48(dest)	
	sts	ft9,52(dest)
	sts	ft10,72(dest)	
	sts	ft11,76(dest)

	addq dest,8,dest
	bne scratch,XUP_L
	ret     zero,(r26)
YUP_S:
YUP_L:
	lds	ft0,0(src)	; src->h[0].c[i].real 
	lds	ft1,4(src)	; src->h[0].c[i].imag 
	lds	ft2,24(src)	; src->h[1].c[i].real 
	lds	ft3,28(src)	; src->h[1].c[i].imag 

	lds	ft4,0(dest)	; dest->d[*].c[i] 
	lds	ft5,4(dest)
	lds	ft6,24(dest)
	lds	ft7,28(dest)
	lds	ft8,48(dest)
	lds	ft9,52(dest)
	lds	ft10,72(dest)

	adds/d	ft4,ft0,ft4	; result component 0 
	lds	ft11,76(dest)
	adds/d	ft5,ft1,ft5	
	addq color,1,color
	adds/d	ft6,ft2,ft6	; result component 1 
	addq src,8,src		; next color 
	adds/d	ft7,ft3,ft7	
	cmplt color,3,scratch
	adds/d	ft8,ft2,ft8	; result component 2 += +1*h[1] 
	sts	ft4,0(dest)
	adds/d	ft9,ft3,ft9
	sts	ft5,4(dest)
	subs/d	ft10,ft0,ft10	; result component 3 += -1*h[0] 
	sts	ft6,24(dest)
	subs/d	ft11,ft1,ft11
	sts	ft7,28(dest)

	sts	ft8,48(dest)	
	sts	ft9,52(dest)
	sts	ft10,72(dest)	
	sts	ft11,76(dest)

	addq dest,8,dest
	bne scratch,YUP_L
	ret     zero,(r26)
ZUP_S:
ZUP_L:
	lds	ft0,0(src)	; src->h[0].c[i].real 
	lds	ft1,4(src)	; src->h[0].c[i].imag 
	lds	ft2,24(src)	; src->h[1].c[i].real 
	lds	ft3,28(src)	; src->h[1].c[i].imag 

	lds	ft4,0(dest)	; dest->d[*].c[i] 
	lds	ft5,4(dest)
	lds	ft6,24(dest)
	lds	ft7,28(dest)
	lds	ft8,48(dest)
	lds	ft9,52(dest)
	lds	ft10,72(dest)

	adds/d	ft4,ft0,ft4	; result component 0 
	lds	ft11,76(dest)
	adds/d	ft5,ft1,ft5	
	addq color,1,color
	adds/d	ft6,ft2,ft6	; result component 1 
	addq src,8,src		; next color 
	adds/d	ft7,ft3,ft7	
	cmplt color,3,scratch
	adds/d	ft8,ft1,ft8	; result component 2 += -i*h[0] 
	sts	ft4,0(dest)
	subs/d	ft9,ft0,ft9
	sts	ft5,4(dest)
	subs/d	ft10,ft3,ft10	; result component 3 += +i*h[1] 
	sts	ft6,24(dest)
	adds/d	ft11,ft2,ft11
	sts	ft7,28(dest)

	sts	ft8,48(dest)	
	sts	ft9,52(dest)
	sts	ft10,72(dest)	
	sts	ft11,76(dest)

	addq dest,8,dest
	bne scratch,ZUP_L
	ret     zero,(r26)
TUP_S:
TUP_L:
	lds	ft0,0(src)	; src->h[0].c[i].real 
	lds	ft1,4(src)	; src->h[0].c[i].imag 
	lds	ft2,24(src)	; src->h[1].c[i].real 
	lds	ft3,28(src)	; src->h[1].c[i].imag 

	lds	ft4,0(dest)	; dest->d[*].c[i] 
	lds	ft5,4(dest)
	lds	ft6,24(dest)
	lds	ft7,28(dest)
	lds	ft8,48(dest)
	lds	ft9,52(dest)
	lds	ft10,72(dest)

	adds/d	ft4,ft0,ft4	; result component 0 
	lds	ft11,76(dest)
	adds/d	ft5,ft1,ft5	
	addq color,1,color
	adds/d	ft6,ft2,ft6	; result component 1 
	addq src,8,src		; next color 
	adds/d	ft7,ft3,ft7	
	cmplt color,3,scratch
	adds/d	ft8,ft0,ft8	; result component 2 += +1*h[0] 
	sts	ft4,0(dest)
	adds/d	ft9,ft1,ft9
	sts	ft5,4(dest)
	adds/d	ft10,ft2,ft10	; result component 3 += +1*h[1] 
	sts	ft6,24(dest)
	adds/d	ft11,ft3,ft11
	sts	ft7,28(dest)

	sts	ft8,48(dest)	
	sts	ft9,52(dest)
	sts	ft10,72(dest)	
	sts	ft11,76(dest)

	addq dest,8,dest
	bne scratch,TUP_L
	ret     zero,(r26)
XDOWN_S:
XDOWN_L:
	lds	ft0,0(src)	; src->h[0].c[i].real 
	lds	ft1,4(src)	; src->h[0].c[i].imag 
	lds	ft2,24(src)	; src->h[1].c[i].real 
	lds	ft3,28(src)	; src->h[1].c[i].imag 

	lds	ft4,0(dest)	; dest->d[*].c[i] 
	lds	ft5,4(dest)
	lds	ft6,24(dest)
	lds	ft7,28(dest)
	lds	ft8,48(dest)
	lds	ft9,52(dest)
	lds	ft10,72(dest)

	adds/d	ft4,ft0,ft4	; result component 0 
	lds	ft11,76(dest)
	adds/d	ft5,ft1,ft5	
	addq color,1,color
	adds/d	ft6,ft2,ft6	; result component 1 
	addq src,8,src		; next color 
	adds/d	ft7,ft3,ft7	
	cmplt color,3,scratch
	subs/d	ft8,ft3,ft8	; result component 2 += +i*h[1] 
	sts	ft4,0(dest)
	adds/d	ft9,ft2,ft9
	sts	ft5,4(dest)
	subs/d	ft10,ft1,ft10	; result component 3 += +i*h[0] 
	sts	ft6,24(dest)
	adds/d	ft11,ft0,ft11
	sts	ft7,28(dest)

	sts	ft8,48(dest)	
	sts	ft9,52(dest)
	sts	ft10,72(dest)	
	sts	ft11,76(dest)

	addq dest,8,dest
	bne scratch,XDOWN_L
	ret     zero,(r26)
YDOWN_S:
YDOWN_L:
	lds	ft0,0(src)	; src->h[0].c[i].real 
	lds	ft1,4(src)	; src->h[0].c[i].imag 
	lds	ft2,24(src)	; src->h[1].c[i].real 
	lds	ft3,28(src)	; src->h[1].c[i].imag 

	lds	ft4,0(dest)	; dest->d[*].c[i] 
	lds	ft5,4(dest)
	lds	ft6,24(dest)
	lds	ft7,28(dest)
	lds	ft8,48(dest)
	lds	ft9,52(dest)
	lds	ft10,72(dest)

	adds/d	ft4,ft0,ft4	; result component 0 
	lds	ft11,76(dest)
	adds/d	ft5,ft1,ft5	
	addq color,1,color
	adds/d	ft6,ft2,ft6	; result component 1 
	addq src,8,src		; next color 
	adds/d	ft7,ft3,ft7	
	cmplt color,3,scratch
	subs/d	ft8,ft2,ft8	; result component 2 += -1*h[1] 
	sts	ft4,0(dest)
	subs/d	ft9,ft3,ft9
	sts	ft5,4(dest)
	adds/d	ft10,ft0,ft10	; result component 3 += +1*h[0] 
	sts	ft6,24(dest)
	adds/d	ft11,ft1,ft11
	sts	ft7,28(dest)

	sts	ft8,48(dest)	
	sts	ft9,52(dest)
	sts	ft10,72(dest)	
	sts	ft11,76(dest)

	addq dest,8,dest
	bne scratch,YDOWN_L
	ret     zero,(r26)
ZDOWN_S:
ZDOWN_L:
	lds	ft0,0(src)	; src->h[0].c[i].real 
	lds	ft1,4(src)	; src->h[0].c[i].imag 
	lds	ft2,24(src)	; src->h[1].c[i].real 
	lds	ft3,28(src)	; src->h[1].c[i].imag 

	lds	ft4,0(dest)	; dest->d[*].c[i] 
	lds	ft5,4(dest)
	lds	ft6,24(dest)
	lds	ft7,28(dest)
	lds	ft8,48(dest)
	lds	ft9,52(dest)
	lds	ft10,72(dest)

	adds/d	ft4,ft0,ft4	; result component 0 
	lds	ft11,76(dest)
	adds/d	ft5,ft1,ft5	
	addq color,1,color
	adds/d	ft6,ft2,ft6	; result component 1 
	addq src,8,src		; next color 
	adds/d	ft7,ft3,ft7	
	cmplt color,3,scratch
	subs/d	ft8,ft1,ft8	; result component 2 += +i*h[0] 
	sts	ft4,0(dest)
	adds/d	ft9,ft0,ft9
	sts	ft5,4(dest)
	adds/d	ft10,ft3,ft10	; result component 3 += -i*h[1] 
	sts	ft6,24(dest)
	subs/d	ft11,ft2,ft11
	sts	ft7,28(dest)

	sts	ft8,48(dest)	
	sts	ft9,52(dest)
	sts	ft10,72(dest)	
	sts	ft11,76(dest)

	addq dest,8,dest
	bne scratch,ZDOWN_L
	ret     zero,(r26)
TDOWN_S:
TDOWN_L:
	lds	ft0,0(src)	; src->h[0].c[i].real 
	lds	ft1,4(src)	; src->h[0].c[i].imag 
	lds	ft2,24(src)	; src->h[1].c[i].real 
	lds	ft3,28(src)	; src->h[1].c[i].imag 

	lds	ft4,0(dest)	; dest->d[*].c[i] 
	lds	ft5,4(dest)
	lds	ft6,24(dest)
	lds	ft7,28(dest)
	lds	ft8,48(dest)
	lds	ft9,52(dest)
	lds	ft10,72(dest)

	adds/d	ft4,ft0,ft4	; result component 0 
	lds	ft11,76(dest)
	adds/d	ft5,ft1,ft5	
	addq color,1,color
	adds/d	ft6,ft2,ft6	; result component 1 
	addq src,8,src		; next color 
	adds/d	ft7,ft3,ft7	
	cmplt color,3,scratch
	subs/d	ft8,ft0,ft8	; result component 2 += -1*h[0] 
	sts	ft4,0(dest)
	subs/d	ft9,ft1,ft9
	sts	ft5,4(dest)
	subs/d	ft10,ft2,ft10	; result component 3 += -0*h[1] 
	sts	ft6,24(dest)
	subs/d	ft11,ft3,ft11
	sts	ft7,28(dest)

	sts	ft8,48(dest)	
	sts	ft9,52(dest)
	sts	ft10,72(dest)	
	sts	ft11,76(dest)

	addq dest,8,dest
	bne scratch,TDOWN_L
	ret     zero,(r26)

	.endp
	.end
