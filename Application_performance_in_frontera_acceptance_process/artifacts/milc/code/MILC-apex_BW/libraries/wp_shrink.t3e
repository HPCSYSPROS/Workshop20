; wp_shrink.t3d: T3D assembler version of wp_shrink.c 
        .ident wp_shrink$c
        .psect  wp_shrink@code,code
#include <mpp/asdef.h>
        CRI_REGISTER_NAMES      ; Use CRI defs for register names
         XUP <- 0
         YUP <- 1
         ZUP <- 2
         TUP <- 3
         TDOWN <- 4
         ZDOWN <- 5
         YDOWN <- 6
         XDOWN <- 7
         PLUS <- +1
         MINUS <- -1

; register names 
	 src <- a0	; address of source wilson_vector 
	 dest <- a1	; address of dest. half_wilson_vector 
	 dir <- a2	; direction 
	 sign <- a3	; sign: PLUS = +1, MINUS = -1 
	 color <- t1	; loop over colors 
	 scratch <- t2	;scratch integer

wp_shrink::
	bis zero,zero,color	; initialize color counter 
	; if (sign==-1) dir <- OPPDIR(dir) = 7-dir 
	bge	sign,SKIP1
	bis	zero,7,scratch
	subq	scratch,dir,dir
SKIP1:
	; switch(dir) 
	cmpeq	dir,0,scratch
	bne scratch,XUP_S
	cmpeq	dir,1,scratch
	bne scratch,YUP_S
	cmpeq	dir,2,scratch
	bne scratch,ZUP_S
	cmpeq	dir,3,scratch
	bne scratch,TUP_S
	cmpeq	dir,4,scratch
	bne scratch,TDOWN_S
	cmpeq	dir,5,scratch
	bne scratch,ZDOWN_S
	cmpeq	dir,6,scratch
	bne scratch,YDOWN_S
	cmpeq	dir,7,scratch
	bne scratch,XDOWN_S

XUP_S:
XUP_L:
	lds	ft0,0(src)	; src->d[0].c[i].real 
	lds	ft1,4(src)	; src->d[0].c[i].imag 
	lds	ft2,24(src)	; src->d[1].c[i].real 
	lds	ft3,28(src)	; src->d[1].c[i].imag 
	lds	ft4,48(src)	; src->d[2].c[i].real 
	lds	ft5,52(src)	; src->d[2].c[i].imag 
	lds	ft6,72(src)	; src->d[3].c[i].real 
	lds	ft7,76(src)	; src->d[3].c[i].imag 

	subs/d	ft0,ft7,ft9
	adds/d	ft1,ft6,ft10
	subs/d	ft2,ft5,ft11
	adds/d	ft3,ft4,ft12

	sts	ft9,0(dest)
	addq color,1,color
	sts	ft10,4(dest)
	addq src,8,src		; next color 
	sts	ft11,24(dest)
	cmplt color,3,scratch
	sts	ft12,28(dest)

	addq dest,8,dest
	bne scratch,XUP_L
	ret     zero,(ra)
YUP_S:
YUP_L:
	lds	ft0,0(src)	; src->d[0].c[i].real 
	lds	ft1,4(src)	; src->d[0].c[i].imag 
	lds	ft2,24(src)	; src->d[1].c[i].real 
	lds	ft3,28(src)	; src->d[1].c[i].imag 
	lds	ft4,48(src)	; src->d[2].c[i].real 
	lds	ft5,52(src)	; src->d[2].c[i].imag 
	lds	ft6,72(src)	; src->d[3].c[i].real 
	lds	ft7,76(src)	; src->d[3].c[i].imag 

	subs/d	ft0,ft6,ft9
	subs/d	ft1,ft7,ft10
	adds/d	ft2,ft4,ft11
	adds/d	ft3,ft5,ft12

	sts	ft9,0(dest)
	addq color,1,color
	sts	ft10,4(dest)
	addq src,8,src		; next color 
	sts	ft11,24(dest)
	cmplt color,3,scratch
	sts	ft12,28(dest)

	addq dest,8,dest
	bne scratch,YUP_L
	ret     zero,(ra)
ZUP_S:
ZUP_L:
	lds	ft0,0(src)	; src->d[0].c[i].real 
	lds	ft1,4(src)	; src->d[0].c[i].imag 
	lds	ft2,24(src)	; src->d[1].c[i].real 
	lds	ft3,28(src)	; src->d[1].c[i].imag 
	lds	ft4,48(src)	; src->d[2].c[i].real 
	lds	ft5,52(src)	; src->d[2].c[i].imag 
	lds	ft6,72(src)	; src->d[3].c[i].real 
	lds	ft7,76(src)	; src->d[3].c[i].imag 

	subs/d	ft0,ft5,ft9
	addq color,1,color
	adds/d	ft1,ft4,ft10
	addq src,8,src		; next color 
	adds/d	ft2,ft7,ft11
	cmplt color,3,scratch
	subs/d	ft3,ft6,ft12

	sts	ft9,0(dest)
	sts	ft10,4(dest)
	sts	ft11,24(dest)
	sts	ft12,28(dest)

	addq dest,8,dest
	bne scratch,ZUP_L
	ret     zero,(ra)
TUP_S:
TUP_L:
	lds	ft0,0(src)	; src->d[0].c[i].real 
	lds	ft1,4(src)	; src->d[0].c[i].imag 
	lds	ft2,24(src)	; src->d[1].c[i].real 
	lds	ft3,28(src)	; src->d[1].c[i].imag 
	lds	ft4,48(src)	; src->d[2].c[i].real 
	lds	ft5,52(src)	; src->d[2].c[i].imag 
	lds	ft6,72(src)	; src->d[3].c[i].real 
	lds	ft7,76(src)	; src->d[3].c[i].imag 

	adds/d	ft0,ft4,ft9
	addq color,1,color
	adds/d	ft1,ft5,ft10
	addq src,8,src		; next color 
	adds/d	ft2,ft6,ft11
	cmplt color,3,scratch
	adds/d	ft3,ft7,ft12

	sts	ft9,0(dest)
	sts	ft10,4(dest)
	sts	ft11,24(dest)
	sts	ft12,28(dest)

	addq dest,8,dest
	bne scratch,TUP_L
	ret     zero,(ra)
XDOWN_S:
XDOWN_L:
	lds	ft0,0(src)	; src->d[0].c[i].real 
	lds	ft1,4(src)	; src->d[0].c[i].imag 
	lds	ft2,24(src)	; src->d[1].c[i].real 
	lds	ft3,28(src)	; src->d[1].c[i].imag 
	lds	ft4,48(src)	; src->d[2].c[i].real 
	lds	ft5,52(src)	; src->d[2].c[i].imag 
	lds	ft6,72(src)	; src->d[3].c[i].real 
	lds	ft7,76(src)	; src->d[3].c[i].imag 

	adds/d	ft0,ft7,ft9
	addq color,1,color
	subs/d	ft1,ft6,ft10
	addq src,8,src		; next color 
	adds/d	ft2,ft5,ft11
	cmplt color,3,scratch
	subs/d	ft3,ft4,ft12

	sts	ft9,0(dest)
	sts	ft10,4(dest)
	sts	ft11,24(dest)
	sts	ft12,28(dest)

	addq dest,8,dest
	bne scratch,XDOWN_L
	ret     zero,(ra)
YDOWN_S:
YDOWN_L:
	lds	ft0,0(src)	; src->d[0].c[i].real 
	lds	ft1,4(src)	; src->d[0].c[i].imag 
	lds	ft2,24(src)	; src->d[1].c[i].real 
	lds	ft3,28(src)	; src->d[1].c[i].imag 
	lds	ft4,48(src)	; src->d[2].c[i].real 
	lds	ft5,52(src)	; src->d[2].c[i].imag 
	lds	ft6,72(src)	; src->d[3].c[i].real 
	lds	ft7,76(src)	; src->d[3].c[i].imag 

	adds/d	ft0,ft6,ft9
	addq color,1,color
	adds/d	ft1,ft7,ft10
	addq src,8,src		; next color 
	subs/d	ft2,ft4,ft11
	cmplt color,3,scratch
	subs/d	ft3,ft5,ft12

	sts	ft9,0(dest)
	sts	ft10,4(dest)
	sts	ft11,24(dest)
	sts	ft12,28(dest)

	addq dest,8,dest
	bne scratch,YDOWN_L
	ret     zero,(ra)
ZDOWN_S:
ZDOWN_L:
	lds	ft0,0(src)	; src->d[0].c[i].real 
	lds	ft1,4(src)	; src->d[0].c[i].imag 
	lds	ft2,24(src)	; src->d[1].c[i].real 
	lds	ft3,28(src)	; src->d[1].c[i].imag 
	lds	ft4,48(src)	; src->d[2].c[i].real 
	lds	ft5,52(src)	; src->d[2].c[i].imag 
	lds	ft6,72(src)	; src->d[3].c[i].real 
	lds	ft7,76(src)	; src->d[3].c[i].imag 

	adds/d	ft0,ft5,ft9
	addq color,1,color
	subs/d	ft1,ft4,ft10
	addq src,8,src		; next color 
	subs/d	ft2,ft7,ft11
	cmplt color,3,scratch
	adds/d	ft3,ft6,ft12

	sts	ft9,0(dest)
	sts	ft10,4(dest)
	sts	ft11,24(dest)
	sts	ft12,28(dest)

	addq dest,8,dest
	bne scratch,ZDOWN_L
	ret     zero,(ra)
TDOWN_S:
TDOWN_L:
	lds	ft0,0(src)	; src->d[0].c[i].real 
	lds	ft1,4(src)	; src->d[0].c[i].imag 
	lds	ft2,24(src)	; src->d[1].c[i].real 
	lds	ft3,28(src)	; src->d[1].c[i].imag 
	lds	ft4,48(src)	; src->d[2].c[i].real 
	lds	ft5,52(src)	; src->d[2].c[i].imag 
	lds	ft6,72(src)	; src->d[3].c[i].real 
	lds	ft7,76(src)	; src->d[3].c[i].imag 

	subs/d	ft0,ft4,ft9
	addq color,1,color
	subs/d	ft1,ft5,ft10
	addq src,8,src		; next color 
	subs/d	ft2,ft6,ft11
	cmplt color,3,scratch
	subs/d	ft3,ft7,ft12

	sts	ft9,0(dest)
	sts	ft10,4(dest)
	sts	ft11,24(dest)
	sts	ft12,28(dest)

	addq dest,8,dest
	bne scratch,TDOWN_L
	ret     zero,(ra)

	.endp
	.end
