# configuration for replica exchange scripts

# run simulation: 
#   ../make_output_dirs.sh output 64
#   mpirun -np 64 -hostfile hostfile $bindir/namd2 +replicas 64 job0.conf +stdout output/%d/job0.%d.log
# the number of MPI ranks (-np) must be a multiple of the number of replicas (+replicas)

# to continue:
#   mpirun -np 64 -hostfile hostfile $bindir/namd2 +replicas 64 job1.conf +stdout output/%d/job1.%d.log
# increase num_runs below if job completed, or use latest restartXXX.tcl file available
# be sure to increment jobX for +stdout option on command line

# view in VMD:  source job0.conf; source ../show_replicas.vmd
# add continued:   source job1.conf; source ../show_replicas.vmd
# show both:  vmd -e load_all.vmd

# sort into single-temperature trajectories:
#   $bindir/sortreplicas output/%s/stretch_alanin.job0 64 10
#   $bindir/sortreplicas output/%s/stretch_alanin.job1 64 10

set num_replicas 64
set temperature 300
set steps_per_run 1000
set num_runs 10000
# num_runs should be divisible by runs_per_frame * frames_per_restart
set runs_per_frame 10
set frames_per_restart 10
set namd_config_file "alanin_base.namd"
set output_root "output/%s/stretch_alanin" ; # directories must exist
# set input_root "input/alanin.initial.%d" ; # initial configurations

proc replica_bias { i } {
  return [list lenpot "centers [expr 9 + ($i%8)] [expr 9 + ($i/8)]"]
}

proc replica_neighbors { i } {
  set nx 8
  set ny 8
  set ix [expr $i % $nx]
  set iy [expr $i / $nx]
  if { $ix % 2 } { set sx -1 } { set sx 1 }
  if { $iy % 2 } { set sy -1 } { set sy 1 }
  set result {}
  foreach { dx dy } { $sx 0 -$sx 0 0 $sy 0 -$sy } {
    set jx [expr $ix + $dx]
    set jy [expr $iy + $dy]
    if { $jx < 0 || $jx >= $nx || $jy < 0 || $jy >= $ny } {
      lappend result $i ; # swap with self
    } {
      set j [expr $jy * $nx + $jx]
      lappend result $j
    }
  }
  return $result
}

# the following used only by show_replicas.vmd
set psf_file "alanin.psf"
set initial_pdb_file "alanin.pdb"
set fit_pdb_file "alanin.pdb"

